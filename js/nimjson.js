/* Generated by the Nim Compiler v1.0.2 */
/*   (c) 2019 Andreas Rumpf */

var framePtr = null;
var excHandler = 0;
var lastJSError = null;
if (typeof Int8Array === 'undefined') Int8Array = Array;
if (typeof Int16Array === 'undefined') Int16Array = Array;
if (typeof Int32Array === 'undefined') Int32Array = Array;
if (typeof Uint8Array === 'undefined') Uint8Array = Array;
if (typeof Uint16Array === 'undefined') Uint16Array = Array;
if (typeof Uint32Array === 'undefined') Uint32Array = Array;
if (typeof Float32Array === 'undefined') Float32Array = Array;
if (typeof Float64Array === 'undefined') Float64Array = Array;
var NTI47450 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI222084 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI44032 = {size: 0,kind: 1,base: null,node: null,finalizer: null};
var NTI44026 = {size: 0,kind: 36,base: null,node: null,finalizer: null};
var NTI54056 = {size: 0,kind: 35,base: null,node: null,finalizer: null};
var NTI222041 = {size: 0, kind: 14, base: null, node: null, finalizer: null};
var NTI222045 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI222043 = {size: 0,kind: 22,base: null,node: null,finalizer: null};
var NTI86020 = {size: 0,kind: 31,base: null,node: null,finalizer: null};
var NTI222073 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI222070 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI222067 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI47460 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI149432 = {size: 0,kind: 31,base: null,node: null,finalizer: null};
var NTI152247 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI47462 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI47430 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI47452 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI47444 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI47458 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI44006 = {size: 0,kind: 31,base: null,node: null,finalizer: null};
var NTI65156 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI47408 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI47514 = {size: 0,kind: 22,base: null,node: null,finalizer: null};
var NTI44016 = {size: 0,kind: 40,base: null,node: null,finalizer: null};
var NTI44042 = {size: 0,kind: 29,base: null,node: null,finalizer: null};
var NTI47508 = {size: 0,kind: 22,base: null,node: null,finalizer: null};
var NTI47426 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI47428 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI47442 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI47446 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI44040 = {size: 0,kind: 28,base: null,node: null,finalizer: null};
var NNI47446 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI47446.node = NNI47446;
var NNI47442 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI47442.node = NNI47442;
var NNI47428 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI47428.node = NNI47428;
NTI47508.base = NTI47426;
NTI47514.base = NTI47426;
var NNI47426 = {kind: 2, len: 6, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "parent", len: 0, typ: NTI47508, name: "parent", sons: null}, 
{kind: 1, offset: "name", len: 0, typ: NTI44042, name: "name", sons: null}, 
{kind: 1, offset: "message", len: 0, typ: NTI44040, name: "msg", sons: null}, 
{kind: 1, offset: "trace", len: 0, typ: NTI44040, name: "trace", sons: null}, 
{kind: 1, offset: "raiseId", len: 0, typ: NTI44016, name: "raiseId", sons: null}, 
{kind: 1, offset: "up", len: 0, typ: NTI47514, name: "up", sons: null}]};
NTI47426.node = NNI47426;
var NNI47408 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI47408.node = NNI47408;
NTI47426.base = NTI47408;
NTI47428.base = NTI47426;
NTI47442.base = NTI47428;
NTI47446.base = NTI47442;
var NNI65156 = {kind: 2, len: 2, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "Field0", len: 0, typ: NTI44042, name: "Field0", sons: null}, 
{kind: 1, offset: "Field1", len: 0, typ: NTI44006, name: "Field1", sons: null}]};
NTI65156.node = NNI65156;
var NNI47458 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI47458.node = NNI47458;
NTI47458.base = NTI47428;
var NNI47444 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI47444.node = NNI47444;
NTI47444.base = NTI47442;
var NNI47452 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI47452.node = NNI47452;
var NNI47430 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI47430.node = NNI47430;
NTI47430.base = NTI47426;
NTI47452.base = NTI47430;
var NNI47462 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI47462.node = NNI47462;
NTI47462.base = NTI47428;
var NNI152247 = {kind: 2, len: 2, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "a", len: 0, typ: NTI149432, name: "a", sons: null}, 
{kind: 1, offset: "b", len: 0, typ: NTI44006, name: "b", sons: null}]};
NTI152247.node = NNI152247;
var NNI47460 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI47460.node = NNI47460;
NTI47460.base = NTI47428;
var NNI222041 = {kind: 2, offset: 0, typ: null, name: null, len: 7, sons: {"0": {kind: 1, offset: 0, typ: NTI222041, name: "JNull", len: 0, sons: null}, 
"1": {kind: 1, offset: 1, typ: NTI222041, name: "JBool", len: 0, sons: null}, 
"2": {kind: 1, offset: 2, typ: NTI222041, name: "JInt", len: 0, sons: null}, 
"3": {kind: 1, offset: 3, typ: NTI222041, name: "JFloat", len: 0, sons: null}, 
"4": {kind: 1, offset: 4, typ: NTI222041, name: "JString", len: 0, sons: null}, 
"5": {kind: 1, offset: 5, typ: NTI222041, name: "JObject", len: 0, sons: null}, 
"6": {kind: 1, offset: 6, typ: NTI222041, name: "JArray", len: 0, sons: null}}};
NTI222041.node = NNI222041;
NTI222084.base = NTI222043;
var NNI222045 = {kind: 3, offset: "kind", len: 7, typ: NTI222041, name: "kind", sons: [[setConstr(4), {kind: 1, offset: "str", len: 0, typ: NTI44040, name: "str", sons: null}], 
[setConstr(2), {kind: 1, offset: "num", len: 0, typ: NTI54056, name: "num", sons: null}], 
[setConstr(3), {kind: 1, offset: "fnum", len: 0, typ: NTI44026, name: "fnum", sons: null}], 
[setConstr(1), {kind: 1, offset: "bval", len: 0, typ: NTI44032, name: "bval", sons: null}], 
[setConstr(0), {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []}], 
[setConstr(5), {kind: 1, offset: "fields", len: 0, typ: NTI222067, name: "fields", sons: null}], 
[setConstr(6), {kind: 1, offset: "elems", len: 0, typ: NTI222084, name: "elems", sons: null}]]};
NTI222045.node = NNI222045;
NTI222043.base = NTI222045;
var NNI222073 = {kind: 2, len: 4, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "Field0", len: 0, typ: NTI86020, name: "Field0", sons: null}, 
{kind: 1, offset: "Field1", len: 0, typ: NTI44006, name: "Field1", sons: null}, 
{kind: 1, offset: "Field2", len: 0, typ: NTI44040, name: "Field2", sons: null}, 
{kind: 1, offset: "Field3", len: 0, typ: NTI222043, name: "Field3", sons: null}]};
NTI222073.node = NNI222073;
NTI222070.base = NTI222073;
var NNI222067 = {kind: 2, len: 4, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "data", len: 0, typ: NTI222070, name: "data", sons: null}, 
{kind: 1, offset: "counter", len: 0, typ: NTI44006, name: "counter", sons: null}, 
{kind: 1, offset: "first", len: 0, typ: NTI44006, name: "first", sons: null}, 
{kind: 1, offset: "last", len: 0, typ: NTI44006, name: "last", sons: null}]};
NTI222067.node = NNI222067;
var NNI47450 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI47450.node = NNI47450;
NTI47450.base = NTI47428;

function makeNimstrLit(c_67270) {
		  var ln = c_67270.length;
  var result = new Array(ln);
  for (var i = 0; i < ln; ++i) {
    result[i] = c_67270.charCodeAt(i);
  }
  return result;
  

	
}

function setConstr() {
		    var result = {};
    for (var i = 0; i < arguments.length; ++i) {
      var x = arguments[i];
      if (typeof(x) == "object") {
        for (var j = x[0]; j <= x[1]; ++j) {
          result[j] = true;
        }
      } else {
        result[x] = true;
      }
    }
    return result;
  

	
}
var ConstSet1 = setConstr(17, 16, 4, 18, 27, 19, 23, 22, 21);

function nimCopy(dest_68827, src_68828, ti_68829) {
	var result_69019 = null;

		switch (ti_68829.kind) {
		case 21:
		case 22:
		case 23:
		case 5:
			if (!(is_fat_pointer_68801(ti_68829))) {
			result_69019 = src_68828;
			}
			else {
				result_69019 = [src_68828[0], src_68828[1]];
			}
			
			break;
		case 19:
			      if (dest_68827 === null || dest_68827 === undefined) {
        dest_68827 = {};
      }
      else {
        for (var key in dest_68827) { delete dest_68827[key]; }
      }
      for (var key in src_68828) { dest_68827[key] = src_68828[key]; }
      result_69019 = dest_68827;
    
			break;
		case 18:
		case 17:
			if (!((ti_68829.base == null))) {
			result_69019 = nimCopy(dest_68827, src_68828, ti_68829.base);
			}
			else {
			if ((ti_68829.kind == 17)) {
			result_69019 = (dest_68827 === null || dest_68827 === undefined) ? {m_type: ti_68829} : dest_68827;
			}
			else {
				result_69019 = (dest_68827 === null || dest_68827 === undefined) ? {} : dest_68827;
			}
			}
			nimCopyAux(result_69019, src_68828, ti_68829.node);
			break;
		case 24:
		case 4:
		case 27:
		case 16:
			      if (src_68828 === null) {
        result_69019 = null;
      }
      else {
        if (dest_68827 === null || dest_68827 === undefined) {
          dest_68827 = new Array(src_68828.length);
        }
        else {
          dest_68827.length = src_68828.length;
        }
        result_69019 = dest_68827;
        for (var i = 0; i < src_68828.length; ++i) {
          result_69019[i] = nimCopy(result_69019[i], src_68828[i], ti_68829.base);
        }
      }
    
			break;
		case 28:
			      if (src_68828 !== null) {
        result_69019 = src_68828.slice(0);
      }
    
			break;
		default: 
			result_69019 = src_68828;
			break;
		}

	return result_69019;

}

function mnewString(len_67463) {
		    return new Array(len_67463);
  

	
}

function arrayConstr(len_69086, value_69087, typ_69088) {
		    var result = new Array(len_69086);
    for (var i = 0; i < len_69086; ++i) result[i] = nimCopy(null, value_69087, typ_69088);
    return result;
  

	
}

function cstrToNimstr(c_67287) {
		  var ln = c_67287.length;
  var result = new Array(ln);
  var r = 0;
  for (var i = 0; i < ln; ++i) {
    var ch = c_67287.charCodeAt(i);

    if (ch < 128) {
      result[r] = ch;
    }
    else {
      if (ch < 2048) {
        result[r] = (ch >> 6) | 192;
      }
      else {
        if (ch < 55296 || ch >= 57344) {
          result[r] = (ch >> 12) | 224;
        }
        else {
            ++i;
            ch = 65536 + (((ch & 1023) << 10) | (c_67287.charCodeAt(i) & 1023));
            result[r] = (ch >> 18) | 240;
            ++r;
            result[r] = ((ch >> 12) & 63) | 128;
        }
        ++r;
        result[r] = ((ch >> 6) & 63) | 128;
      }
      ++r;
      result[r] = (ch & 63) | 128;
    }
    ++r;
  }
  return result;
  

	
}

function toJSStr(s_67304) {
										var Tmp5;
						var Tmp7;

	var result_67305 = null;

		var res_67363 = new_seq_67336((s_67304 != null ? s_67304.length : 0));
		var i_67365 = 0;
		var j_67367 = 0;
		L1: do {
				L2: while (true) {
				if (!(i_67365 < (s_67304 != null ? s_67304.length : 0))) break L2;
					var c_67368 = s_67304[i_67365];
					if ((c_67368 < 128)) {
					res_67363[j_67367] = String.fromCharCode(c_67368);
					i_67365 += 1;
					}
					else {
						var helper_67391 = new_seq_67336(0);
						L3: do {
								L4: while (true) {
								if (!true) break L4;
									var code_67392 = c_67368.toString(16);
									if (((code_67392 != null ? code_67392.length : 0) == 1)) {
									if (helper_67391 != null) { helper_67391.push("%0"); } else { helper_67391 = ["%0"]; };
									}
									else {
									if (helper_67391 != null) { helper_67391.push("%"); } else { helper_67391 = ["%"]; };
									}
									
									if (helper_67391 != null) { helper_67391.push(code_67392); } else { helper_67391 = [code_67392]; };
									i_67365 += 1;
										if (((s_67304 != null ? s_67304.length : 0) <= i_67365)) Tmp5 = true; else {											Tmp5 = (s_67304[i_67365] < 128);										}									if (Tmp5) {
									break L3;
									}
									
									c_67368 = s_67304[i_67365];
								}
						} while(false);
++excHandler;
						Tmp7 = framePtr;
						try {
						res_67363[j_67367] = decodeURIComponent(helper_67391.join(""));
--excHandler;
} catch (EXC) {
 var prevJSError = lastJSError;
 lastJSError = EXC;
 --excHandler;
						framePtr = Tmp7;
						res_67363[j_67367] = helper_67391.join("");
						lastJSError = prevJSError;
						} finally {
						framePtr = Tmp7;
						}
					}
					
					j_67367 += 1;
				}
		} while(false);
		if (res_67363 === null) res_67363 = [];
               if (res_67363.length < j_67367) { for (var i=res_67363.length;i<j_67367;++i) res_67363.push(null); }
               else { res_67363.length = j_67367; };
		result_67305 = res_67363.join("");

	return result_67305;

}

function raiseException(e_65618, ename_65619) {
		e_65618.name = ename_65619;
		if ((excHandler == 0)) {
		unhandledException(e_65618);
		}
		
		e_65618.trace = nimCopy(null, raw_write_stack_trace_65468(), NTI44040);
		throw e_65618;

	
}

function addInt(a_67803, b_67804) {
		    var result = a_67803 + b_67804;
    if (result > 2147483647 || result < -2147483648) raiseOverflow();
    return result;
  

	
}
var ConstSet2 = setConstr(60, 62, 94);

function chckIndx(i_69105, a_69106, b_69107) {
			var Tmp1;

	var result_69108 = 0;

	BeforeRet: do {
			if (!(a_69106 <= i_69105)) Tmp1 = false; else {				Tmp1 = (i_69105 <= b_69107);			}		if (Tmp1) {
		result_69108 = i_69105;
		break BeforeRet;
		}
		else {
		raiseIndexError(i_69105, a_69106, b_69107);
		}
		
	} while (false);

	return result_69108;

}
var ConstSet3 = setConstr(60, 62, 94);
var ConstSet4 = setConstr(45, 43, 32);
var ConstSet5 = setConstr([48, 57]);
var ConstSet6 = setConstr([48, 57]);
var ConstSet7 = setConstr([48, 57]);

function subInt(a_67821, b_67822) {
		    var result = a_67821 - b_67822;
    if (result > 2147483647 || result < -2147483648) raiseOverflow();
    return result;
  

	
}

function divInt(a_67857, b_67858) {
		    if (b_67858 == 0) raiseDivByZero();
    if (b_67858 == -1 && a_67857 == 2147483647) raiseOverflow();
    return Math.trunc(a_67857 / b_67858);
  

	
}

function mulInt(a_67839, b_67840) {
		    var result = a_67839 * b_67840;
    if (result > 2147483647 || result < -2147483648) raiseOverflow();
    return result;
  

	
}
var ConstSet8 = setConstr([65, 90], [97, 122]);

function chckRange(i_69124, a_69125, b_69126) {
			var Tmp1;

	var result_69127 = 0;

	BeforeRet: do {
			if (!(a_69125 <= i_69124)) Tmp1 = false; else {				Tmp1 = (i_69124 <= b_69126);			}		if (Tmp1) {
		result_69127 = i_69124;
		break BeforeRet;
		}
		else {
		raiseRangeError();
		}
		
	} while (false);

	return result_69127;

}
var ConstSet9 = setConstr([97, 122]);
var ConstSet10 = setConstr(5);

function raiseFieldError(f_67055) {
		var eHEX60gensym67058_67203 = null;
		eHEX60gensym67058_67203 = {m_type: NTI47460, parent: null, name: null, message: null, trace: null, raiseId: 0, up: null};
		eHEX60gensym67058_67203.message = nimCopy(null, f_67055, NTI44040);
		eHEX60gensym67058_67203.parent = null;
		raiseException(eHEX60gensym67058_67203, "FieldError");

	
}
var ConstSet11 = setConstr(6);
var ConstSet12 = setConstr(6);
var ConstSet13 = setConstr(6);
var ConstSet14 = setConstr(6);
var ConstSet15 = setConstr(6);

function modInt(a_67875, b_67876) {
		    if (b_67876 == 0) raiseDivByZero();
    if (b_67876 == -1 && a_67875 == 2147483647) raiseOverflow();
    return Math.trunc(a_67875 % b_67876);
  

	
}

function eqStrings(a_67641, b_67642) {
		    if (a_67641 == b_67642) return true;
    if (a_67641 === null && b_67642.length == 0) return true;
    if (b_67642 === null && a_67641.length == 0) return true;
    if ((!a_67641) || (!b_67642)) return false;
    var alen = a_67641.length;
    if (alen != b_67642.length) return false;
    for (var i = 0; i < alen; ++i)
      if (a_67641[i] != b_67642[i]) return false;
    return true;
  

	
}
var ConstSet16 = setConstr(5);
var nim_program_result = 0;
var global_raise_hook_62618 = [null];
var local_raise_hook_62623 = [null];
var out_of_mem_hook_62626 = [null];
  if (!Math.trunc) {
    Math.trunc = function(v) {
      v = +v;
      if (!isFinite(v)) return v;

      return (v - v % 1)   ||   (v < 0 ? -0 : v === 0 ? v : 0);
    };
  }
var object_id_86237 = [0];

function is_fat_pointer_68801(ti_68803) {
	var result_68804 = false;

	BeforeRet: do {
		result_68804 = !((ConstSet1[ti_68803.base.kind] != undefined));
		break BeforeRet;
	} while (false);

	return result_68804;

}

function nimCopyAux(dest_68832, src_68833, n_68835) {
		switch (n_68835.kind) {
		case 0:
			break;
		case 1:
			      dest_68832[n_68835.offset] = nimCopy(dest_68832[n_68835.offset], src_68833[n_68835.offset], n_68835.typ);
    
			break;
		case 2:
			    for (var i = 0; i < n_68835.sons.length; i++) {
      nimCopyAux(dest_68832, src_68833, n_68835.sons[i]);
    }
    
			break;
		case 3:
			      dest_68832[n_68835.offset] = nimCopy(dest_68832[n_68835.offset], src_68833[n_68835.offset], n_68835.typ);
      for (var i = 0; i < n_68835.sons.length; ++i) {
        nimCopyAux(dest_68832, src_68833, n_68835.sons[i][1]);
      }
    
			break;
		}

	
}

function add_62638(x_62641, x_62641_Idx, y_62642) {
		      if (x_62641[x_62641_Idx] === null) { x_62641[x_62641_Idx] = []; }
      var off = x_62641[x_62641_Idx].length;
      x_62641[x_62641_Idx].length += y_62642.length;
      for (var i = 0; i < y_62642.length; ++i) {
        x_62641[x_62641_Idx][off+i] = y_62642.charCodeAt(i);
      }
    

	
}

function aux_write_stack_trace_65151(f_65153) {
					var Tmp3;

	var result_65154 = [null];

		var it_65162 = f_65153;
		var i_65164 = 0;
		var total_65166 = 0;
		var temp_frames_65173 = arrayConstr(64, {Field0: null, Field1: 0}, NTI65156);
		L1: do {
				L2: while (true) {
					if (!!((it_65162 == null))) Tmp3 = false; else {						Tmp3 = (i_65164 <= 63);					}				if (!Tmp3) break L2;
					temp_frames_65173[i_65164].Field0 = it_65162.procname;
					temp_frames_65173[i_65164].Field1 = it_65162.line;
					i_65164 += 1;
					total_65166 += 1;
					it_65162 = it_65162.prev;
				}
		} while(false);
		L4: do {
				L5: while (true) {
				if (!!((it_65162 == null))) break L5;
					total_65166 += 1;
					it_65162 = it_65162.prev;
				}
		} while(false);
		result_65154[0] = nimCopy(null, [], NTI44040);
		if (!((total_65166 == i_65164))) {
		if (result_65154[0] != null) { result_65154[0] = (result_65154[0]).concat(makeNimstrLit("(")); } else { result_65154[0] = makeNimstrLit("("); };
		if (result_65154[0] != null) { result_65154[0] = (result_65154[0]).concat(cstrToNimstr(((total_65166 - i_65164))+"")); } else { result_65154[0] = cstrToNimstr(((total_65166 - i_65164))+"").slice(); };
		if (result_65154[0] != null) { result_65154[0] = (result_65154[0]).concat(makeNimstrLit(" calls omitted) ...\x0A")); } else { result_65154[0] = makeNimstrLit(" calls omitted) ...\x0A"); };
		}
		
		L6: do {
			var j_65421 = 0;
			var colontmp__251051 = 0;
			colontmp__251051 = (i_65164 - 1);
			var res_251056 = colontmp__251051;
			L7: do {
					L8: while (true) {
					if (!(0 <= res_251056)) break L8;
						j_65421 = res_251056;
						add_62638(result_65154, 0, temp_frames_65173[j_65421].Field0);
						if ((0 < temp_frames_65173[j_65421].Field1)) {
						if (result_65154[0] != null) { result_65154[0] = (result_65154[0]).concat(makeNimstrLit(", line: ")); } else { result_65154[0] = makeNimstrLit(", line: "); };
						if (result_65154[0] != null) { result_65154[0] = (result_65154[0]).concat(cstrToNimstr((temp_frames_65173[j_65421].Field1)+"")); } else { result_65154[0] = cstrToNimstr((temp_frames_65173[j_65421].Field1)+"").slice(); };
						}
						
						if (result_65154[0] != null) { result_65154[0] = (result_65154[0]).concat(makeNimstrLit("\x0A")); } else { result_65154[0] = makeNimstrLit("\x0A"); };
						res_251056 -= 1;
					}
			} while(false);
		} while(false);

	return result_65154[0];

}

function raw_write_stack_trace_65468() {
	var result_65470 = null;

		if (!((framePtr == null))) {
		result_65470 = nimCopy(null, (makeNimstrLit("Traceback (most recent call last)\x0A") || []).concat(aux_write_stack_trace_65151(framePtr) || []), NTI44040);
		}
		else {
			result_65470 = nimCopy(null, makeNimstrLit("No stack traceback available\x0A"), NTI44040);
		}
		

	return result_65470;

}

function new_seq_67336(len_67339) {
	var result_67341 = null;

	var F={procname:"newSeq.newSeq",prev:framePtr,filename:"system.nim",line:0};
	framePtr = F;
		F.line = 996;
		result_67341 = new Array(len_67339); for (var i=0;i<len_67339;++i) {result_67341[i]=null;}	framePtr = F.prev;

	return result_67341;

}

function unhandledException(e_65529) {
		var buf_65530 = [[]];
		if (!(((e_65529.message != null ? e_65529.message.length : 0) == 0))) {
		if (buf_65530[0] != null) { buf_65530[0] = (buf_65530[0]).concat(makeNimstrLit("Error: unhandled exception: ")); } else { buf_65530[0] = makeNimstrLit("Error: unhandled exception: "); };
		if (buf_65530[0] != null) { buf_65530[0] = (buf_65530[0]).concat(e_65529.message); } else { buf_65530[0] = e_65529.message.slice(); };
		}
		else {
		if (buf_65530[0] != null) { buf_65530[0] = (buf_65530[0]).concat(makeNimstrLit("Error: unhandled exception")); } else { buf_65530[0] = makeNimstrLit("Error: unhandled exception"); };
		}
		
		if (buf_65530[0] != null) { buf_65530[0] = (buf_65530[0]).concat(makeNimstrLit(" [")); } else { buf_65530[0] = makeNimstrLit(" ["); };
		add_62638(buf_65530, 0, e_65529.name);
		if (buf_65530[0] != null) { buf_65530[0] = (buf_65530[0]).concat(makeNimstrLit("]\x0A")); } else { buf_65530[0] = makeNimstrLit("]\x0A"); };
		if (buf_65530[0] != null) { buf_65530[0] = (buf_65530[0]).concat(raw_write_stack_trace_65468()); } else { buf_65530[0] = raw_write_stack_trace_65468().slice(); };
		var cbuf_65601 = toJSStr(buf_65530[0]);
		framePtr = null;
		  if (typeof(Error) !== "undefined") {
    throw new Error(cbuf_65601);
  }
  else {
    throw cbuf_65601;
  }
  

	
}

function raiseOverflow() {
		var eHEX60gensym66058_66203 = null;
		eHEX60gensym66058_66203 = {m_type: NTI47446, parent: null, name: null, message: null, trace: null, raiseId: 0, up: null};
		eHEX60gensym66058_66203.message = nimCopy(null, makeNimstrLit("over- or underflow"), NTI44040);
		eHEX60gensym66058_66203.parent = null;
		raiseException(eHEX60gensym66058_66203, "OverflowError");

	
}

function raiseIndexError(i_66655, a_66656, b_66657) {
		var Tmp1;

		var eHEX60gensym66802_67003 = null;
		eHEX60gensym66802_67003 = {m_type: NTI47458, parent: null, name: null, message: null, trace: null, raiseId: 0, up: null};
		if ((b_66657 < a_66656)) {
		Tmp1 = makeNimstrLit("index out of bounds, the container is empty");
		}
		else {
		Tmp1 = (makeNimstrLit("index ") || []).concat(cstrToNimstr((i_66655)+"") || [],makeNimstrLit(" not in ") || [],cstrToNimstr((a_66656)+"") || [],makeNimstrLit(" .. ") || [],cstrToNimstr((b_66657)+"") || []);
		}
		
		eHEX60gensym66802_67003.message = nimCopy(null, Tmp1, NTI44040);
		eHEX60gensym66802_67003.parent = null;
		raiseException(eHEX60gensym66802_67003, "IndexError");

	
}

function raiseDivByZero() {
		var eHEX60gensym66257_66403 = null;
		eHEX60gensym66257_66403 = {m_type: NTI47444, parent: null, name: null, message: null, trace: null, raiseId: 0, up: null};
		eHEX60gensym66257_66403.message = nimCopy(null, makeNimstrLit("division by zero"), NTI44040);
		eHEX60gensym66257_66403.parent = null;
		raiseException(eHEX60gensym66257_66403, "DivByZeroError");

	
}

function parse_saturated_natural_114231(s_114233, b_114235, b_114235_Idx, start_114236) {
			var Tmp1;
					var Tmp4;

	var result_114238 = 0;

	var F={procname:"parseutils.parseSaturatedNatural",prev:framePtr,filename:"parseutils.nim",line:0};
	framePtr = F;
		F.line = 480;
		var i_114239 = start_114236;
		if (((i_114239 < (s_114233 != null ? s_114233.length : 0)) && (s_114233[chckIndx(i_114239, 0, s_114233.length+0-1)-0] == 43))) {
		F.line = 481;
		i_114239 = addInt(i_114239, 1);
		}
		
			if (!(i_114239 < (s_114233 != null ? s_114233.length : 0))) Tmp1 = false; else {				Tmp1 = (ConstSet6[s_114233[chckIndx(i_114239, 0, s_114233.length+0-1)-0]] != undefined);			}		if (Tmp1) {
		F.line = 483;
		b_114235[b_114235_Idx] = 0;
		L2: do {
			F.line = 484;
				L3: while (true) {
					if (!(i_114239 < (s_114233 != null ? s_114233.length : 0))) Tmp4 = false; else {						Tmp4 = (ConstSet7[s_114233[chckIndx(i_114239, 0, s_114233.length+0-1)-0]] != undefined);					}				if (!Tmp4) break L3;
					F.line = 485;
					var c_114268 = subInt(s_114233[chckIndx(i_114239, 0, s_114233.length+0-1)-0], 48);
					if ((b_114235[b_114235_Idx] <= divInt(subInt(2147483647, c_114268), 10))) {
					F.line = 487;
					b_114235[b_114235_Idx] = addInt(mulInt(b_114235[b_114235_Idx], 10), c_114268);
					}
					else {
						F.line = 489;
						b_114235[b_114235_Idx] = 2147483647;
					}
					
					F.line = 490;
					i_114239 = addInt(i_114239, 1);
					L5: do {
						F.line = 491;
							L6: while (true) {
							if (!((i_114239 < (s_114233 != null ? s_114233.length : 0)) && (s_114233[chckIndx(i_114239, 0, s_114233.length+0-1)-0] == 95))) break L6;
								F.line = 491;
								i_114239 = addInt(i_114239, 1);
							}
					} while(false);
				}
		} while(false);
		F.line = 492;
		result_114238 = subInt(i_114239, start_114236);
		}
		
	framePtr = F.prev;

	return result_114238;

}

function raiseRangeError() {
		var eHEX60gensym66457_66603 = null;
		eHEX60gensym66457_66603 = {m_type: NTI47462, parent: null, name: null, message: null, trace: null, raiseId: 0, up: null};
		eHEX60gensym66457_66603.message = nimCopy(null, makeNimstrLit("value out of range"), NTI44040);
		eHEX60gensym66457_66603.parent = null;
		raiseException(eHEX60gensym66457_66603, "RangeError");

	
}

function HEX5BHEX5D_152304(s_152308, x_152310) {
	var result_152311 = null;

	var F={procname:"[].[]",prev:framePtr,filename:"system.nim",line:0};
	framePtr = F;
		F.line = 3956;
		var a_152401 = x_152310.a;
		F.line = 3957;
		var l_152601 = addInt(subInt(subInt((s_152308 != null ? s_152308.length : 0), x_152310.b), a_152401), 1);
		F.line = 3958;
		result_152311 = nimCopy(null, mnewString(chckRange(l_152601, 0, 2147483647)), NTI44040);
		L1: do {
			F.line = 3959;
			var i_152609 = 0;
			F.line = 2738;
			var i_251080 = 0;
			L2: do {
				F.line = 2739;
					L3: while (true) {
					if (!(i_251080 < l_152601)) break L3;
						F.line = 3959;
						i_152609 = i_251080;
						F.line = 3959;
						result_152311[chckIndx(i_152609, 0, result_152311.length+0-1)-0] = s_152308[chckIndx(addInt(i_152609, a_152401), 0, s_152308.length+0-1)-0];
						F.line = 2741;
						i_251080 = addInt(i_251080, 1);
					}
			} while(false);
		} while(false);
	framePtr = F.prev;

	return result_152311;

}

function HEX2EHEX2E_152239(a_152243, b_152244) {
	var result_152250 = {a: 0, b: 0};

	var F={procname:".....",prev:framePtr,filename:"system.nim",line:0};
	framePtr = F;
		F.line = 502;
		nimCopy(result_152250, {a: a_152243, b: b_152244}, NTI152247);
	framePtr = F.prev;

	return result_152250;

}

function parse_standard_format_specifier_247324(s_247326, start_247327, ignore_unknown_suffix_247329) {
			var Tmp1;
			var Tmp2;
			var Tmp3;

	var result_247330 = {fill: 0, align: 0, sign: 0, alternateForm: false, padWithZero: false, minimumWidth: 0, precision: 0, typ: 0, endPosition: 0};

	var F={procname:"strformat.parseStandardFormatSpecifier",prev:framePtr,filename:"strformat.nim",line:0};
	framePtr = F;
		F.line = 379;
		result_247330.fill = 32;
		F.line = 380;
		result_247330.align = 0;
		F.line = 381;
		result_247330.sign = 45;
		F.line = 382;
		var i_247333 = start_247327;
		if (((addInt(i_247333, 1) < (s_247326 != null ? s_247326.length : 0)) && (ConstSet2[s_247326[chckIndx(addInt(i_247333, 1), 0, s_247326.length+0-1)-0]] != undefined))) {
		F.line = 384;
		result_247330.fill = s_247326[chckIndx(i_247333, 0, s_247326.length+0-1)-0];
		F.line = 385;
		result_247330.align = s_247326[chckIndx(addInt(i_247333, 1), 0, s_247326.length+0-1)-0];
		F.line = 386;
		i_247333 = addInt(i_247333, 2);
		}
		else {
		if (((i_247333 < (s_247326 != null ? s_247326.length : 0)) && (ConstSet3[s_247326[chckIndx(i_247333, 0, s_247326.length+0-1)-0]] != undefined))) {
		F.line = 388;
		result_247330.align = s_247326[chckIndx(i_247333, 0, s_247326.length+0-1)-0];
		F.line = 389;
		i_247333 = addInt(i_247333, 1);
		}
		}
		if (((i_247333 < (s_247326 != null ? s_247326.length : 0)) && (ConstSet4[s_247326[chckIndx(i_247333, 0, s_247326.length+0-1)-0]] != undefined))) {
		F.line = 392;
		result_247330.sign = s_247326[chckIndx(i_247333, 0, s_247326.length+0-1)-0];
		F.line = 393;
		i_247333 = addInt(i_247333, 1);
		}
		
		if (((i_247333 < (s_247326 != null ? s_247326.length : 0)) && (s_247326[chckIndx(i_247333, 0, s_247326.length+0-1)-0] == 35))) {
		F.line = 396;
		result_247330.alternateForm = true;
		F.line = 397;
		i_247333 = addInt(i_247333, 1);
		}
		
			if (!((addInt(i_247333, 1) < (s_247326 != null ? s_247326.length : 0)) && (s_247326[chckIndx(i_247333, 0, s_247326.length+0-1)-0] == 48))) Tmp1 = false; else {				Tmp1 = (ConstSet5[s_247326[chckIndx(addInt(i_247333, 1), 0, s_247326.length+0-1)-0]] != undefined);			}		if (Tmp1) {
		F.line = 400;
		result_247330.padWithZero = true;
		F.line = 401;
		i_247333 = addInt(i_247333, 1);
		}
		
		F.line = 403;
		var parsed_length_247391 = parse_saturated_natural_114231(s_247326, result_247330, "minimumWidth", i_247333);
		F.line = 404;
		i_247333 = addInt(i_247333, parsed_length_247391);
		if (((i_247333 < (s_247326 != null ? s_247326.length : 0)) && (s_247326[chckIndx(i_247333, 0, s_247326.length+0-1)-0] == 46))) {
		F.line = 406;
		i_247333 = addInt(i_247333, 1);
		F.line = 407;
		var parsed_length_b_247405 = parse_saturated_natural_114231(s_247326, result_247330, "precision", i_247333);
		F.line = 408;
		i_247333 = addInt(i_247333, parsed_length_b_247405);
		}
		else {
			F.line = 410;
			result_247330.precision = -1;
		}
		
			if (!(i_247333 < (s_247326 != null ? s_247326.length : 0))) Tmp2 = false; else {				Tmp2 = (ConstSet8[s_247326[chckIndx(i_247333, 0, s_247326.length+0-1)-0]] != undefined);			}		if (Tmp2) {
		F.line = 413;
		result_247330.typ = s_247326[chckIndx(i_247333, 0, s_247326.length+0-1)-0];
		F.line = 414;
		i_247333 = addInt(i_247333, 1);
		}
		
		F.line = 415;
		result_247330.endPosition = i_247333;
			if (!!((i_247333 == (s_247326 != null ? s_247326.length : 0)))) Tmp3 = false; else {				Tmp3 = !(ignore_unknown_suffix_247329);			}		if (Tmp3) {
		F.line = 3463;
		var eHEX60gensym247460_247603 = null;
		F.line = 3466;
		eHEX60gensym247460_247603 = {m_type: NTI47452, parent: null, name: null, message: null, trace: null, raiseId: 0, up: null};
		F.line = 418;
		eHEX60gensym247460_247603.message = nimCopy(null, (makeNimstrLit("invalid format string, cannot parse: ") || []).concat(HEX5BHEX5D_152304(s_247326, HEX2EHEX2E_152239(i_247333, 1)) || []), NTI44040);
		F.line = 3459;
		eHEX60gensym247460_247603.parent = null;
		F.line = 417;
		raiseException(eHEX60gensym247460_247603, "ValueError");
		}
		
	framePtr = F.prev;

	return result_247330;

}

function nucruneLen(s_116825) {
	var result_116826 = 0;

	var F={procname:"unicode.runeLen",prev:framePtr,filename:"unicode.nim",line:0};
	framePtr = F;
		F.line = 44;
		var i_116828 = 0;
		L1: do {
			F.line = 45;
				L2: while (true) {
				if (!(i_116828 < (s_116825 != null ? s_116825.length : 0))) break L2;
					if ((s_116825[chckIndx(i_116828, 0, s_116825.length+0-1)-0] <= 127)) {
					F.line = 46;
					i_116828 = addInt(i_116828, 1);
					}
					else {
					if ((((s_116825[chckIndx(i_116828, 0, s_116825.length+0-1)-0] >>> 0) >>> 5) == 6)) {
					F.line = 47;
					i_116828 = addInt(i_116828, 2);
					}
					else {
					if ((((s_116825[chckIndx(i_116828, 0, s_116825.length+0-1)-0] >>> 0) >>> 4) == 14)) {
					F.line = 48;
					i_116828 = addInt(i_116828, 3);
					}
					else {
					if ((((s_116825[chckIndx(i_116828, 0, s_116825.length+0-1)-0] >>> 0) >>> 3) == 30)) {
					F.line = 49;
					i_116828 = addInt(i_116828, 4);
					}
					else {
					if ((((s_116825[chckIndx(i_116828, 0, s_116825.length+0-1)-0] >>> 0) >>> 2) == 62)) {
					F.line = 50;
					i_116828 = addInt(i_116828, 5);
					}
					else {
					if ((((s_116825[chckIndx(i_116828, 0, s_116825.length+0-1)-0] >>> 0) >>> 1) == 126)) {
					F.line = 51;
					i_116828 = addInt(i_116828, 6);
					}
					else {
						F.line = 52;
					i_116828 = addInt(i_116828, 1);
					}
					}}}}}
					F.line = 53;
					result_116826 = addInt(result_116826, 1);
				}
		} while(false);
	framePtr = F.prev;

	return result_116826;

}

function rune_len_at_116957(s_116959, i_116960) {
	var result_116961 = 0;

	var F={procname:"unicode.runeLenAt",prev:framePtr,filename:"unicode.nim",line:0};
	framePtr = F;
		if ((s_116959[chckIndx(i_116960, 0, s_116959.length+0-1)-0] <= 127)) {
		F.line = 65;
		result_116961 = 1;
		}
		else {
		if ((((s_116959[chckIndx(i_116960, 0, s_116959.length+0-1)-0] >>> 0) >>> 5) == 6)) {
		F.line = 66;
		result_116961 = 2;
		}
		else {
		if ((((s_116959[chckIndx(i_116960, 0, s_116959.length+0-1)-0] >>> 0) >>> 4) == 14)) {
		F.line = 67;
		result_116961 = 3;
		}
		else {
		if ((((s_116959[chckIndx(i_116960, 0, s_116959.length+0-1)-0] >>> 0) >>> 3) == 30)) {
		F.line = 68;
		result_116961 = 4;
		}
		else {
		if ((((s_116959[chckIndx(i_116960, 0, s_116959.length+0-1)-0] >>> 0) >>> 2) == 62)) {
		F.line = 69;
		result_116961 = 5;
		}
		else {
		if ((((s_116959[chckIndx(i_116960, 0, s_116959.length+0-1)-0] >>> 0) >>> 1) == 126)) {
		F.line = 70;
		result_116961 = 6;
		}
		else {
			F.line = 71;
			result_116961 = 1;
		}
		}}}}}
	framePtr = F.prev;

	return result_116961;

}

function rune_offset_122644(s_122646, pos_122647, start_122648) {
	var result_122649 = 0;

	var F={procname:"unicode.runeOffset",prev:framePtr,filename:"unicode.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 322;
		var i_122651 = 0;
		F.line = 323;
		var o_122652 = start_122648;
		L1: do {
			F.line = 324;
				L2: while (true) {
				if (!(i_122651 < pos_122647)) break L2;
					F.line = 325;
					o_122652 = addInt(o_122652, chckRange(rune_len_at_116957(s_122646, o_122652), 0, 2147483647));
					if (((s_122646 != null ? s_122646.length : 0) <= o_122652)) {
					F.line = 327;
					result_122649 = -1;
					break BeforeRet;
					}
					
					F.line = 328;
					i_122651 = addInt(i_122651, 1);
				}
		} while(false);
		F.line = 329;
		result_122649 = o_122652;
		break BeforeRet;
	} while (false);
	framePtr = F.prev;

	return result_122649;

}

function validate_utf8_119829(s_119831) {
						var Tmp3;
						var Tmp4;
						var Tmp5;
						var Tmp6;
						var Tmp7;
						var Tmp8;

	var result_119832 = 0;

	var F={procname:"unicode.validateUtf8",prev:framePtr,filename:"unicode.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 175;
		var i_119834 = 0;
		F.line = 176;
		var l_119835 = (s_119831 != null ? s_119831.length : 0);
		L1: do {
			F.line = 177;
				L2: while (true) {
				if (!(i_119834 < l_119835)) break L2;
					if ((s_119831[chckIndx(i_119834, 0, s_119831.length+0-1)-0] <= 127)) {
					F.line = 179;
					i_119834 = addInt(i_119834, 1);
					}
					else {
					if ((((s_119831[chckIndx(i_119834, 0, s_119831.length+0-1)-0] >>> 0) >>> 5) == 6)) {
					if ((s_119831[chckIndx(i_119834, 0, s_119831.length+0-1)-0] < 194)) {
					F.line = 181;
					result_119832 = i_119834;
					break BeforeRet;
					}
					
						if (!(addInt(i_119834, 1) < l_119835)) Tmp3 = false; else {							Tmp3 = (((s_119831[chckIndx(addInt(i_119834, 1), 0, s_119831.length+0-1)-0] >>> 0) >>> 6) == 2);						}					if (Tmp3) {
					F.line = 182;
					i_119834 = addInt(i_119834, 2);
					}
					else {
						F.line = 183;
						result_119832 = i_119834;
						break BeforeRet;
					}
					
					}
					else {
					if ((((s_119831[chckIndx(i_119834, 0, s_119831.length+0-1)-0] >>> 0) >>> 4) == 14)) {
						if (!(addInt(i_119834, 2) < l_119835)) Tmp5 = false; else {							Tmp5 = (((s_119831[chckIndx(addInt(i_119834, 1), 0, s_119831.length+0-1)-0] >>> 0) >>> 6) == 2);						}						if (!Tmp5) Tmp4 = false; else {							Tmp4 = (((s_119831[chckIndx(addInt(i_119834, 2), 0, s_119831.length+0-1)-0] >>> 0) >>> 6) == 2);						}					if (Tmp4) {
					F.line = 186;
					i_119834 = addInt(i_119834, 3);
					}
					else {
						F.line = 187;
						result_119832 = i_119834;
						break BeforeRet;
					}
					
					}
					else {
					if ((((s_119831[chckIndx(i_119834, 0, s_119831.length+0-1)-0] >>> 0) >>> 3) == 30)) {
						if (!(addInt(i_119834, 3) < l_119835)) Tmp8 = false; else {							Tmp8 = (((s_119831[chckIndx(addInt(i_119834, 1), 0, s_119831.length+0-1)-0] >>> 0) >>> 6) == 2);						}						if (!Tmp8) Tmp7 = false; else {							Tmp7 = (((s_119831[chckIndx(addInt(i_119834, 2), 0, s_119831.length+0-1)-0] >>> 0) >>> 6) == 2);						}						if (!Tmp7) Tmp6 = false; else {							Tmp6 = (((s_119831[chckIndx(addInt(i_119834, 3), 0, s_119831.length+0-1)-0] >>> 0) >>> 6) == 2);						}					if (Tmp6) {
					F.line = 192;
					i_119834 = addInt(i_119834, 4);
					}
					else {
						F.line = 193;
						result_119832 = i_119834;
						break BeforeRet;
					}
					
					}
					else {
						F.line = 195;
						result_119832 = i_119834;
						break BeforeRet;
					}
					}}}
				}
		} while(false);
		F.line = 196;
		result_119832 = -1;
		break BeforeRet;
	} while (false);
	framePtr = F.prev;

	return result_119832;

}

function nsuRepeatChar(c_203656, count_203657) {
	var result_203658 = null;

	var F={procname:"strutils.repeat",prev:framePtr,filename:"strutils.nim",line:0};
	framePtr = F;
		F.line = 1294;
		result_203658 = nimCopy(null, mnewString(count_203657), NTI44040);
		L1: do {
			F.line = 1295;
			var i_203667 = 0;
			F.line = 2698;
			var colontmp__251112 = 0;
			F.line = 1295;
			colontmp__251112 = subInt(count_203657, 1);
			F.line = 2709;
			var res_251113 = 0;
			L2: do {
				F.line = 2710;
					L3: while (true) {
					if (!(res_251113 <= colontmp__251112)) break L3;
						F.line = 1295;
						i_203667 = res_251113;
						F.line = 1295;
						result_203658[chckIndx(i_203667, 0, result_203658.length+0-1)-0] = c_203656;
						F.line = 2712;
						res_251113 = addInt(res_251113, 1);
					}
			} while(false);
		} while(false);
	framePtr = F.prev;

	return result_203658;

}

function align_string_247223(s_247225, minimum_width_247226, align_247227, fill_247228) {
			var Tmp1;

	var result_247229 = null;

	var F={procname:"strformat.alignString",prev:framePtr,filename:"strformat.nim",line:0};
	framePtr = F;
		if ((minimum_width_247226 == 0)) {
		F.line = 282;
		result_247229 = nimCopy(null, s_247225, NTI44040);
		}
		else {
			F.line = 284;
			if ((validate_utf8_119829(s_247225) == -1)) {
			Tmp1 = nucruneLen(s_247225);
			}
			else {
			Tmp1 = (s_247225 != null ? s_247225.length : 0);
			}
			
			var s_rune_len_247231 = Tmp1;
			F.line = 285;
			var to_fill_247232 = subInt(minimum_width_247226, s_rune_len_247231);
			if ((to_fill_247232 <= 0)) {
			F.line = 287;
			result_247229 = nimCopy(null, s_247225, NTI44040);
			}
			else {
			if (((align_247227 == 60) || (align_247227 == 0))) {
			F.line = 289;
			result_247229 = nimCopy(null, (s_247225 || []).concat(nsuRepeatChar(fill_247228, chckRange(to_fill_247232, 0, 2147483647)) || []), NTI44040);
			}
			else {
			if ((align_247227 == 94)) {
			F.line = 291;
			var half_247233 = divInt(to_fill_247232, 2);
			F.line = 292;
			result_247229 = nimCopy(null, (nsuRepeatChar(fill_247228, chckRange(half_247233, 0, 2147483647)) || []).concat(s_247225 || [],nsuRepeatChar(fill_247228, chckRange(subInt(to_fill_247232, half_247233), 0, 2147483647)) || []), NTI44040);
			}
			else {
				F.line = 294;
				result_247229 = nimCopy(null, (nsuRepeatChar(fill_247228, chckRange(to_fill_247232, 0, 2147483647)) || []).concat(s_247225 || []), NTI44040);
			}
			}}
		}
		
	framePtr = F.prev;

	return result_247229;

}

function format_value_247688(result_247691, result_247691_Idx, value_247692, specifier_247693) {
	var F={procname:"strformat.formatValue",prev:framePtr,filename:"strformat.nim",line:0};
	framePtr = F;
		F.line = 502;
		var spec_247694 = parse_standard_format_specifier_247324(specifier_247693, 0, false);
		F.line = 503;
		var value_247695 = nimCopy(null, value_247692, NTI44040);
		F.line = 504;
		switch (spec_247694.typ) {
		case 115:
		case 0:
			break;
		default: 
			F.line = 3463;
			var eHEX60gensym247698_247803 = null;
			F.line = 3466;
			eHEX60gensym247698_247803 = {m_type: NTI47452, parent: null, name: null, message: null, trace: null, raiseId: 0, up: null};
			F.line = 508;
			eHEX60gensym247698_247803.message = nimCopy(null, (makeNimstrLit("invalid type in format string for string, expected \'s\', but got ") || []).concat([spec_247694.typ]), NTI44040);
			F.line = 3459;
			eHEX60gensym247698_247803.parent = null;
			F.line = 507;
			raiseException(eHEX60gensym247698_247803, "ValueError");
			break;
		}
		if (!((spec_247694.precision == -1))) {
		if ((spec_247694.precision < nucruneLen(value_247695))) {
		F.line = 512;
		(value_247695 == null ? value_247695 = mnewString(chckRange(rune_offset_122644(value_247695, chckRange(spec_247694.precision, 0, 2147483647), 0), 0, 2147483647)) : value_247695.length = chckRange(rune_offset_122644(value_247695, chckRange(spec_247694.precision, 0, 2147483647), 0), 0, 2147483647));
		}
		
		}
		
		F.line = 513;
		if (result_247691[result_247691_Idx] != null) { result_247691[result_247691_Idx] = (result_247691[result_247691_Idx]).concat(align_string_247223(value_247695, spec_247694.minimumWidth, spec_247694.align, spec_247694.fill)); } else { result_247691[result_247691_Idx] = align_string_247223(value_247695, spec_247694.minimumWidth, spec_247694.align, spec_247694.fill).slice(); };
	framePtr = F.prev;

	
}

function nsuToUpperAsciiChar(c_199463) {
	var result_199464 = 0;

	var F={procname:"strutils.toUpperAscii",prev:framePtr,filename:"strutils.nim",line:0};
	framePtr = F;
		if ((ConstSet9[c_199463] != undefined)) {
		F.line = 261;
		result_199464 = chckRange(subInt(c_199463, 32), 0, 255);
		}
		else {
			F.line = 263;
			result_199464 = c_199463;
		}
		
	framePtr = F.prev;

	return result_199464;

}

function head_upper_250026(str_250028) {
	var result_250029 = null;

	var F={procname:"nimjson.headUpper",prev:framePtr,filename:"util.nim",line:0};
	framePtr = F;
		F.line = 32;
		result_250029 = nimCopy(null, [nsuToUpperAsciiChar(str_250028[chckIndx(0, 0, str_250028.length+0-1)-0])].concat(HEX5BHEX5D_152304(str_250028, HEX2EHEX2E_152239(1, 1)) || []), NTI44040);
	framePtr = F.prev;

	return result_250029;

}

function len_229965(t_229970) {
	var result_229971 = 0;

	var F={procname:"len.len",prev:framePtr,filename:"tables.nim",line:0};
	framePtr = F;
		F.line = 1473;
		result_229971 = t_229970.counter;
	framePtr = F.prev;

	return result_229971;

}

function is_filled_108018(hcode_108020) {
	var result_108021 = false;

	var F={procname:"tables.isFilled",prev:framePtr,filename:"hashcommon.nim",line:0};
	framePtr = F;
		F.line = 27;
		result_108021 = !((hcode_108020 == 0));
	framePtr = F.prev;

	return result_108021;

}

function get_type_250078(key_250080, value_250081, strs_250084, strs_250084_Idx, index_250085, public_str_250086) {
		var Tmp1;
				var Tmp2;
				var Tmp3;
			var Tmp4;
			var Tmp5;

	var result_250087 = null;

	var F={procname:"nimjson.getType",prev:framePtr,filename:"util.nim",line:0};
	framePtr = F;
		F.line = 38;
		F.line = 42;
		switch (value_250081.kind) {
		case 6:
			F.line = 44;
			var u_key_250088 = head_upper_250026(key_250080);
			F.line = 45;
			var s_250089 = makeNimstrLit("seq[");
				var Tmp2 = value_250081;
				if (ConstSet11[Tmp2.kind]===undefined) { raiseFieldError(makeNimstrLit("\'elems\' is not accessible using discriminant \'kind\' of type \'JsonNodeObj\'")); }
			if ((0 < ((Tmp3 = Tmp2.elems, Tmp3) != null ? Tmp3.length : 0))) {
			F.line = 48;
			var Tmp4 = value_250081;
			if (ConstSet12[Tmp4.kind]===undefined) { raiseFieldError(makeNimstrLit("\'elems\' is not accessible using discriminant \'kind\' of type \'JsonNodeObj\'")); }
			var child_250099 = (Tmp5 = Tmp4.elems, Tmp5)[chckIndx(0, 0, Tmp5.length+0-1)-0];
			F.line = 49;
			if (s_250089 != null) { s_250089 = (s_250089).concat(get_type_250078(u_key_250088, child_250099, strs_250084, strs_250084_Idx, index_250085, public_str_250086)); } else { s_250089 = get_type_250078(u_key_250088, child_250099, strs_250084, strs_250084_Idx, index_250085, public_str_250086).slice(); };
			if ((child_250099.kind == 5)) {
			F.line = 51;
			obj_format_250002(child_250099, u_key_250088, strs_250084, strs_250084_Idx, addInt(index_250085, 1), public_str_250086);
			}
			
			}
			else {
				F.line = 53;
			if (s_250089 != null) { s_250089 = (s_250089).concat(makeNimstrLit("NilType")); } else { s_250089 = makeNimstrLit("NilType"); };
			}
			
			F.line = 54;
			if (s_250089 != null) { s_250089 = (s_250089).concat(makeNimstrLit("]")); } else { s_250089 = makeNimstrLit("]"); };
			Tmp1 = s_250089;
			break;
		case 5:
			Tmp1 = head_upper_250026(key_250080);
			break;
		case 4:
			Tmp1 = makeNimstrLit("string");
			break;
		case 2:
			Tmp1 = makeNimstrLit("int64");
			break;
		case 3:
			Tmp1 = makeNimstrLit("float64");
			break;
		case 1:
			Tmp1 = makeNimstrLit("bool");
			break;
		case 0:
			Tmp1 = makeNimstrLit("NilType");
			break;
		}
		result_250087 = nimCopy(null, Tmp1, NTI44040);
	framePtr = F.prev;

	return result_250087;

}

function sys_fatal_58862(message_58866) {
	var F={procname:"sysFatal.sysFatal",prev:framePtr,filename:"fatal.nim",line:0};
	framePtr = F;
		F.line = 34;
		var e_59003 = null;
		F.line = 37;
		e_59003 = {m_type: NTI47450, parent: null, name: null, message: null, trace: null, raiseId: 0, up: null};
		F.line = 38;
		e_59003.message = nimCopy(null, message_58866, NTI44040);
		F.line = 39;
		raiseException(e_59003, "AssertionError");
	framePtr = F.prev;

	
}

function raise_assert_58858(msg_58860) {
	var F={procname:"assertions.raiseAssert",prev:framePtr,filename:"assertions.nim",line:0};
	framePtr = F;
		F.line = 20;
		sys_fatal_58862(msg_58860);
	framePtr = F.prev;

	
}

function failed_assert_impl_59066(msg_59068) {
	var F={procname:"assertions.failedAssertImpl",prev:framePtr,filename:"assertions.nim",line:0};
	framePtr = F;
		F.line = 27;
		raise_assert_58858(msg_59068);
	framePtr = F.prev;

	
}

function obj_format_250002(self_250004, obj_name_250005, strs_250022, strs_250022_Idx, index_250023, public_str_250025) {
			var Tmp2;

	var F={procname:"nimjson.objFormat",prev:framePtr,filename:"util.nim",line:0};
	framePtr = F;
		F.line = 67;
		if (strs_250022[strs_250022_Idx] != null) { strs_250022[strs_250022_Idx].push([]); } else { strs_250022[strs_250022_Idx] = [[]]; };
		F.line = 68;
		F.line = 68;
		var fmt_res_250153 = [mnewString(0)];
		F.line = 68;
		if (fmt_res_250153[0] != null) { fmt_res_250153[0] = (fmt_res_250153[0]).concat(makeNimstrLit("  ")); } else { fmt_res_250153[0] = makeNimstrLit("  "); };
		F.line = 68;
		format_value_247688(fmt_res_250153, 0, head_upper_250026(obj_name_250005), []);
		F.line = 68;
		format_value_247688(fmt_res_250153, 0, public_str_250025, []);
		F.line = 68;
		if (fmt_res_250153[0] != null) { fmt_res_250153[0] = (fmt_res_250153[0]).concat(makeNimstrLit(" = ref object\x0A")); } else { fmt_res_250153[0] = makeNimstrLit(" = ref object\x0A"); };
		if (strs_250022[strs_250022_Idx][chckIndx(index_250023, 0, strs_250022[strs_250022_Idx].length+0-1)-0] != null) { strs_250022[strs_250022_Idx][chckIndx(index_250023, 0, strs_250022[strs_250022_Idx].length+0-1)-0] = (strs_250022[strs_250022_Idx][chckIndx(index_250023, 0, strs_250022[strs_250022_Idx].length+0-1)-0]).concat(fmt_res_250153[0]); } else { strs_250022[strs_250022_Idx][chckIndx(index_250023, 0, strs_250022[strs_250022_Idx].length+0-1)-0] = fmt_res_250153[0].slice(); };
		L1: do {
			F.line = 69;
			var k_250170 = null;
			F.line = 69;
			var v_250171 = null;
			F.line = 1619;
			var colontmp__251119 = {data: null, counter: 0, first: 0, last: 0};
			F.line = 69;
			var Tmp2 = self_250004;
			if (ConstSet10[Tmp2.kind]===undefined) { raiseFieldError(makeNimstrLit("\'fields\' is not accessible using discriminant \'kind\' of type \'JsonNodeObj\'")); }
			nimCopy(colontmp__251119, Tmp2.fields, NTI222067);
			F.line = 1645;
			var l_251121 = len_229965(colontmp__251119);
			if ((0 < colontmp__251119.counter)) {
			F.line = 1257;
			var h_251122 = colontmp__251119.first;
			L3: do {
				F.line = 1258;
					L4: while (true) {
					if (!(0 <= h_251122)) break L4;
						F.line = 1259;
						var nxt_251124 = colontmp__251119.data[chckIndx(h_251122, 0, colontmp__251119.data.length+0-1)-0].Field1;
						if (is_filled_108018(colontmp__251119.data[chckIndx(h_251122, 0, colontmp__251119.data.length+0-1)-0].Field0)) {
						F.line = 69;
						k_250170 = colontmp__251119.data[chckIndx(h_251122, 0, colontmp__251119.data.length+0-1)-0].Field2;
						F.line = 1647;
						v_250171 = colontmp__251119.data[chckIndx(h_251122, 0, colontmp__251119.data.length+0-1)-0].Field3;
						F.line = 70;
						var t_250172 = get_type_250078(k_250170, v_250171, strs_250022, strs_250022_Idx, index_250023, public_str_250025);
						F.line = 71;
						F.line = 71;
						var fmt_res_250173 = [mnewString(0)];
						F.line = 71;
						if (fmt_res_250173[0] != null) { fmt_res_250173[0] = (fmt_res_250173[0]).concat(makeNimstrLit("    ")); } else { fmt_res_250173[0] = makeNimstrLit("    "); };
						F.line = 71;
						format_value_247688(fmt_res_250173, 0, k_250170, []);
						F.line = 71;
						format_value_247688(fmt_res_250173, 0, public_str_250025, []);
						F.line = 71;
						if (fmt_res_250173[0] != null) { fmt_res_250173[0] = (fmt_res_250173[0]).concat(makeNimstrLit(": ")); } else { fmt_res_250173[0] = makeNimstrLit(": "); };
						F.line = 71;
						format_value_247688(fmt_res_250173, 0, t_250172, []);
						F.line = 71;
						if (fmt_res_250173[0] != null) { fmt_res_250173[0] = (fmt_res_250173[0]).concat(makeNimstrLit("\x0A")); } else { fmt_res_250173[0] = makeNimstrLit("\x0A"); };
						if (strs_250022[strs_250022_Idx][chckIndx(index_250023, 0, strs_250022[strs_250022_Idx].length+0-1)-0] != null) { strs_250022[strs_250022_Idx][chckIndx(index_250023, 0, strs_250022[strs_250022_Idx].length+0-1)-0] = (strs_250022[strs_250022_Idx][chckIndx(index_250023, 0, strs_250022[strs_250022_Idx].length+0-1)-0]).concat(fmt_res_250173[0]); } else { strs_250022[strs_250022_Idx][chckIndx(index_250023, 0, strs_250022[strs_250022_Idx].length+0-1)-0] = fmt_res_250173[0].slice(); };
						if ((v_250171.kind == 5)) {
						F.line = 75;
						obj_format_250002(v_250171, k_250170, strs_250022, strs_250022_Idx, addInt(index_250023, 1), public_str_250025);
						}
						
						if (!((len_229965(colontmp__251119) == l_251121))) {
						F.line = 1648;
						failed_assert_impl_59066(makeNimstrLit("/home/travis/.choosenim/toolchains/nim-1.0.2/lib/pure/collections/tables.nim(1648, 11) `len(t) ==\x0A    L` the length of the table changed while iterating over it"));
						}
						
						}
						
						F.line = 1262;
						h_251122 = nxt_251124;
					}
			} while(false);
			}
			
		} while(false);
	framePtr = F.prev;

	
}

function nsuJoinSep(a_204664, sep_204665) {
	var result_204666 = null;

	var F={procname:"strutils.join",prev:framePtr,filename:"strutils.nim",line:0};
	framePtr = F;
		if ((0 < (a_204664 != null ? a_204664.length : 0))) {
		F.line = 1774;
		var l_204677 = mulInt((sep_204665 != null ? sep_204665.length : 0), subInt((a_204664 != null ? a_204664.length : 0), 1));
		L1: do {
			F.line = 1775;
			var i_204691 = 0;
			F.line = 2698;
			var colontmp__251129 = 0;
			F.line = 1775;
			colontmp__251129 = (a_204664 != null ? (a_204664.length-1) : -1);
			F.line = 2709;
			var res_251130 = 0;
			L2: do {
				F.line = 2710;
					L3: while (true) {
					if (!(res_251130 <= colontmp__251129)) break L3;
						F.line = 1775;
						i_204691 = res_251130;
						F.line = 1775;
						l_204677 = addInt(l_204677, (a_204664[chckIndx(i_204691, 0, a_204664.length+0-1)-0] != null ? a_204664[chckIndx(i_204691, 0, a_204664.length+0-1)-0].length : 0));
						F.line = 2712;
						res_251130 = addInt(res_251130, 1);
					}
			} while(false);
		} while(false);
		F.line = 1776;
		result_204666 = nimCopy(null, mnewString(0), NTI44040);
		F.line = 1777;
		if (result_204666 != null) { result_204666 = (result_204666).concat(a_204664[chckIndx(0, 0, a_204664.length+0-1)-0]); } else { result_204666 = a_204664[chckIndx(0, 0, a_204664.length+0-1)-0].slice(); };
		L4: do {
			F.line = 1778;
			var i_204711 = 0;
			F.line = 2698;
			var colontmp__251136 = 0;
			F.line = 1778;
			colontmp__251136 = (a_204664 != null ? (a_204664.length-1) : -1);
			F.line = 2709;
			var res_251137 = 1;
			L5: do {
				F.line = 2710;
					L6: while (true) {
					if (!(res_251137 <= colontmp__251136)) break L6;
						F.line = 1778;
						i_204711 = res_251137;
						F.line = 1779;
						if (result_204666 != null) { result_204666 = (result_204666).concat(sep_204665); } else { result_204666 = sep_204665.slice(); };
						F.line = 1780;
						if (result_204666 != null) { result_204666 = (result_204666).concat(a_204664[chckIndx(i_204711, 0, a_204664.length+0-1)-0]); } else { result_204666 = a_204664[chckIndx(i_204711, 0, a_204664.length+0-1)-0].slice(); };
						F.line = 2712;
						res_251137 = addInt(res_251137, 1);
					}
			} while(false);
		} while(false);
		}
		else {
			F.line = 1782;
			result_204666 = nimCopy(null, [], NTI44040);
		}
		
	framePtr = F.prev;

	return result_204666;

}

function to_type_string_250196(self_250198, obj_name_250199, public_field_250200) {
		var Tmp1;
				var Tmp2;
				var Tmp3;
			var Tmp4;
			var Tmp5;

	var result_250201 = null;

	var F={procname:"nimjson.toTypeString",prev:framePtr,filename:"util.nim",line:0};
	framePtr = F;
		F.line = 109;
		if (public_field_250200) {
		Tmp1 = makeNimstrLit("*");
		}
		else {
		Tmp1 = [];
		}
		
		var public_str_250202 = nimCopy(null, Tmp1, NTI44040);
		F.line = 113;
		if (result_250201 != null) { result_250201 = (result_250201).concat(makeNimstrLit("type\x0A")); } else { result_250201 = makeNimstrLit("type\x0A"); };
		F.line = 114;
		F.line = 114;
		var fmt_res_250203 = [mnewString(0)];
		F.line = 114;
		if (fmt_res_250203[0] != null) { fmt_res_250203[0] = (fmt_res_250203[0]).concat(makeNimstrLit("  ")); } else { fmt_res_250203[0] = makeNimstrLit("  "); };
		F.line = 114;
		format_value_247688(fmt_res_250203, 0, makeNimstrLit("NilType"), []);
		F.line = 114;
		format_value_247688(fmt_res_250203, 0, public_str_250202, []);
		F.line = 114;
		if (fmt_res_250203[0] != null) { fmt_res_250203[0] = (fmt_res_250203[0]).concat(makeNimstrLit(" = ref object\x0A")); } else { fmt_res_250203[0] = makeNimstrLit(" = ref object\x0A"); };
		if (result_250201 != null) { result_250201 = (result_250201).concat(fmt_res_250203[0]); } else { result_250201 = fmt_res_250203[0].slice(); };
		F.line = 115;
		switch (self_250198.kind) {
		case 5:
			F.line = 117;
			var ret_250207 = [null];
			F.line = 118;
			obj_format_250002(self_250198, obj_name_250199, ret_250207, 0, 0, public_str_250202);
			F.line = 119;
			if (result_250201 != null) { result_250201 = (result_250201).concat(nsuJoinSep(ret_250207[0], [])); } else { result_250201 = nsuJoinSep(ret_250207[0], []).slice(); };
			break;
		case 6:
			F.line = 121;
			F.line = 121;
			var fmt_res_250210 = [mnewString(0)];
			F.line = 121;
			if (fmt_res_250210[0] != null) { fmt_res_250210[0] = (fmt_res_250210[0]).concat(makeNimstrLit("Seq")); } else { fmt_res_250210[0] = makeNimstrLit("Seq"); };
			F.line = 121;
			format_value_247688(fmt_res_250210, 0, head_upper_250026(obj_name_250199), []);
			var seq_obj_name_250212 = nimCopy(null, fmt_res_250210[0], NTI44040);
				var Tmp2 = self_250198;
				if (ConstSet13[Tmp2.kind]===undefined) { raiseFieldError(makeNimstrLit("\'elems\' is not accessible using discriminant \'kind\' of type \'JsonNodeObj\'")); }
			if ((0 < ((Tmp3 = Tmp2.elems, Tmp3) != null ? Tmp3.length : 0))) {
			F.line = 123;
			var Tmp4 = self_250198;
			if (ConstSet14[Tmp4.kind]===undefined) { raiseFieldError(makeNimstrLit("\'elems\' is not accessible using discriminant \'kind\' of type \'JsonNodeObj\'")); }
			var child_250222 = (Tmp5 = Tmp4.elems, Tmp5)[chckIndx(0, 0, Tmp5.length+0-1)-0];
			F.line = 124;
			switch (child_250222.kind) {
			case 5:
				F.line = 126;
				F.line = 126;
				var fmt_res_250223 = [mnewString(0)];
				F.line = 126;
				if (fmt_res_250223[0] != null) { fmt_res_250223[0] = (fmt_res_250223[0]).concat(makeNimstrLit("  ")); } else { fmt_res_250223[0] = makeNimstrLit("  "); };
				F.line = 126;
				format_value_247688(fmt_res_250223, 0, seq_obj_name_250212, []);
				F.line = 126;
				if (fmt_res_250223[0] != null) { fmt_res_250223[0] = (fmt_res_250223[0]).concat(makeNimstrLit(" = seq[")); } else { fmt_res_250223[0] = makeNimstrLit(" = seq["); };
				F.line = 126;
				format_value_247688(fmt_res_250223, 0, obj_name_250199, []);
				F.line = 126;
				if (fmt_res_250223[0] != null) { fmt_res_250223[0] = (fmt_res_250223[0]).concat(makeNimstrLit("]\x0A")); } else { fmt_res_250223[0] = makeNimstrLit("]\x0A"); };
				if (result_250201 != null) { result_250201 = (result_250201).concat(fmt_res_250223[0]); } else { result_250201 = fmt_res_250223[0].slice(); };
				F.line = 127;
				var ret_250227 = [null];
				F.line = 128;
				obj_format_250002(child_250222, obj_name_250199, ret_250227, 0, 0, public_str_250202);
				F.line = 129;
				if (result_250201 != null) { result_250201 = (result_250201).concat(nsuJoinSep(ret_250227[0], [])); } else { result_250201 = nsuJoinSep(ret_250227[0], []).slice(); };
				break;
			default: 
				F.line = 131;
				var strs_250231 = [null];
				F.line = 132;
				var t_250233 = get_type_250078(obj_name_250199, child_250222, strs_250231, 0, 0, public_str_250202);
				F.line = 133;
				F.line = 133;
				var fmt_res_250234 = [mnewString(0)];
				F.line = 133;
				if (fmt_res_250234[0] != null) { fmt_res_250234[0] = (fmt_res_250234[0]).concat(makeNimstrLit("  ")); } else { fmt_res_250234[0] = makeNimstrLit("  "); };
				F.line = 133;
				format_value_247688(fmt_res_250234, 0, obj_name_250199, []);
				F.line = 133;
				if (fmt_res_250234[0] != null) { fmt_res_250234[0] = (fmt_res_250234[0]).concat(makeNimstrLit(" = seq[")); } else { fmt_res_250234[0] = makeNimstrLit(" = seq["); };
				F.line = 133;
				format_value_247688(fmt_res_250234, 0, t_250233, []);
				F.line = 133;
				if (fmt_res_250234[0] != null) { fmt_res_250234[0] = (fmt_res_250234[0]).concat(makeNimstrLit("]\x0A")); } else { fmt_res_250234[0] = makeNimstrLit("]\x0A"); };
				if (result_250201 != null) { result_250201 = (result_250201).concat(fmt_res_250234[0]); } else { result_250201 = fmt_res_250234[0].slice(); };
				break;
			}
			}
			
			break;
		default: 
			break;
		}
	framePtr = F.prev;

	return result_250201;

}

function get_var_type_241709(x_241711) {
	var result_241712 = 0;

	var F={procname:"json.getVarType",prev:framePtr,filename:"json.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 887;
		result_241712 = 0;
		F.line = 890;
		switch (toJSStr(cstrToNimstr(Object.prototype.toString.call(x_241711)))) {
		case "[object Array]":
			F.line = 891;
			result_241712 = 6;
			break BeforeRet;
			break;
		case "[object Object]":
			F.line = 892;
			result_241712 = 5;
			break BeforeRet;
			break;
		case "[object Number]":
			if ((x_241711 % 1.0000000000000000e+00 == 0.0)) {
			F.line = 895;
			result_241712 = 2;
			break BeforeRet;
			}
			else {
				F.line = 897;
				result_241712 = 3;
				break BeforeRet;
			}
			
			break;
		case "[object Boolean]":
			F.line = 898;
			result_241712 = 1;
			break BeforeRet;
			break;
		case "[object Null]":
			F.line = 899;
			result_241712 = 0;
			break BeforeRet;
			break;
		case "[object String]":
			F.line = 900;
			result_241712 = 4;
			break BeforeRet;
			break;
		default: 
			if (true) {
			F.line = 901;
			failed_assert_impl_59066(makeNimstrLit("/home/travis/.choosenim/toolchains/nim-1.0.2/lib/pure/json.nim(901, 18) `false` "));
			}
			
			break;
		}
	} while (false);
	framePtr = F.prev;

	return result_241712;

}

function new_jarray_222657() {
	var result_222659 = null;

	var F={procname:"json.newJArray",prev:framePtr,filename:"json.nim",line:0};
	framePtr = F;
		F.line = 214;
		result_222659 = {kind: 6, elems: [], str: null, num: 0, fnum: 0.0, bval: false, fields: {data: null, counter: 0, first: 0, last: 0}};
	framePtr = F.prev;

	return result_222659;

}

function len_241829(x_241831) {
	var result_241832 = 0;

	var F={procname:"json.len",prev:framePtr,filename:"json.nim",line:0};
	framePtr = F;
		if (!((get_var_type_241709(x_241831) == 6))) {
		F.line = 904;
		failed_assert_impl_59066(makeNimstrLit("/home/travis/.choosenim/toolchains/nim-1.0.2/lib/pure/json.nim(904, 12) `x.getVarType == JArray` "));
		}
		
		F.line = 905;
		      result_241832 = x_241831.length;
    
	framePtr = F.prev;

	return result_241832;

}

function add_222995(father_222997, child_222998) {
		var Tmp1;
		var Tmp2;

	var F={procname:"json.add",prev:framePtr,filename:"json.nim",line:0};
	framePtr = F;
		if (!((father_222997.kind == 6))) {
		F.line = 284;
		failed_assert_impl_59066(makeNimstrLit("/home/travis/.choosenim/toolchains/nim-1.0.2/lib/pure/json.nim(284, 10) `father.kind == JArray` "));
		}
		
		F.line = 285;
		var Tmp1 = father_222997;
		if (ConstSet15[Tmp1.kind]===undefined) { raiseFieldError(makeNimstrLit("\'elems\' is not accessible using discriminant \'kind\' of type \'JsonNodeObj\'")); }
		if ((Tmp2 = Tmp1.elems, Tmp2) != null) { Tmp2.push(child_222998); } else { Tmp2 = [child_222998]; };
	framePtr = F.prev;

	
}

function HEX5BHEX5D_242214(x_242216, y_242217) {
	var result_242218 = {};

	var F={procname:"json.[]",prev:framePtr,filename:"json.nim",line:0};
	framePtr = F;
		if (!((get_var_type_241709(x_242216) == 6))) {
		F.line = 916;
		failed_assert_impl_59066(makeNimstrLit("/home/travis/.choosenim/toolchains/nim-1.0.2/lib/pure/json.nim(916, 12) `x.getVarType == JArray` "));
		}
		
		F.line = 917;
		      result_242218 = x_242216[y_242217];
    
	framePtr = F.prev;

	return result_242218;

}

function is_power_of_two_101062(x_101064) {
		var Tmp1;

	var result_101065 = false;

	BeforeRet: do {
		if (!(0 < x_101064)) Tmp1 = false; else {			Tmp1 = ((x_101064 & (x_101064 - 1)) == 0);		}		result_101065 = Tmp1;
		break BeforeRet;
	} while (false);

	return result_101065;

}

function init_ordered_table_222209(initial_size_222213) {
	var result_222215 = {data: null, counter: 0, first: 0, last: 0};

	var F={procname:"initOrderedTable.initOrderedTable",prev:framePtr,filename:"tables.nim",line:0};
	framePtr = F;
		if (!(is_power_of_two_101062(initial_size_222213))) {
		F.line = 118;
		failed_assert_impl_59066(makeNimstrLit("/home/travis/.choosenim/toolchains/nim-1.0.2/lib/pure/collections/tableimpl.nim(118, 10) `isPowerOfTwo(initialSize)` "));
		}
		
		F.line = 119;
		result_222215.counter = 0;
		F.line = 120;
		result_222215.data = new Array(chckRange(initial_size_222213, 0, 2147483647)); for (var i=0;i<chckRange(initial_size_222213, 0, 2147483647);++i) {result_222215.data[i]={Field0: 0, Field1: 0, Field2: null, Field3: null};}		F.line = 122;
		result_222215.first = -1;
		F.line = 123;
		result_222215.last = -1;
	framePtr = F.prev;

	return result_222215;

}

function new_jobject_222204() {
	var result_222206 = null;

	var F={procname:"json.newJObject",prev:framePtr,filename:"json.nim",line:0};
	framePtr = F;
		F.line = 210;
		result_222206 = {kind: 5, fields: init_ordered_table_222209(4), str: null, num: 0, fnum: 0.0, bval: false, elems: null};
	framePtr = F.prev;

	return result_222206;

}

function imul_86768(a_86770, b_86771) {
	var result_86772 = 0;

	var F={procname:"hashes.imul",prev:framePtr,filename:"hashes.nim",line:0};
	framePtr = F;
		F.line = 154;
		var mask_86773 = 65535;
		F.line = 156;
		var a_hi_86786 = (((a_86770 >>> 0) >>> 16) & mask_86773);
		F.line = 157;
		var a_lo_86792 = (a_86770 & mask_86773);
		F.line = 158;
		var b_hi_86805 = (((b_86771 >>> 0) >>> 16) & mask_86773);
		F.line = 159;
		var b_lo_86811 = (b_86771 & mask_86773);
		F.line = 160;
		result_86772 = ((((a_lo_86792 * b_lo_86811) >>> 0) + (((((a_hi_86786 * b_lo_86811) >>> 0) + ((a_lo_86792 * b_hi_86805) >>> 0)) >>> 0) << 16)) >>> 0);
	framePtr = F.prev;

	return result_86772;

}

function rotl32_87001(x_87003, r_87004) {
	var result_87005 = 0;

	var F={procname:"hashes.rotl32",prev:framePtr,filename:"hashes.nim",line:0};
	framePtr = F;
		F.line = 165;
		result_87005 = ((x_87003 << r_87004) | ((x_87003 >>> 0) >>> subInt(32, r_87004)));
	framePtr = F.prev;

	return result_87005;

}

function murmur_hash_87037(x_87040) {
	var result_87041 = 0;

	var F={procname:"hashes.murmurHash",prev:framePtr,filename:"hashes.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 176;
		var size_87051 = (x_87040 != null ? x_87040.length : 0);
		F.line = 177;
		var step_size_87053 = 4;
		F.line = 178;
		var n_87054 = divInt(size_87051, step_size_87053);
		F.line = 180;
		var h1_87055 = 0;
		F.line = 181;
		var i_87057 = 0;
		L1: do {
			F.line = 184;
				L2: while (true) {
				if (!(i_87057 < mulInt(n_87054, step_size_87053))) break L2;
					F.line = 185;
					var k1_87058 = 0;
					F.line = 187;
					var j_87059 = step_size_87053;
					L3: do {
						F.line = 188;
							L4: while (true) {
							if (!(0 < j_87059)) break L4;
								F.line = 189;
								j_87059 = subInt(j_87059, 1);
								F.line = 190;
								k1_87058 = ((k1_87058 << 8) | chckRange(x_87040[chckIndx(addInt(i_87057, j_87059), 0, x_87040.length+0-1)-0], 0, 4294967295));
							}
					} while(false);
					F.line = 193;
					i_87057 = addInt(i_87057, step_size_87053);
					F.line = 195;
					k1_87058 = imul_86768(k1_87058, 3432918353);
					F.line = 196;
					k1_87058 = rotl32_87001(k1_87058, 15);
					F.line = 197;
					k1_87058 = imul_86768(k1_87058, 461845907);
					F.line = 199;
					h1_87055 = (h1_87055 ^ k1_87058);
					F.line = 200;
					h1_87055 = rotl32_87001(h1_87055, 13);
					F.line = 201;
					h1_87055 = ((((h1_87055 * 5) >>> 0) + 3864292196) >>> 0);
				}
		} while(false);
		F.line = 204;
		var k1_87223 = 0;
		F.line = 205;
		var rem_87224 = modInt(size_87051, step_size_87053);
		L5: do {
			F.line = 206;
				L6: while (true) {
				if (!(0 < rem_87224)) break L6;
					F.line = 207;
					rem_87224 = subInt(rem_87224, 1);
					F.line = 208;
					k1_87223 = ((k1_87223 << 8) | chckRange(x_87040[chckIndx(addInt(i_87057, rem_87224), 0, x_87040.length+0-1)-0], 0, 4294967295));
				}
		} while(false);
		F.line = 209;
		k1_87223 = imul_86768(k1_87223, 3432918353);
		F.line = 210;
		k1_87223 = rotl32_87001(k1_87223, 15);
		F.line = 211;
		k1_87223 = imul_86768(k1_87223, 461845907);
		F.line = 212;
		h1_87055 = (h1_87055 ^ k1_87223);
		F.line = 215;
		h1_87055 = (h1_87055 ^ chckRange(size_87051, 0, 4294967295));
		F.line = 216;
		h1_87055 = (h1_87055 ^ ((h1_87055 >>> 0) >>> 16));
		F.line = 217;
		h1_87055 = imul_86768(h1_87055, 2246822507);
		F.line = 218;
		h1_87055 = (h1_87055 ^ ((h1_87055 >>> 0) >>> 13));
		F.line = 219;
		h1_87055 = imul_86768(h1_87055, 3266489909);
		F.line = 220;
		h1_87055 = (h1_87055 ^ ((h1_87055 >>> 0) >>> 16));
		F.line = 221;
		result_87041 = (h1_87055|0);
		break BeforeRet;
	} while (false);
	framePtr = F.prev;

	return result_87041;

}

function hash_87814(x_87816) {
	var result_87817 = 0;

	var F={procname:"hashes.hash",prev:framePtr,filename:"hashes.nim",line:0};
	framePtr = F;
		F.line = 250;
		result_87817 = murmur_hash_87037((x_87816.slice(0, (x_87816 != null ? (x_87816.length-1) : -1)+1)));
	framePtr = F.prev;

	return result_87817;

}

function next_try_108035(h_108037, max_hash_108038) {
	var result_108039 = 0;

	var F={procname:"tables.nextTry",prev:framePtr,filename:"hashcommon.nim",line:0};
	framePtr = F;
		F.line = 30;
		result_108039 = (addInt(h_108037, 1) & max_hash_108038);
	framePtr = F.prev;

	return result_108039;

}

function raw_get_224021(t_224026, key_224027, hc_224028, hc_224028_Idx) {
						var Tmp3;

	var result_224029 = 0;

	var F={procname:"rawGet.rawGet",prev:framePtr,filename:"tables.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 54;
		hc_224028[hc_224028_Idx] = hash_87814(key_224027);
		if ((hc_224028[hc_224028_Idx] == 0)) {
		F.line = 56;
		hc_224028[hc_224028_Idx] = 314159265;
		}
		
		if (((t_224026.data != null ? t_224026.data.length : 0) == 0)) {
		F.line = 38;
		result_224029 = -1;
		break BeforeRet;
		}
		
		F.line = 39;
		var h_224171 = (hc_224028[hc_224028_Idx] & (t_224026.data != null ? (t_224026.data.length-1) : -1));
		L1: do {
			F.line = 40;
				L2: while (true) {
				if (!is_filled_108018(t_224026.data[chckIndx(h_224171, 0, t_224026.data.length+0-1)-0].Field0)) break L2;
						if (!(t_224026.data[chckIndx(h_224171, 0, t_224026.data.length+0-1)-0].Field0 == hc_224028[hc_224028_Idx])) Tmp3 = false; else {							Tmp3 = eqStrings(t_224026.data[chckIndx(h_224171, 0, t_224026.data.length+0-1)-0].Field2, key_224027);						}					if (Tmp3) {
					F.line = 46;
					result_224029 = h_224171;
					break BeforeRet;
					}
					
					F.line = 47;
					h_224171 = next_try_108035(h_224171, (t_224026.data != null ? (t_224026.data.length-1) : -1));
				}
		} while(false);
		F.line = 48;
		result_224029 = subInt(-1, h_224171);
	} while (false);
	framePtr = F.prev;

	return result_224029;

}

function must_rehash_108053(length_108055, counter_108056) {
	var result_108057 = false;

	var F={procname:"tables.mustRehash",prev:framePtr,filename:"hashcommon.nim",line:0};
	framePtr = F;
		if (!((counter_108056 < length_108055))) {
		F.line = 33;
		failed_assert_impl_59066(makeNimstrLit("/home/travis/.choosenim/toolchains/nim-1.0.2/lib/pure/collections/hashcommon.nim(33, 9) `length > counter` "));
		}
		
		F.line = 34;
		result_108057 = ((mulInt(length_108055, 2) < mulInt(counter_108056, 3)) || (subInt(length_108055, counter_108056) < 4));
	framePtr = F.prev;

	return result_108057;

}

function raw_insert_226465(t_226471, data_226474, data_226474_Idx, key_226475, val_226476, hc_226477, h_226478) {
	var F={procname:"rawInsert.rawInsert",prev:framePtr,filename:"tables.nim",line:0};
	framePtr = F;
		F.line = 22;
		data_226474[data_226474_Idx][chckIndx(h_226478, 0, data_226474[data_226474_Idx].length+0-1)-0].Field2 = nimCopy(null, key_226475, NTI44040);
		F.line = 23;
		data_226474[data_226474_Idx][chckIndx(h_226478, 0, data_226474[data_226474_Idx].length+0-1)-0].Field3 = val_226476;
		F.line = 24;
		data_226474[data_226474_Idx][chckIndx(h_226478, 0, data_226474[data_226474_Idx].length+0-1)-0].Field0 = hc_226477;
		F.line = 1233;
		data_226474[data_226474_Idx][chckIndx(h_226478, 0, data_226474[data_226474_Idx].length+0-1)-0].Field1 = -1;
		if ((t_226471.first < 0)) {
		F.line = 1234;
		t_226471.first = h_226478;
		}
		
		if ((0 <= t_226471.last)) {
		F.line = 1235;
		data_226474[data_226474_Idx][chckIndx(t_226471.last, 0, data_226474[data_226474_Idx].length+0-1)-0].Field1 = h_226478;
		}
		
		F.line = 1236;
		t_226471.last = h_226478;
	framePtr = F.prev;

	
}

function enlarge_225367(t_225373) {
	var F={procname:"enlarge.enlarge",prev:framePtr,filename:"tables.nim",line:0};
	framePtr = F;
		F.line = 1239;
		var n_225381 = null;
		F.line = 1240;
		n_225381 = new Array(chckRange(mulInt((t_225373.data != null ? t_225373.data.length : 0), 2), 0, 2147483647)); for (var i=0;i<chckRange(mulInt((t_225373.data != null ? t_225373.data.length : 0), 2), 0, 2147483647);++i) {n_225381[i]={Field0: 0, Field1: 0, Field2: null, Field3: null};}		F.line = 1241;
		var h_225520 = t_225373.first;
		F.line = 1242;
		t_225373.first = -1;
		F.line = 1243;
		t_225373.last = -1;
		F.line = 1244;
		var Tmp1 = t_225373.data; t_225373.data = n_225381; n_225381 = Tmp1;		L2: do {
			F.line = 1245;
				L3: while (true) {
				if (!(0 <= h_225520)) break L3;
					F.line = 1246;
					var nxt_225679 = n_225381[chckIndx(h_225520, 0, n_225381.length+0-1)-0].Field1;
					F.line = 1247;
					var eh_225828 = n_225381[chckIndx(h_225520, 0, n_225381.length+0-1)-0].Field0;
					if (is_filled_108018(eh_225828)) {
					F.line = 1249;
					var j_225835 = (eh_225828 & (t_225373.data != null ? (t_225373.data.length-1) : -1));
					L4: do {
						F.line = 1250;
							L5: while (true) {
							if (!is_filled_108018(t_225373.data[chckIndx(j_225835, 0, t_225373.data.length+0-1)-0].Field0)) break L5;
								F.line = 1251;
								j_225835 = next_try_108035(j_225835, (t_225373.data != null ? (t_225373.data.length-1) : -1));
							}
					} while(false);
					F.line = 1252;
					raw_insert_226465(t_225373, t_225373, "data", n_225381[chckIndx(h_225520, 0, n_225381.length+0-1)-0].Field2, n_225381[chckIndx(h_225520, 0, n_225381.length+0-1)-0].Field3, n_225381[chckIndx(h_225520, 0, n_225381.length+0-1)-0].Field0, j_225835);
					}
					
					F.line = 1253;
					h_225520 = nxt_225679;
				}
		} while(false);
	framePtr = F.prev;

	
}

function raw_get_known_hc_227267(t_227272, key_227273, hc_227274) {
	var result_227275 = 0;

	var F={procname:"rawGetKnownHC.rawGetKnownHC",prev:framePtr,filename:"tables.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		if (((t_227272.data != null ? t_227272.data.length : 0) == 0)) {
		F.line = 38;
		result_227275 = -1;
		break BeforeRet;
		}
		
		F.line = 39;
		var h_227414 = (hc_227274 & (t_227272.data != null ? (t_227272.data.length-1) : -1));
		L1: do {
			F.line = 40;
				L2: while (true) {
				if (!is_filled_108018(t_227272.data[chckIndx(h_227414, 0, t_227272.data.length+0-1)-0].Field0)) break L2;
					if (((t_227272.data[chckIndx(h_227414, 0, t_227272.data.length+0-1)-0].Field0 == hc_227274) && eqStrings(t_227272.data[chckIndx(h_227414, 0, t_227272.data.length+0-1)-0].Field2, key_227273))) {
					F.line = 46;
					result_227275 = h_227414;
					break BeforeRet;
					}
					
					F.line = 47;
					h_227414 = next_try_108035(h_227414, (t_227272.data != null ? (t_227272.data.length-1) : -1));
				}
		} while(false);
		F.line = 48;
		result_227275 = subInt(-1, h_227414);
	} while (false);
	framePtr = F.prev;

	return result_227275;

}

function HEX5BHEX5DHEX3D_223511(t_223517, key_223518, val_223519) {
	var F={procname:"[]=.[]=",prev:framePtr,filename:"tables.nim",line:0};
	framePtr = F;
		if (((t_223517.data != null ? t_223517.data.length : 0) == 0)) {
		if (!(is_power_of_two_101062(64))) {
		F.line = 118;
		failed_assert_impl_59066(makeNimstrLit("/home/travis/.choosenim/toolchains/nim-1.0.2/lib/pure/collections/tableimpl.nim(118, 10) `isPowerOfTwo(defaultInitialSize)` "));
		}
		
		F.line = 119;
		t_223517.counter = 0;
		F.line = 120;
		t_223517.data = new Array(64); for (var i=0;i<64;++i) {t_223517.data[i]={Field0: 0, Field1: 0, Field2: null, Field3: null};}		F.line = 122;
		t_223517.first = -1;
		F.line = 123;
		t_223517.last = -1;
		}
		
		F.line = 57;
		var hc_224001 = [0];
		F.line = 58;
		var index_224639 = raw_get_224021(t_223517, key_223518, hc_224001, 0);
		if ((0 <= index_224639)) {
		F.line = 59;
		t_223517.data[chckIndx(index_224639, 0, t_223517.data.length+0-1)-0].Field3 = val_223519;
		}
		else {
			if (((t_223517.data != null ? t_223517.data.length : 0) == 0)) {
			if (!(is_power_of_two_101062(64))) {
			F.line = 118;
			failed_assert_impl_59066(makeNimstrLit("/home/travis/.choosenim/toolchains/nim-1.0.2/lib/pure/collections/tableimpl.nim(118, 10) `isPowerOfTwo(defaultInitialSize)` "));
			}
			
			F.line = 119;
			t_223517.counter = 0;
			F.line = 120;
			t_223517.data = new Array(64); for (var i=0;i<64;++i) {t_223517.data[i]={Field0: 0, Field1: 0, Field2: null, Field3: null};}			F.line = 122;
			t_223517.first = -1;
			F.line = 123;
			t_223517.last = -1;
			}
			
			if (must_rehash_108053((t_223517.data != null ? t_223517.data.length : 0), t_223517.counter)) {
			F.line = 49;
			enlarge_225367(t_223517);
			F.line = 50;
			index_224639 = raw_get_known_hc_227267(t_223517, key_223518, hc_224001[0]);
			}
			
			F.line = 51;
			index_224639 = subInt(-1, index_224639);
			F.line = 52;
			raw_insert_226465(t_223517, t_223517, "data", key_223518, val_223519, hc_224001[0], index_224639);
			F.line = 60;
			t_223517.counter = addInt(t_223517.counter, 1);
		}
		
	framePtr = F.prev;

	
}

function HEX5BHEX5DHEX3D_228414(obj_228416, key_228417, val_228418) {
		var Tmp1;

	var F={procname:"json.[]=",prev:framePtr,filename:"json.nim",line:0};
	framePtr = F;
		if (!((obj_228416.kind == 5))) {
		F.line = 358;
		failed_assert_impl_59066(makeNimstrLit("/home/travis/.choosenim/toolchains/nim-1.0.2/lib/pure/json.nim(358, 9) `obj.kind == JObject` "));
		}
		
		F.line = 359;
		var Tmp1 = obj_228416;
		if (ConstSet16[Tmp1.kind]===undefined) { raiseFieldError(makeNimstrLit("\'fields\' is not accessible using discriminant \'kind\' of type \'JsonNodeObj\'")); }
		HEX5BHEX5DHEX3D_223511(Tmp1.fields, key_228417, val_228418);
	framePtr = F.prev;

	
}

function new_jint_222137(n_222139) {
	var result_222140 = null;

	var F={procname:"json.newJInt",prev:framePtr,filename:"json.nim",line:0};
	framePtr = F;
		F.line = 194;
		result_222140 = {kind: 2, num: n_222139, str: null, fnum: 0.0, bval: false, fields: {data: null, counter: 0, first: 0, last: 0}, elems: null};
	framePtr = F.prev;

	return result_222140;

}

function new_jfloat_222154(n_222156) {
	var result_222157 = null;

	var F={procname:"json.newJFloat",prev:framePtr,filename:"json.nim",line:0};
	framePtr = F;
		F.line = 198;
		result_222157 = {kind: 3, fnum: n_222156, str: null, num: 0, bval: false, fields: {data: null, counter: 0, first: 0, last: 0}, elems: null};
	framePtr = F.prev;

	return result_222157;

}

function new_jstring_222087(s_222089) {
	var result_222090 = null;

	var F={procname:"json.newJString",prev:framePtr,filename:"json.nim",line:0};
	framePtr = F;
		F.line = 186;
		result_222090 = {kind: 4, str: nimCopy(null, s_222089, NTI44040), num: 0, fnum: 0.0, bval: false, fields: {data: null, counter: 0, first: 0, last: 0}, elems: null};
	framePtr = F.prev;

	return result_222090;

}

function new_jbool_222171(b_222173) {
	var result_222174 = null;

	var F={procname:"json.newJBool",prev:framePtr,filename:"json.nim",line:0};
	framePtr = F;
		F.line = 202;
		result_222174 = {kind: 1, bval: b_222173, str: null, num: 0, fnum: 0.0, fields: {data: null, counter: 0, first: 0, last: 0}, elems: null};
	framePtr = F.prev;

	return result_222174;

}

function new_jnull_222188() {
	var result_222190 = null;

	var F={procname:"json.newJNull",prev:framePtr,filename:"json.nim",line:0};
	framePtr = F;
		F.line = 206;
		result_222190 = {kind: 0, str: null, num: 0, fnum: 0.0, bval: false, fields: {data: null, counter: 0, first: 0, last: 0}, elems: null};
	framePtr = F.prev;

	return result_222190;

}

function convert_object_242414(x_242416) {
	var result_242417 = null;

	var F={procname:"json.convertObject",prev:framePtr,filename:"json.nim",line:0};
	framePtr = F;
		F.line = 922;
		switch (get_var_type_241709(x_242416)) {
		case 6:
			F.line = 924;
			result_242417 = new_jarray_222657();
			L1: do {
				F.line = 925;
				var i_242425 = 0;
				F.line = 2736;
				var colontmp__251143 = 0;
				F.line = 925;
				colontmp__251143 = len_241829(x_242416);
				F.line = 2738;
				var i_251144 = 0;
				L2: do {
					F.line = 2739;
						L3: while (true) {
						if (!(i_251144 < colontmp__251143)) break L3;
							F.line = 925;
							i_242425 = i_251144;
							F.line = 926;
							add_222995(result_242417, convert_object_242414(HEX5BHEX5D_242214(x_242416, i_242425)));
							F.line = 2741;
							i_251144 = addInt(i_251144, 1);
						}
				} while(false);
			} while(false);
			break;
		case 5:
			F.line = 928;
			result_242417 = new_jobject_222204();
			F.line = 929;
			for (var property in x_242416) {
        if (x_242416.hasOwnProperty(property)) {
      
			F.line = 932;
			var nim_property_242427 = null;
			F.line = 933;
			var nim_value_242428 = {};
			F.line = 934;
			nim_property_242427 = property; nim_value_242428 = x_242416[property];
			F.line = 935;
			HEX5BHEX5DHEX3D_228414(result_242417, cstrToNimstr(nim_property_242427), convert_object_242414(nim_value_242428));
			F.line = 936;
			}}
			break;
		case 2:
			F.line = 938;
			result_242417 = new_jint_222137(x_242416);
			break;
		case 3:
			F.line = 940;
			result_242417 = new_jfloat_222154(x_242416);
			break;
		case 4:
			F.line = 942;
			result_242417 = new_jstring_222087(cstrToNimstr(x_242416));
			break;
		case 1:
			F.line = 944;
			result_242417 = new_jbool_222171(x_242416);
			break;
		case 0:
			F.line = 946;
			result_242417 = new_jnull_222188();
			break;
		}
	framePtr = F.prev;

	return result_242417;

}

function parse_json_242457(buffer_242459) {
	var result_242460 = null;

	var F={procname:"json.parseJson",prev:framePtr,filename:"json.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 949;
		result_242460 = convert_object_242414(JSON.parse(toJSStr(buffer_242459)));
		break BeforeRet;
	} while (false);
	framePtr = F.prev;

	return result_242460;

}

function generateNimDefinitions(str_251029, public_field_251030) {
	var result_251031 = null;

	var F={procname:"nimjson_js.generateNimDefinitions",prev:framePtr,filename:"nimjson_js.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 5;
		result_251031 = toJSStr(to_type_string_250196(parse_json_242457(cstrToNimstr(str_251029)), makeNimstrLit("Object"), public_field_251030));
		break BeforeRet;
	} while (false);
	framePtr = F.prev;

	return result_251031;

}
