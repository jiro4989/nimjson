/* Generated by the Nim Compiler v0.20.0 */
/*   (c) 2019 Andreas Rumpf */

var framePtr = null;
var excHandler = 0;
var lastJSError = null;
if (typeof Int8Array === 'undefined') Int8Array = Array;
if (typeof Int16Array === 'undefined') Int16Array = Array;
if (typeof Int32Array === 'undefined') Int32Array = Array;
if (typeof Uint8Array === 'undefined') Uint8Array = Array;
if (typeof Uint16Array === 'undefined') Uint16Array = Array;
if (typeof Uint32Array === 'undefined') Uint32Array = Array;
if (typeof Float32Array === 'undefined') Float32Array = Array;
if (typeof Float64Array === 'undefined') Float64Array = Array;
var NTI89650 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI264245 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI86032 = {size: 0,kind: 1,base: null,node: null,finalizer: null};
var NTI86026 = {size: 0,kind: 36,base: null,node: null,finalizer: null};
var NTI95487 = {size: 0,kind: 35,base: null,node: null,finalizer: null};
var NTI264202 = {size: 0, kind: 14, base: null, node: null, finalizer: null};
var NTI264206 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI264204 = {size: 0,kind: 22,base: null,node: null,finalizer: null};
var NTI244015 = {size: 0,kind: 31,base: null,node: null,finalizer: null};
var NTI264234 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI264231 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI264228 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI89660 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI183832 = {size: 0,kind: 31,base: null,node: null,finalizer: null};
var NTI186647 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI89662 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI89630 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI89652 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI89644 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI89658 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI86006 = {size: 0,kind: 31,base: null,node: null,finalizer: null};
var NTI106156 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI89608 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI89714 = {size: 0,kind: 22,base: null,node: null,finalizer: null};
var NTI86016 = {size: 0,kind: 40,base: null,node: null,finalizer: null};
var NTI86042 = {size: 0,kind: 29,base: null,node: null,finalizer: null};
var NTI89708 = {size: 0,kind: 22,base: null,node: null,finalizer: null};
var NTI89626 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI89628 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI89642 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI89646 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI86040 = {size: 0,kind: 28,base: null,node: null,finalizer: null};
var NNI89646 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI89646.node = NNI89646;
var NNI89642 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI89642.node = NNI89642;
var NNI89628 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI89628.node = NNI89628;
NTI89708.base = NTI89626;
NTI89714.base = NTI89626;
var NNI89626 = {kind: 2, len: 6, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "parent", len: 0, typ: NTI89708, name: "parent", sons: null}, 
{kind: 1, offset: "name", len: 0, typ: NTI86042, name: "name", sons: null}, 
{kind: 1, offset: "message", len: 0, typ: NTI86040, name: "msg", sons: null}, 
{kind: 1, offset: "trace", len: 0, typ: NTI86040, name: "trace", sons: null}, 
{kind: 1, offset: "raiseId", len: 0, typ: NTI86016, name: "raiseId", sons: null}, 
{kind: 1, offset: "up", len: 0, typ: NTI89714, name: "up", sons: null}]};
NTI89626.node = NNI89626;
var NNI89608 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI89608.node = NNI89608;
NTI89626.base = NTI89608;
NTI89628.base = NTI89626;
NTI89642.base = NTI89628;
NTI89646.base = NTI89642;
var NNI106156 = {kind: 2, len: 2, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "Field0", len: 0, typ: NTI86042, name: "Field0", sons: null}, 
{kind: 1, offset: "Field1", len: 0, typ: NTI86006, name: "Field1", sons: null}]};
NTI106156.node = NNI106156;
var NNI89658 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI89658.node = NNI89658;
NTI89658.base = NTI89628;
var NNI89644 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI89644.node = NNI89644;
NTI89644.base = NTI89642;
var NNI89652 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI89652.node = NNI89652;
var NNI89630 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI89630.node = NNI89630;
NTI89630.base = NTI89626;
NTI89652.base = NTI89630;
var NNI89662 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI89662.node = NNI89662;
NTI89662.base = NTI89628;
var NNI186647 = {kind: 2, len: 2, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "a", len: 0, typ: NTI183832, name: "a", sons: null}, 
{kind: 1, offset: "b", len: 0, typ: NTI86006, name: "b", sons: null}]};
NTI186647.node = NNI186647;
var NNI89660 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI89660.node = NNI89660;
NTI89660.base = NTI89628;
var NNI264202 = {kind: 2, offset: 0, typ: null, name: null, len: 7, sons: {"0": {kind: 1, offset: 0, typ: NTI264202, name: "JNull", len: 0, sons: null}, 
"1": {kind: 1, offset: 1, typ: NTI264202, name: "JBool", len: 0, sons: null}, 
"2": {kind: 1, offset: 2, typ: NTI264202, name: "JInt", len: 0, sons: null}, 
"3": {kind: 1, offset: 3, typ: NTI264202, name: "JFloat", len: 0, sons: null}, 
"4": {kind: 1, offset: 4, typ: NTI264202, name: "JString", len: 0, sons: null}, 
"5": {kind: 1, offset: 5, typ: NTI264202, name: "JObject", len: 0, sons: null}, 
"6": {kind: 1, offset: 6, typ: NTI264202, name: "JArray", len: 0, sons: null}}};
NTI264202.node = NNI264202;
NTI264245.base = NTI264204;
var NNI264206 = {kind: 3, offset: "kind", len: 7, typ: NTI264202, name: "kind", sons: [[setConstr(4), {kind: 1, offset: "str", len: 0, typ: NTI86040, name: "str", sons: null}], 
[setConstr(2), {kind: 1, offset: "num", len: 0, typ: NTI95487, name: "num", sons: null}], 
[setConstr(3), {kind: 1, offset: "fnum", len: 0, typ: NTI86026, name: "fnum", sons: null}], 
[setConstr(1), {kind: 1, offset: "bval", len: 0, typ: NTI86032, name: "bval", sons: null}], 
[setConstr(0), {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []}], 
[setConstr(5), {kind: 1, offset: "fields", len: 0, typ: NTI264228, name: "fields", sons: null}], 
[setConstr(6), {kind: 1, offset: "elems", len: 0, typ: NTI264245, name: "elems", sons: null}]]};
NTI264206.node = NNI264206;
NTI264204.base = NTI264206;
var NNI264234 = {kind: 2, len: 4, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "Field0", len: 0, typ: NTI244015, name: "Field0", sons: null}, 
{kind: 1, offset: "Field1", len: 0, typ: NTI86006, name: "Field1", sons: null}, 
{kind: 1, offset: "Field2", len: 0, typ: NTI86040, name: "Field2", sons: null}, 
{kind: 1, offset: "Field3", len: 0, typ: NTI264204, name: "Field3", sons: null}]};
NTI264234.node = NNI264234;
NTI264231.base = NTI264234;
var NNI264228 = {kind: 2, len: 4, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "data", len: 0, typ: NTI264231, name: "data", sons: null}, 
{kind: 1, offset: "counter", len: 0, typ: NTI86006, name: "counter", sons: null}, 
{kind: 1, offset: "first", len: 0, typ: NTI86006, name: "first", sons: null}, 
{kind: 1, offset: "last", len: 0, typ: NTI86006, name: "last", sons: null}]};
NTI264228.node = NNI264228;
var NNI89650 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI89650.node = NNI89650;
NTI89650.base = NTI89628;

function makeNimstrLit(c_108258) {
		  var ln = c_108258.length;
  var result = new Array(ln);
  for (var i = 0; i < ln; ++i) {
    result[i] = c_108258.charCodeAt(i);
  }
  return result;
  

	
}

function setConstr() {
		    var result = {};
    for (var i = 0; i < arguments.length; ++i) {
      var x = arguments[i];
      if (typeof(x) == "object") {
        for (var j = x[0]; j <= x[1]; ++j) {
          result[j] = true;
        }
      } else {
        result[x] = true;
      }
    }
    return result;
  

	
}
var ConstSet1 = setConstr(17, 16, 4, 18, 27, 19, 23, 22, 21);

function nimCopy(dest_109227, src_109228, ti_109229) {
	var result_109419 = null;

		switch (ti_109229.kind) {
		case 21:
		case 22:
		case 23:
		case 5:
			if (!(is_fat_pointer_109201(ti_109229))) {
			result_109419 = src_109228;
			}
			else {
				result_109419 = [src_109228[0], src_109228[1]];
			}
			
			break;
		case 19:
			      if (dest_109227 === null || dest_109227 === undefined) {
        dest_109227 = {};
      }
      else {
        for (var key in dest_109227) { delete dest_109227[key]; }
      }
      for (var key in src_109228) { dest_109227[key] = src_109228[key]; }
      result_109419 = dest_109227;
    
			break;
		case 18:
		case 17:
			if (!((ti_109229.base == null))) {
			result_109419 = nimCopy(dest_109227, src_109228, ti_109229.base);
			}
			else {
			if ((ti_109229.kind == 17)) {
			result_109419 = (dest_109227 === null || dest_109227 === undefined) ? {m_type: ti_109229} : dest_109227;
			}
			else {
				result_109419 = (dest_109227 === null || dest_109227 === undefined) ? {} : dest_109227;
			}
			}
			nimCopyAux(result_109419, src_109228, ti_109229.node);
			break;
		case 24:
		case 4:
		case 27:
		case 16:
			      if (src_109228 === null) {
        result_109419 = null;
      }
      else {
        if (dest_109227 === null || dest_109227 === undefined) {
          dest_109227 = new Array(src_109228.length);
        }
        else {
          dest_109227.length = src_109228.length;
        }
        result_109419 = dest_109227;
        for (var i = 0; i < src_109228.length; ++i) {
          result_109419[i] = nimCopy(result_109419[i], src_109228[i], ti_109229.base);
        }
      }
    
			break;
		case 28:
			      if (src_109228 !== null) {
        result_109419 = src_109228.slice(0);
      }
    
			break;
		default: 
			result_109419 = src_109228;
			break;
		}

	return result_109419;

}

function mnewString(len_108309) {
		    return new Array(len_108309);
  

	
}

function arrayConstr(len_109486, value_109487, typ_109488) {
		    var result = new Array(len_109486);
    for (var i = 0; i < len_109486; ++i) result[i] = nimCopy(null, value_109487, typ_109488);
    return result;
  

	
}

function cstrToNimstr(c_108275) {
		  var ln = c_108275.length;
  var result = new Array(ln);
  var r = 0;
  for (var i = 0; i < ln; ++i) {
    var ch = c_108275.charCodeAt(i);

    if (ch < 128) {
      result[r] = ch;
    }
    else {
      if (ch < 2048) {
        result[r] = (ch >> 6) | 192;
      }
      else {
        if (ch < 55296 || ch >= 57344) {
          result[r] = (ch >> 12) | 224;
        }
        else {
            ++i;
            ch = 65536 + (((ch & 1023) << 10) | (c_108275.charCodeAt(i) & 1023));
            result[r] = (ch >> 18) | 240;
            ++r;
            result[r] = ((ch >> 12) & 63) | 128;
        }
        ++r;
        result[r] = ((ch >> 6) & 63) | 128;
      }
      ++r;
      result[r] = (ch & 63) | 128;
    }
    ++r;
  }
  return result;
  

	
}

function toJSStr(s_108292) {
		  if (s_108292 === null) return "";
  var len = s_108292.length;
  var asciiPart = new Array(len);
  var fcc = String.fromCharCode;
  var nonAsciiPart = null;
  var nonAsciiOffset = 0;
  for (var i = 0; i < len; ++i) {
    if (nonAsciiPart !== null) {
      var offset = (i - nonAsciiOffset) * 2;
      var code = s_108292[i].toString(16);
      if (code.length == 1) {
        code = "0"+code;
      }
      nonAsciiPart[offset] = "%";
      nonAsciiPart[offset + 1] = code;
    }
    else if (s_108292[i] < 128)
      asciiPart[i] = fcc(s_108292[i]);
    else {
      asciiPart.length = i;
      nonAsciiOffset = i;
      nonAsciiPart = new Array((len - i) * 2);
      --i;
    }
  }
  asciiPart = asciiPart.join("");
  return (nonAsciiPart === null) ?
      asciiPart : asciiPart + decodeURIComponent(nonAsciiPart.join(""));
  

	
}

function raiseException(e_106618, ename_106619) {
		e_106618.name = ename_106619;
		if ((excHandler == 0)) {
		unhandledException(e_106618);
		}
		
		e_106618.trace = nimCopy(null, raw_write_stack_trace_106468(), NTI86040);
		throw e_106618;

	
}

function addInt(a_108603, b_108604) {
		    var result = a_108603 + b_108604;
    if (result > 2147483647 || result < -2147483648) raiseOverflow();
    return result;
  

	
}
var ConstSet2 = setConstr(60, 62, 94);

function chckIndx(i_109505, a_109506, b_109507) {
			var Tmp1;

	var result_109508 = 0;

	BeforeRet: do {
			if (!(a_109506 <= i_109505)) Tmp1 = false; else {				Tmp1 = (i_109505 <= b_109507);			}		if (Tmp1) {
		result_109508 = i_109505;
		break BeforeRet;
		}
		else {
		raiseIndexError(i_109505, a_109506, b_109507);
		}
		
	} while (false);

	return result_109508;

}
var ConstSet3 = setConstr(60, 62, 94);
var ConstSet4 = setConstr(45, 43, 32);
var ConstSet5 = setConstr([48, 57]);
var ConstSet6 = setConstr([48, 57]);
var ConstSet7 = setConstr([48, 57]);

function subInt(a_108621, b_108622) {
		    var result = a_108621 - b_108622;
    if (result > 2147483647 || result < -2147483648) raiseOverflow();
    return result;
  

	
}

function divInt(a_108657, b_108658) {
		    if (b_108658 == 0) raiseDivByZero();
    if (b_108658 == -1 && a_108657 == 2147483647) raiseOverflow();
    return Math.trunc(a_108657 / b_108658);
  

	
}

function mulInt(a_108639, b_108640) {
		    var result = a_108639 * b_108640;
    if (result > 2147483647 || result < -2147483648) raiseOverflow();
    return result;
  

	
}
var ConstSet8 = setConstr([65, 90], [97, 122]);

function chckRange(i_109524, a_109525, b_109526) {
			var Tmp1;

	var result_109527 = 0;

	BeforeRet: do {
			if (!(a_109525 <= i_109524)) Tmp1 = false; else {				Tmp1 = (i_109524 <= b_109526);			}		if (Tmp1) {
		result_109527 = i_109524;
		break BeforeRet;
		}
		else {
		raiseRangeError();
		}
		
	} while (false);

	return result_109527;

}
var ConstSet9 = setConstr([97, 122]);
var ConstSet10 = setConstr(5);

function raiseFieldError(f_108043) {
		var e_108046 = null;
		e_108046 = {m_type: NTI89660, parent: null, name: null, message: null, trace: null, raiseId: 0, up: null};
		e_108046.message = nimCopy(null, (f_108043 || []).concat(makeNimstrLit(" is not accessible") || []), NTI86040);
		e_108046.parent = null;
		raiseException(e_108046, "FieldError");

	
}
var ConstSet11 = setConstr(6);
var ConstSet12 = setConstr(6);
var ConstSet13 = setConstr(6);
var ConstSet14 = setConstr(6);
var ConstSet15 = setConstr(6);

function eqStrings(a_108487, b_108488) {
		    if (a_108487 == b_108488) return true;
    if (a_108487 === null && b_108488.length == 0) return true;
    if (b_108488 === null && a_108487.length == 0) return true;
    if ((!a_108487) || (!b_108488)) return false;
    var alen = a_108487.length;
    if (alen != b_108488.length) return false;
    for (var i = 0; i < alen; ++i)
      if (a_108487[i] != b_108488[i]) return false;
    return true;
  

	
}
var ConstSet16 = setConstr(5);
var nim_program_result = 0;
var global_raise_hook_103618 = [null];
var local_raise_hook_103623 = [null];
var out_of_mem_hook_103626 = [null];
  if (!Math.trunc) {
    Math.trunc = function(v) {
      v = +v;
      if (!isFinite(v)) return v;

      return (v - v % 1)   ||   (v < 0 ? -0 : v === 0 ? v : 0);
    };
  }
var object_id_244237 = [0];

function is_fat_pointer_109201(ti_109203) {
	var result_109204 = false;

	BeforeRet: do {
		result_109204 = !((ConstSet1[ti_109203.base.kind] != undefined));
		break BeforeRet;
	} while (false);

	return result_109204;

}

function nimCopyAux(dest_109232, src_109233, n_109235) {
		switch (n_109235.kind) {
		case 0:
			break;
		case 1:
			      dest_109232[n_109235.offset] = nimCopy(dest_109232[n_109235.offset], src_109233[n_109235.offset], n_109235.typ);
    
			break;
		case 2:
			    for (var i = 0; i < n_109235.sons.length; i++) {
      nimCopyAux(dest_109232, src_109233, n_109235.sons[i]);
    }
    
			break;
		case 3:
			      dest_109232[n_109235.offset] = nimCopy(dest_109232[n_109235.offset], src_109233[n_109235.offset], n_109235.typ);
      for (var i = 0; i < n_109235.sons.length; ++i) {
        nimCopyAux(dest_109232, src_109233, n_109235.sons[i][1]);
      }
    
			break;
		}

	
}

function add_103638(x_103641, x_103641_Idx, y_103642) {
		      if (x_103641[x_103641_Idx] === null) { x_103641[x_103641_Idx] = []; }
      var off = x_103641[x_103641_Idx].length;
      x_103641[x_103641_Idx].length += y_103642.length;
      for (var i = 0; i < y_103642.length; ++i) {
        x_103641[x_103641_Idx][off+i] = y_103642.charCodeAt(i);
      }
    

	
}

function aux_write_stack_trace_106151(f_106153) {
					var Tmp3;

	var result_106154 = [null];

		var it_106162 = f_106153;
		var i_106164 = 0;
		var total_106166 = 0;
		var temp_frames_106173 = arrayConstr(64, {Field0: null, Field1: 0}, NTI106156);
		L1: do {
				L2: while (true) {
					if (!!((it_106162 == null))) Tmp3 = false; else {						Tmp3 = (i_106164 <= 63);					}				if (!Tmp3) break L2;
					temp_frames_106173[i_106164].Field0 = it_106162.procname;
					temp_frames_106173[i_106164].Field1 = it_106162.line;
					i_106164 += 1;
					total_106166 += 1;
					it_106162 = it_106162.prev;
				}
		} while(false);
		L4: do {
				L5: while (true) {
				if (!!((it_106162 == null))) break L5;
					total_106166 += 1;
					it_106162 = it_106162.prev;
				}
		} while(false);
		result_106154[0] = nimCopy(null, [], NTI86040);
		if (!((total_106166 == i_106164))) {
		if (result_106154[0] != null) { result_106154[0] = (result_106154[0]).concat(makeNimstrLit("(")); } else { result_106154[0] = makeNimstrLit("("); };
		if (result_106154[0] != null) { result_106154[0] = (result_106154[0]).concat(cstrToNimstr(((total_106166 - i_106164))+"")); } else { result_106154[0] = cstrToNimstr(((total_106166 - i_106164))+"").slice(); };
		if (result_106154[0] != null) { result_106154[0] = (result_106154[0]).concat(makeNimstrLit(" calls omitted) ...\x0A")); } else { result_106154[0] = makeNimstrLit(" calls omitted) ...\x0A"); };
		}
		
		L6: do {
			var j_106421 = 0;
			var colontmp__291051 = 0;
			colontmp__291051 = (i_106164 - 1);
			var res_291056 = colontmp__291051;
			L7: do {
					L8: while (true) {
					if (!(0 <= res_291056)) break L8;
						j_106421 = res_291056;
						add_103638(result_106154, 0, temp_frames_106173[j_106421].Field0);
						if ((0 < temp_frames_106173[j_106421].Field1)) {
						if (result_106154[0] != null) { result_106154[0] = (result_106154[0]).concat(makeNimstrLit(", line: ")); } else { result_106154[0] = makeNimstrLit(", line: "); };
						if (result_106154[0] != null) { result_106154[0] = (result_106154[0]).concat(cstrToNimstr((temp_frames_106173[j_106421].Field1)+"")); } else { result_106154[0] = cstrToNimstr((temp_frames_106173[j_106421].Field1)+"").slice(); };
						}
						
						if (result_106154[0] != null) { result_106154[0] = (result_106154[0]).concat(makeNimstrLit("\x0A")); } else { result_106154[0] = makeNimstrLit("\x0A"); };
						res_291056 -= 1;
					}
			} while(false);
		} while(false);

	return result_106154[0];

}

function raw_write_stack_trace_106468() {
	var result_106470 = null;

		if (!((framePtr == null))) {
		result_106470 = nimCopy(null, (makeNimstrLit("Traceback (most recent call last)\x0A") || []).concat(aux_write_stack_trace_106151(framePtr) || []), NTI86040);
		}
		else {
			result_106470 = nimCopy(null, makeNimstrLit("No stack traceback available\x0A"), NTI86040);
		}
		

	return result_106470;

}

function unhandledException(e_106529) {
		var buf_106530 = [[]];
		if (!(((e_106529.message != null ? e_106529.message.length : 0) == 0))) {
		if (buf_106530[0] != null) { buf_106530[0] = (buf_106530[0]).concat(makeNimstrLit("Error: unhandled exception: ")); } else { buf_106530[0] = makeNimstrLit("Error: unhandled exception: "); };
		if (buf_106530[0] != null) { buf_106530[0] = (buf_106530[0]).concat(e_106529.message); } else { buf_106530[0] = e_106529.message.slice(); };
		}
		else {
		if (buf_106530[0] != null) { buf_106530[0] = (buf_106530[0]).concat(makeNimstrLit("Error: unhandled exception")); } else { buf_106530[0] = makeNimstrLit("Error: unhandled exception"); };
		}
		
		if (buf_106530[0] != null) { buf_106530[0] = (buf_106530[0]).concat(makeNimstrLit(" [")); } else { buf_106530[0] = makeNimstrLit(" ["); };
		add_103638(buf_106530, 0, e_106529.name);
		if (buf_106530[0] != null) { buf_106530[0] = (buf_106530[0]).concat(makeNimstrLit("]\x0A")); } else { buf_106530[0] = makeNimstrLit("]\x0A"); };
		if (buf_106530[0] != null) { buf_106530[0] = (buf_106530[0]).concat(raw_write_stack_trace_106468()); } else { buf_106530[0] = raw_write_stack_trace_106468().slice(); };
		var cbuf_106601 = toJSStr(buf_106530[0]);
		framePtr = null;
		  if (typeof(Error) !== "undefined") {
    throw new Error(cbuf_106601);
  }
  else {
    throw cbuf_106601;
  }
  

	
}

function raiseOverflow() {
		var e_107046 = null;
		e_107046 = {m_type: NTI89646, parent: null, name: null, message: null, trace: null, raiseId: 0, up: null};
		e_107046.message = nimCopy(null, makeNimstrLit("over- or underflow"), NTI86040);
		e_107046.parent = null;
		raiseException(e_107046, "OverflowError");

	
}

function raiseIndexError(i_107643, a_107644, b_107645) {
		var e_107802 = null;
		e_107802 = {m_type: NTI89658, parent: null, name: null, message: null, trace: null, raiseId: 0, up: null};
		e_107802.message = nimCopy(null, (makeNimstrLit("index ") || []).concat(cstrToNimstr((i_107643)+"") || [],makeNimstrLit(" not in ") || [],cstrToNimstr((a_107644)+"") || [],makeNimstrLit(" .. ") || [],cstrToNimstr((b_107645)+"") || []), NTI86040);
		e_107802.parent = null;
		raiseException(e_107802, "IndexError");

	
}

function raiseDivByZero() {
		var e_107245 = null;
		e_107245 = {m_type: NTI89644, parent: null, name: null, message: null, trace: null, raiseId: 0, up: null};
		e_107245.message = nimCopy(null, makeNimstrLit("division by zero"), NTI86040);
		e_107245.parent = null;
		raiseException(e_107245, "DivByZeroError");

	
}

function parse_saturated_natural_129631(s_129633, b_129635, b_129635_Idx, start_129636) {
			var Tmp1;
					var Tmp4;

	var result_129638 = 0;

	var F={procname:"parseutils.parseSaturatedNatural",prev:framePtr,filename:"/home/travis/.choosenim/toolchains/nim-#v0.20.0/lib/pure/parseutils.nim",line:0};
	framePtr = F;
		F.line = 480;
		var i_129639 = start_129636;
		if (((i_129639 < (s_129633 != null ? s_129633.length : 0)) && (s_129633[chckIndx(i_129639, 0, s_129633.length+0-1)-0] == 43))) {
		F.line = 481;
		i_129639 = addInt(i_129639, 1);
		}
		
			if (!(i_129639 < (s_129633 != null ? s_129633.length : 0))) Tmp1 = false; else {				Tmp1 = (ConstSet6[s_129633[chckIndx(i_129639, 0, s_129633.length+0-1)-0]] != undefined);			}		if (Tmp1) {
		F.line = 483;
		b_129635[b_129635_Idx] = 0;
		L2: do {
			F.line = 484;
				L3: while (true) {
					if (!(i_129639 < (s_129633 != null ? s_129633.length : 0))) Tmp4 = false; else {						Tmp4 = (ConstSet7[s_129633[chckIndx(i_129639, 0, s_129633.length+0-1)-0]] != undefined);					}				if (!Tmp4) break L3;
					F.line = 485;
					var c_129668 = subInt(s_129633[chckIndx(i_129639, 0, s_129633.length+0-1)-0], 48);
					if ((b_129635[b_129635_Idx] <= divInt(subInt(2147483647, c_129668), 10))) {
					F.line = 487;
					b_129635[b_129635_Idx] = addInt(mulInt(b_129635[b_129635_Idx], 10), c_129668);
					}
					else {
						F.line = 489;
						b_129635[b_129635_Idx] = 2147483647;
					}
					
					F.line = 490;
					i_129639 = addInt(i_129639, 1);
					L5: do {
						F.line = 491;
							L6: while (true) {
							if (!((i_129639 < (s_129633 != null ? s_129633.length : 0)) && (s_129633[chckIndx(i_129639, 0, s_129633.length+0-1)-0] == 95))) break L6;
								F.line = 491;
								i_129639 = addInt(i_129639, 1);
							}
					} while(false);
				}
		} while(false);
		F.line = 492;
		result_129638 = subInt(i_129639, start_129636);
		}
		
	framePtr = F.prev;

	return result_129638;

}

function raiseRangeError() {
		var e_107445 = null;
		e_107445 = {m_type: NTI89662, parent: null, name: null, message: null, trace: null, raiseId: 0, up: null};
		e_107445.message = nimCopy(null, makeNimstrLit("value out of range"), NTI86040);
		e_107445.parent = null;
		raiseException(e_107445, "RangeError");

	
}

function HEX5BHEX5D_186704(s_186708, x_186710) {
	var result_186711 = null;

	var F={procname:"[].[]",prev:framePtr,filename:"/home/travis/.choosenim/toolchains/nim-#v0.20.0/lib/system.nim",line:0};
	framePtr = F;
		F.line = 3855;
		var a_186801 = x_186710.a;
		F.line = 3856;
		var l_187001 = addInt(subInt(subInt((s_186708 != null ? s_186708.length : 0), x_186710.b), a_186801), 1);
		F.line = 3857;
		result_186711 = nimCopy(null, mnewString(chckRange(l_187001, 0, 2147483647)), NTI86040);
		L1: do {
			F.line = 3858;
			var i_187009 = 0;
			F.line = 2648;
			var i_291076 = 0;
			L2: do {
				F.line = 2649;
					L3: while (true) {
					if (!(i_291076 < l_187001)) break L3;
						F.line = 3858;
						i_187009 = i_291076;
						F.line = 3858;
						result_186711[chckIndx(i_187009, 0, result_186711.length+0-1)-0] = s_186708[chckIndx(addInt(i_187009, a_186801), 0, s_186708.length+0-1)-0];
						F.line = 2651;
						i_291076 = addInt(i_291076, 1);
					}
			} while(false);
		} while(false);
	framePtr = F.prev;

	return result_186711;

}

function HEX2EHEX2E_186639(a_186643, b_186644) {
	var result_186650 = {a: 0, b: 0};

	var F={procname:".....",prev:framePtr,filename:"/home/travis/.choosenim/toolchains/nim-#v0.20.0/lib/system.nim",line:0};
	framePtr = F;
		F.line = 492;
		nimCopy(result_186650, {a: a_186643, b: b_186644}, NTI186647);
	framePtr = F.prev;

	return result_186650;

}

function parse_standard_format_specifier_287324(s_287326, start_287327, ignore_unknown_suffix_287329) {
			var Tmp1;
			var Tmp2;
			var Tmp3;

	var result_287330 = {fill: 0, align: 0, sign: 0, alternateForm: false, padWithZero: false, minimumWidth: 0, precision: 0, typ: 0, endPosition: 0};

	var F={procname:"strformat.parseStandardFormatSpecifier",prev:framePtr,filename:"/home/travis/.choosenim/toolchains/nim-#v0.20.0/lib/pure/strformat.nim",line:0};
	framePtr = F;
		F.line = 377;
		result_287330.fill = 32;
		F.line = 378;
		result_287330.align = 0;
		F.line = 379;
		result_287330.sign = 45;
		F.line = 380;
		var i_287333 = start_287327;
		if (((addInt(i_287333, 1) < (s_287326 != null ? s_287326.length : 0)) && (ConstSet2[s_287326[chckIndx(addInt(i_287333, 1), 0, s_287326.length+0-1)-0]] != undefined))) {
		F.line = 382;
		result_287330.fill = s_287326[chckIndx(i_287333, 0, s_287326.length+0-1)-0];
		F.line = 383;
		result_287330.align = s_287326[chckIndx(addInt(i_287333, 1), 0, s_287326.length+0-1)-0];
		F.line = 384;
		i_287333 = addInt(i_287333, 2);
		}
		else {
		if (((i_287333 < (s_287326 != null ? s_287326.length : 0)) && (ConstSet3[s_287326[chckIndx(i_287333, 0, s_287326.length+0-1)-0]] != undefined))) {
		F.line = 386;
		result_287330.align = s_287326[chckIndx(i_287333, 0, s_287326.length+0-1)-0];
		F.line = 387;
		i_287333 = addInt(i_287333, 1);
		}
		}
		if (((i_287333 < (s_287326 != null ? s_287326.length : 0)) && (ConstSet4[s_287326[chckIndx(i_287333, 0, s_287326.length+0-1)-0]] != undefined))) {
		F.line = 390;
		result_287330.sign = s_287326[chckIndx(i_287333, 0, s_287326.length+0-1)-0];
		F.line = 391;
		i_287333 = addInt(i_287333, 1);
		}
		
		if (((i_287333 < (s_287326 != null ? s_287326.length : 0)) && (s_287326[chckIndx(i_287333, 0, s_287326.length+0-1)-0] == 35))) {
		F.line = 394;
		result_287330.alternateForm = true;
		F.line = 395;
		i_287333 = addInt(i_287333, 1);
		}
		
			if (!((addInt(i_287333, 1) < (s_287326 != null ? s_287326.length : 0)) && (s_287326[chckIndx(i_287333, 0, s_287326.length+0-1)-0] == 48))) Tmp1 = false; else {				Tmp1 = (ConstSet5[s_287326[chckIndx(addInt(i_287333, 1), 0, s_287326.length+0-1)-0]] != undefined);			}		if (Tmp1) {
		F.line = 398;
		result_287330.padWithZero = true;
		F.line = 399;
		i_287333 = addInt(i_287333, 1);
		}
		
		F.line = 401;
		var parsed_length_287391 = parse_saturated_natural_129631(s_287326, result_287330, "minimumWidth", i_287333);
		F.line = 402;
		i_287333 = addInt(i_287333, parsed_length_287391);
		if (((i_287333 < (s_287326 != null ? s_287326.length : 0)) && (s_287326[chckIndx(i_287333, 0, s_287326.length+0-1)-0] == 46))) {
		F.line = 404;
		i_287333 = addInt(i_287333, 1);
		F.line = 405;
		var parsed_length_b_287405 = parse_saturated_natural_129631(s_287326, result_287330, "precision", i_287333);
		F.line = 406;
		i_287333 = addInt(i_287333, parsed_length_b_287405);
		}
		else {
			F.line = 408;
			result_287330.precision = -1;
		}
		
			if (!(i_287333 < (s_287326 != null ? s_287326.length : 0))) Tmp2 = false; else {				Tmp2 = (ConstSet8[s_287326[chckIndx(i_287333, 0, s_287326.length+0-1)-0]] != undefined);			}		if (Tmp2) {
		F.line = 411;
		result_287330.typ = s_287326[chckIndx(i_287333, 0, s_287326.length+0-1)-0];
		F.line = 412;
		i_287333 = addInt(i_287333, 1);
		}
		
		F.line = 413;
		result_287330.endPosition = i_287333;
			if (!!((i_287333 == (s_287326 != null ? s_287326.length : 0)))) Tmp3 = false; else {				Tmp3 = !(ignore_unknown_suffix_287329);			}		if (Tmp3) {
		F.line = 3348;
		var e_287460 = null;
		F.line = 3351;
		e_287460 = {m_type: NTI89652, parent: null, name: null, message: null, trace: null, raiseId: 0, up: null};
		F.line = 416;
		e_287460.message = nimCopy(null, (makeNimstrLit("invalid format string, cannot parse: ") || []).concat(HEX5BHEX5D_186704(s_287326, HEX2EHEX2E_186639(i_287333, 1)) || []), NTI86040);
		F.line = 3344;
		e_287460.parent = null;
		F.line = 415;
		raiseException(e_287460, "ValueError");
		}
		
	framePtr = F.prev;

	return result_287330;

}

function nucruneLen(s_151227) {
	var result_151228 = 0;

	var F={procname:"unicode.runeLen",prev:framePtr,filename:"/home/travis/.choosenim/toolchains/nim-#v0.20.0/lib/pure/unicode.nim",line:0};
	framePtr = F;
		F.line = 49;
		var i_151230 = 0;
		L1: do {
			F.line = 50;
				L2: while (true) {
				if (!(i_151230 < (s_151227 != null ? s_151227.length : 0))) break L2;
					if ((s_151227[chckIndx(i_151230, 0, s_151227.length+0-1)-0] <= 127)) {
					F.line = 51;
					i_151230 = addInt(i_151230, 1);
					}
					else {
					if ((((s_151227[chckIndx(i_151230, 0, s_151227.length+0-1)-0] >>> 0) >>> 5) == 6)) {
					F.line = 52;
					i_151230 = addInt(i_151230, 2);
					}
					else {
					if ((((s_151227[chckIndx(i_151230, 0, s_151227.length+0-1)-0] >>> 0) >>> 4) == 14)) {
					F.line = 53;
					i_151230 = addInt(i_151230, 3);
					}
					else {
					if ((((s_151227[chckIndx(i_151230, 0, s_151227.length+0-1)-0] >>> 0) >>> 3) == 30)) {
					F.line = 54;
					i_151230 = addInt(i_151230, 4);
					}
					else {
					if ((((s_151227[chckIndx(i_151230, 0, s_151227.length+0-1)-0] >>> 0) >>> 2) == 62)) {
					F.line = 55;
					i_151230 = addInt(i_151230, 5);
					}
					else {
					if ((((s_151227[chckIndx(i_151230, 0, s_151227.length+0-1)-0] >>> 0) >>> 1) == 126)) {
					F.line = 56;
					i_151230 = addInt(i_151230, 6);
					}
					else {
						F.line = 57;
					i_151230 = addInt(i_151230, 1);
					}
					}}}}}
					F.line = 58;
					result_151228 = addInt(result_151228, 1);
				}
		} while(false);
	framePtr = F.prev;

	return result_151228;

}

function rune_len_at_151359(s_151361, i_151362) {
	var result_151363 = 0;

	var F={procname:"unicode.runeLenAt",prev:framePtr,filename:"/home/travis/.choosenim/toolchains/nim-#v0.20.0/lib/pure/unicode.nim",line:0};
	framePtr = F;
		if ((s_151361[chckIndx(i_151362, 0, s_151361.length+0-1)-0] <= 127)) {
		F.line = 70;
		result_151363 = 1;
		}
		else {
		if ((((s_151361[chckIndx(i_151362, 0, s_151361.length+0-1)-0] >>> 0) >>> 5) == 6)) {
		F.line = 71;
		result_151363 = 2;
		}
		else {
		if ((((s_151361[chckIndx(i_151362, 0, s_151361.length+0-1)-0] >>> 0) >>> 4) == 14)) {
		F.line = 72;
		result_151363 = 3;
		}
		else {
		if ((((s_151361[chckIndx(i_151362, 0, s_151361.length+0-1)-0] >>> 0) >>> 3) == 30)) {
		F.line = 73;
		result_151363 = 4;
		}
		else {
		if ((((s_151361[chckIndx(i_151362, 0, s_151361.length+0-1)-0] >>> 0) >>> 2) == 62)) {
		F.line = 74;
		result_151363 = 5;
		}
		else {
		if ((((s_151361[chckIndx(i_151362, 0, s_151361.length+0-1)-0] >>> 0) >>> 1) == 126)) {
		F.line = 75;
		result_151363 = 6;
		}
		else {
			F.line = 76;
			result_151363 = 1;
		}
		}}}}}
	framePtr = F.prev;

	return result_151363;

}

function rune_offset_157044(s_157046, pos_157047, start_157048) {
	var result_157049 = 0;

	var F={procname:"unicode.runeOffset",prev:framePtr,filename:"/home/travis/.choosenim/toolchains/nim-#v0.20.0/lib/pure/unicode.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 327;
		var i_157051 = 0;
		F.line = 328;
		var o_157052 = start_157048;
		L1: do {
			F.line = 329;
				L2: while (true) {
				if (!(i_157051 < pos_157047)) break L2;
					F.line = 330;
					o_157052 = addInt(o_157052, chckRange(rune_len_at_151359(s_157046, o_157052), 0, 2147483647));
					if (((s_157046 != null ? s_157046.length : 0) <= o_157052)) {
					F.line = 332;
					result_157049 = -1;
					break BeforeRet;
					}
					
					F.line = 333;
					i_157051 = addInt(i_157051, 1);
				}
		} while(false);
		F.line = 334;
		result_157049 = o_157052;
		break BeforeRet;
	} while (false);
	framePtr = F.prev;

	return result_157049;

}

function validate_utf8_154229(s_154231) {
						var Tmp3;
						var Tmp4;
						var Tmp5;
						var Tmp6;
						var Tmp7;
						var Tmp8;

	var result_154232 = 0;

	var F={procname:"unicode.validateUTF8",prev:framePtr,filename:"/home/travis/.choosenim/toolchains/nim-#v0.20.0/lib/pure/unicode.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 180;
		var i_154234 = 0;
		F.line = 181;
		var l_154235 = (s_154231 != null ? s_154231.length : 0);
		L1: do {
			F.line = 182;
				L2: while (true) {
				if (!(i_154234 < l_154235)) break L2;
					if ((s_154231[chckIndx(i_154234, 0, s_154231.length+0-1)-0] <= 127)) {
					F.line = 184;
					i_154234 = addInt(i_154234, 1);
					}
					else {
					if ((((s_154231[chckIndx(i_154234, 0, s_154231.length+0-1)-0] >>> 0) >>> 5) == 6)) {
					if ((s_154231[chckIndx(i_154234, 0, s_154231.length+0-1)-0] < 194)) {
					F.line = 186;
					result_154232 = i_154234;
					break BeforeRet;
					}
					
						if (!(addInt(i_154234, 1) < l_154235)) Tmp3 = false; else {							Tmp3 = (((s_154231[chckIndx(addInt(i_154234, 1), 0, s_154231.length+0-1)-0] >>> 0) >>> 6) == 2);						}					if (Tmp3) {
					F.line = 187;
					i_154234 = addInt(i_154234, 2);
					}
					else {
						F.line = 188;
						result_154232 = i_154234;
						break BeforeRet;
					}
					
					}
					else {
					if ((((s_154231[chckIndx(i_154234, 0, s_154231.length+0-1)-0] >>> 0) >>> 4) == 14)) {
						if (!(addInt(i_154234, 2) < l_154235)) Tmp5 = false; else {							Tmp5 = (((s_154231[chckIndx(addInt(i_154234, 1), 0, s_154231.length+0-1)-0] >>> 0) >>> 6) == 2);						}						if (!Tmp5) Tmp4 = false; else {							Tmp4 = (((s_154231[chckIndx(addInt(i_154234, 2), 0, s_154231.length+0-1)-0] >>> 0) >>> 6) == 2);						}					if (Tmp4) {
					F.line = 191;
					i_154234 = addInt(i_154234, 3);
					}
					else {
						F.line = 192;
						result_154232 = i_154234;
						break BeforeRet;
					}
					
					}
					else {
					if ((((s_154231[chckIndx(i_154234, 0, s_154231.length+0-1)-0] >>> 0) >>> 3) == 30)) {
						if (!(addInt(i_154234, 3) < l_154235)) Tmp8 = false; else {							Tmp8 = (((s_154231[chckIndx(addInt(i_154234, 1), 0, s_154231.length+0-1)-0] >>> 0) >>> 6) == 2);						}						if (!Tmp8) Tmp7 = false; else {							Tmp7 = (((s_154231[chckIndx(addInt(i_154234, 2), 0, s_154231.length+0-1)-0] >>> 0) >>> 6) == 2);						}						if (!Tmp7) Tmp6 = false; else {							Tmp6 = (((s_154231[chckIndx(addInt(i_154234, 3), 0, s_154231.length+0-1)-0] >>> 0) >>> 6) == 2);						}					if (Tmp6) {
					F.line = 197;
					i_154234 = addInt(i_154234, 4);
					}
					else {
						F.line = 198;
						result_154232 = i_154234;
						break BeforeRet;
					}
					
					}
					else {
						F.line = 200;
						result_154232 = i_154234;
						break BeforeRet;
					}
					}}}
				}
		} while(false);
		F.line = 201;
		result_154232 = -1;
		break BeforeRet;
	} while (false);
	framePtr = F.prev;

	return result_154232;

}

function nsuRepeatChar(c_237859, count_237860) {
	var result_237861 = null;

	var F={procname:"strutils.repeat",prev:framePtr,filename:"/home/travis/.choosenim/toolchains/nim-#v0.20.0/lib/pure/strutils.nim",line:0};
	framePtr = F;
		F.line = 1290;
		result_237861 = nimCopy(null, mnewString(count_237860), NTI86040);
		L1: do {
			F.line = 1291;
			var i_237870 = 0;
			F.line = 2610;
			var colontmp__291108 = 0;
			F.line = 1291;
			colontmp__291108 = subInt(count_237860, 1);
			F.line = 2620;
			var res_291109 = 0;
			L2: do {
				F.line = 2621;
					L3: while (true) {
					if (!(res_291109 <= colontmp__291108)) break L3;
						F.line = 1291;
						i_237870 = res_291109;
						F.line = 1291;
						result_237861[chckIndx(i_237870, 0, result_237861.length+0-1)-0] = c_237859;
						F.line = 2623;
						res_291109 = addInt(res_291109, 1);
					}
			} while(false);
		} while(false);
	framePtr = F.prev;

	return result_237861;

}

function align_string_287223(s_287225, minimum_width_287226, align_287227, fill_287228) {
			var Tmp1;

	var result_287229 = null;

	var F={procname:"strformat.alignString",prev:framePtr,filename:"/home/travis/.choosenim/toolchains/nim-#v0.20.0/lib/pure/strformat.nim",line:0};
	framePtr = F;
		if ((minimum_width_287226 == 0)) {
		F.line = 281;
		result_287229 = nimCopy(null, s_287225, NTI86040);
		}
		else {
			F.line = 283;
			if ((validate_utf8_154229(s_287225) == -1)) {
			Tmp1 = nucruneLen(s_287225);
			}
			else {
			Tmp1 = (s_287225 != null ? s_287225.length : 0);
			}
			
			var s_rune_len_287231 = Tmp1;
			F.line = 284;
			var to_fill_287232 = subInt(minimum_width_287226, s_rune_len_287231);
			if ((to_fill_287232 <= 0)) {
			F.line = 286;
			result_287229 = nimCopy(null, s_287225, NTI86040);
			}
			else {
			if (((align_287227 == 60) || (align_287227 == 0))) {
			F.line = 288;
			result_287229 = nimCopy(null, (s_287225 || []).concat(nsuRepeatChar(fill_287228, chckRange(to_fill_287232, 0, 2147483647)) || []), NTI86040);
			}
			else {
			if ((align_287227 == 94)) {
			F.line = 290;
			var half_287233 = divInt(to_fill_287232, 2);
			F.line = 291;
			result_287229 = nimCopy(null, (nsuRepeatChar(fill_287228, chckRange(half_287233, 0, 2147483647)) || []).concat(s_287225 || [],nsuRepeatChar(fill_287228, chckRange(subInt(to_fill_287232, half_287233), 0, 2147483647)) || []), NTI86040);
			}
			else {
				F.line = 293;
				result_287229 = nimCopy(null, (nsuRepeatChar(fill_287228, chckRange(to_fill_287232, 0, 2147483647)) || []).concat(s_287225 || []), NTI86040);
			}
			}}
		}
		
	framePtr = F.prev;

	return result_287229;

}

function format_value_287691(result_287694, result_287694_Idx, value_287695, specifier_287696) {
	var F={procname:"strformat.formatValue",prev:framePtr,filename:"/home/travis/.choosenim/toolchains/nim-#v0.20.0/lib/pure/strformat.nim",line:0};
	framePtr = F;
		F.line = 499;
		var spec_287697 = parse_standard_format_specifier_287324(specifier_287696, 0, false);
		F.line = 500;
		var value_287698 = nimCopy(null, value_287695, NTI86040);
		F.line = 501;
		switch (spec_287697.typ) {
		case 115:
		case 0:
			break;
		default: 
			F.line = 3348;
			var e_287701 = null;
			F.line = 3351;
			e_287701 = {m_type: NTI89652, parent: null, name: null, message: null, trace: null, raiseId: 0, up: null};
			F.line = 505;
			e_287701.message = nimCopy(null, (makeNimstrLit("invalid type in format string for string, expected \'s\', but got ") || []).concat([spec_287697.typ]), NTI86040);
			F.line = 3344;
			e_287701.parent = null;
			F.line = 504;
			raiseException(e_287701, "ValueError");
			break;
		}
		if (!((spec_287697.precision == -1))) {
		if ((spec_287697.precision < nucruneLen(value_287698))) {
		F.line = 509;
		(value_287698 == null ? value_287698 = mnewString(chckRange(rune_offset_157044(value_287698, chckRange(spec_287697.precision, 0, 2147483647), 0), 0, 2147483647)) : value_287698.length = chckRange(rune_offset_157044(value_287698, chckRange(spec_287697.precision, 0, 2147483647), 0), 0, 2147483647));
		}
		
		}
		
		F.line = 510;
		if (result_287694[result_287694_Idx] != null) { result_287694[result_287694_Idx] = (result_287694[result_287694_Idx]).concat(align_string_287223(value_287698, spec_287697.minimumWidth, spec_287697.align, spec_287697.fill)); } else { result_287694[result_287694_Idx] = align_string_287223(value_287698, spec_287697.minimumWidth, spec_287697.align, spec_287697.fill).slice(); };
	framePtr = F.prev;

	
}

function nsuToUpperAsciiChar(c_233862) {
	var result_233863 = 0;

	var F={procname:"strutils.toUpperAscii",prev:framePtr,filename:"/home/travis/.choosenim/toolchains/nim-#v0.20.0/lib/pure/strutils.nim",line:0};
	framePtr = F;
		if ((ConstSet9[c_233862] != undefined)) {
		F.line = 261;
		result_233863 = chckRange(subInt(c_233862, 32), 0, 255);
		}
		else {
			F.line = 263;
			result_233863 = c_233862;
		}
		
	framePtr = F.prev;

	return result_233863;

}

function head_upper_290024(str_290026) {
	var result_290027 = null;

	var F={procname:"nimjson.headUpper",prev:framePtr,filename:"/home/travis/build/jiro4989/nimjson/src/nimjsonpkg/util.nim",line:0};
	framePtr = F;
		F.line = 31;
		result_290027 = nimCopy(null, [nsuToUpperAsciiChar(str_290026[chckIndx(0, 0, str_290026.length+0-1)-0])].concat(HEX5BHEX5D_186704(str_290026, HEX2EHEX2E_186639(1, 1)) || []), NTI86040);
	framePtr = F.prev;

	return result_290027;

}

function len_271165(t_271170) {
	var result_271171 = 0;

	var F={procname:"len.len",prev:framePtr,filename:"/home/travis/.choosenim/toolchains/nim-#v0.20.0/lib/pure/collections/tables.nim",line:0};
	framePtr = F;
		F.line = 1473;
		result_271171 = t_271170.counter;
	framePtr = F.prev;

	return result_271171;

}

function is_filled_248418(hcode_248420) {
	var result_248421 = false;

	var F={procname:"tables.isFilled",prev:framePtr,filename:"/home/travis/.choosenim/toolchains/nim-#v0.20.0/lib/pure/collections/hashcommon.nim",line:0};
	framePtr = F;
		F.line = 27;
		result_248421 = !((hcode_248420 == 0));
	framePtr = F.prev;

	return result_248421;

}

function get_type_290076(key_290078, value_290079, strs_290082, strs_290082_Idx, index_290083, public_str_290084) {
		var Tmp1;
				var Tmp2;
				var Tmp3;
			var Tmp4;
			var Tmp5;

	var result_290085 = null;

	var F={procname:"nimjson.getType",prev:framePtr,filename:"/home/travis/build/jiro4989/nimjson/src/nimjsonpkg/util.nim",line:0};
	framePtr = F;
		F.line = 36;
		F.line = 40;
		switch (value_290079.kind) {
		case 6:
			F.line = 42;
			var u_key_290086 = head_upper_290024(key_290078);
			F.line = 43;
			var s_290087 = makeNimstrLit("seq[");
				var Tmp2 = value_290079;
				if (ConstSet11[Tmp2.kind]===undefined) { raiseFieldError(makeNimstrLit("elems")); }
			if ((0 < ((Tmp3 = Tmp2.elems, Tmp3) != null ? Tmp3.length : 0))) {
			F.line = 46;
			var Tmp4 = value_290079;
			if (ConstSet12[Tmp4.kind]===undefined) { raiseFieldError(makeNimstrLit("elems")); }
			var child_290097 = (Tmp5 = Tmp4.elems, Tmp5)[chckIndx(0, 0, Tmp5.length+0-1)-0];
			F.line = 47;
			if (s_290087 != null) { s_290087 = (s_290087).concat(get_type_290076(u_key_290086, child_290097, strs_290082, strs_290082_Idx, index_290083, public_str_290084)); } else { s_290087 = get_type_290076(u_key_290086, child_290097, strs_290082, strs_290082_Idx, index_290083, public_str_290084).slice(); };
			if ((child_290097.kind == 5)) {
			F.line = 49;
			obj_format_290002(child_290097, u_key_290086, strs_290082, strs_290082_Idx, addInt(index_290083, 1), public_str_290084);
			}
			
			}
			else {
				F.line = 51;
			if (s_290087 != null) { s_290087 = (s_290087).concat(makeNimstrLit("NilType")); } else { s_290087 = makeNimstrLit("NilType"); };
			}
			
			F.line = 52;
			if (s_290087 != null) { s_290087 = (s_290087).concat(makeNimstrLit("]")); } else { s_290087 = makeNimstrLit("]"); };
			Tmp1 = s_290087;
			break;
		case 5:
			Tmp1 = head_upper_290024(key_290078);
			break;
		case 4:
			Tmp1 = makeNimstrLit("string");
			break;
		case 2:
			Tmp1 = makeNimstrLit("int64");
			break;
		case 3:
			Tmp1 = makeNimstrLit("float64");
			break;
		case 1:
			Tmp1 = makeNimstrLit("bool");
			break;
		case 0:
			Tmp1 = makeNimstrLit("NilType");
			break;
		}
		result_290085 = nimCopy(null, Tmp1, NTI86040);
	framePtr = F.prev;

	return result_290085;

}

function sys_fatal_99862(message_99866) {
	var F={procname:"sysFatal.sysFatal",prev:framePtr,filename:"/home/travis/.choosenim/toolchains/nim-#v0.20.0/lib/system/fatal.nim",line:0};
	framePtr = F;
		F.line = 34;
		var e_100007 = null;
		F.line = 37;
		e_100007 = {m_type: NTI89650, parent: null, name: null, message: null, trace: null, raiseId: 0, up: null};
		F.line = 38;
		e_100007.message = nimCopy(null, message_99866, NTI86040);
		F.line = 39;
		raiseException(e_100007, "AssertionError");
	framePtr = F.prev;

	
}

function raise_assert_99858(msg_99860) {
	var F={procname:"assertions.raiseAssert",prev:framePtr,filename:"/home/travis/.choosenim/toolchains/nim-#v0.20.0/lib/system/assertions.nim",line:0};
	framePtr = F;
		F.line = 20;
		sys_fatal_99862(msg_99860);
	framePtr = F.prev;

	
}

function failed_assert_impl_100055(msg_100057) {
	var F={procname:"assertions.failedAssertImpl",prev:framePtr,filename:"/home/travis/.choosenim/toolchains/nim-#v0.20.0/lib/system/assertions.nim",line:0};
	framePtr = F;
		F.line = 27;
		raise_assert_99858(msg_100057);
	framePtr = F.prev;

	
}

function obj_format_290002(self_290004, obj_name_290005, strs_290020, strs_290020_Idx, index_290021, public_str_290023) {
			var Tmp2;

	var F={procname:"nimjson.objFormat",prev:framePtr,filename:"/home/travis/build/jiro4989/nimjson/src/nimjsonpkg/util.nim",line:0};
	framePtr = F;
		F.line = 64;
		if (strs_290020[strs_290020_Idx] != null) { strs_290020[strs_290020_Idx].push([]); } else { strs_290020[strs_290020_Idx] = [[]]; };
		F.line = 65;
		F.line = 65;
		var fmt_res_290149 = [mnewString(0)];
		F.line = 65;
		if (fmt_res_290149[0] != null) { fmt_res_290149[0] = (fmt_res_290149[0]).concat(makeNimstrLit("  ")); } else { fmt_res_290149[0] = makeNimstrLit("  "); };
		F.line = 65;
		format_value_287691(fmt_res_290149, 0, head_upper_290024(obj_name_290005), []);
		F.line = 65;
		format_value_287691(fmt_res_290149, 0, public_str_290023, []);
		F.line = 65;
		if (fmt_res_290149[0] != null) { fmt_res_290149[0] = (fmt_res_290149[0]).concat(makeNimstrLit(" = ref object\x0A")); } else { fmt_res_290149[0] = makeNimstrLit(" = ref object\x0A"); };
		if (strs_290020[strs_290020_Idx][chckIndx(index_290021, 0, strs_290020[strs_290020_Idx].length+0-1)-0] != null) { strs_290020[strs_290020_Idx][chckIndx(index_290021, 0, strs_290020[strs_290020_Idx].length+0-1)-0] = (strs_290020[strs_290020_Idx][chckIndx(index_290021, 0, strs_290020[strs_290020_Idx].length+0-1)-0]).concat(fmt_res_290149[0]); } else { strs_290020[strs_290020_Idx][chckIndx(index_290021, 0, strs_290020[strs_290020_Idx].length+0-1)-0] = fmt_res_290149[0].slice(); };
		L1: do {
			F.line = 66;
			var k_290166 = null;
			F.line = 66;
			var v_290167 = null;
			F.line = 1618;
			var colontmp__291115 = {data: null, counter: 0, first: 0, last: 0};
			F.line = 66;
			var Tmp2 = self_290004;
			if (ConstSet10[Tmp2.kind]===undefined) { raiseFieldError(makeNimstrLit("fields")); }
			nimCopy(colontmp__291115, Tmp2.fields, NTI264228);
			F.line = 1644;
			var l_291117 = len_271165(colontmp__291115);
			F.line = 1256;
			var h_291118 = colontmp__291115.first;
			L3: do {
				F.line = 1645;
					L4: while (true) {
					if (!(0 <= h_291118)) break L4;
						F.line = 1258;
						var nxt_291120 = colontmp__291115.data[chckIndx(h_291118, 0, colontmp__291115.data.length+0-1)-0].Field1;
						if (is_filled_248418(colontmp__291115.data[chckIndx(h_291118, 0, colontmp__291115.data.length+0-1)-0].Field0)) {
						F.line = 66;
						k_290166 = colontmp__291115.data[chckIndx(h_291118, 0, colontmp__291115.data.length+0-1)-0].Field2;
						F.line = 1646;
						v_290167 = colontmp__291115.data[chckIndx(h_291118, 0, colontmp__291115.data.length+0-1)-0].Field3;
						F.line = 67;
						var t_290168 = get_type_290076(k_290166, v_290167, strs_290020, strs_290020_Idx, index_290021, public_str_290023);
						F.line = 68;
						F.line = 68;
						var fmt_res_290169 = [mnewString(0)];
						F.line = 68;
						if (fmt_res_290169[0] != null) { fmt_res_290169[0] = (fmt_res_290169[0]).concat(makeNimstrLit("    ")); } else { fmt_res_290169[0] = makeNimstrLit("    "); };
						F.line = 68;
						format_value_287691(fmt_res_290169, 0, k_290166, []);
						F.line = 68;
						format_value_287691(fmt_res_290169, 0, public_str_290023, []);
						F.line = 68;
						if (fmt_res_290169[0] != null) { fmt_res_290169[0] = (fmt_res_290169[0]).concat(makeNimstrLit(": ")); } else { fmt_res_290169[0] = makeNimstrLit(": "); };
						F.line = 68;
						format_value_287691(fmt_res_290169, 0, t_290168, []);
						F.line = 68;
						if (fmt_res_290169[0] != null) { fmt_res_290169[0] = (fmt_res_290169[0]).concat(makeNimstrLit("\x0A")); } else { fmt_res_290169[0] = makeNimstrLit("\x0A"); };
						if (strs_290020[strs_290020_Idx][chckIndx(index_290021, 0, strs_290020[strs_290020_Idx].length+0-1)-0] != null) { strs_290020[strs_290020_Idx][chckIndx(index_290021, 0, strs_290020[strs_290020_Idx].length+0-1)-0] = (strs_290020[strs_290020_Idx][chckIndx(index_290021, 0, strs_290020[strs_290020_Idx].length+0-1)-0]).concat(fmt_res_290169[0]); } else { strs_290020[strs_290020_Idx][chckIndx(index_290021, 0, strs_290020[strs_290020_Idx].length+0-1)-0] = fmt_res_290169[0].slice(); };
						if ((v_290167.kind == 5)) {
						F.line = 72;
						obj_format_290002(v_290167, k_290166, strs_290020, strs_290020_Idx, addInt(index_290021, 1), public_str_290023);
						}
						
						if (!((len_271165(colontmp__291115) == l_291117))) {
						F.line = 1647;
						failed_assert_impl_100055(makeNimstrLit("/home/travis/.choosenim/toolchains/nim-#v0.20.0/lib/pure/collections/tables.nim(1647, 11) `len(t) ==\x0A    L` the length of the table changed while iterating over it"));
						}
						
						}
						
						F.line = 1260;
						h_291118 = nxt_291120;
					}
			} while(false);
		} while(false);
	framePtr = F.prev;

	
}

function nsuJoinSep(a_239059, sep_239060) {
	var result_239061 = null;

	var F={procname:"strutils.join",prev:framePtr,filename:"/home/travis/.choosenim/toolchains/nim-#v0.20.0/lib/pure/strutils.nim",line:0};
	framePtr = F;
		if ((0 < (a_239059 != null ? a_239059.length : 0))) {
		F.line = 1766;
		var l_239072 = mulInt((sep_239060 != null ? sep_239060.length : 0), subInt((a_239059 != null ? a_239059.length : 0), 1));
		L1: do {
			F.line = 1767;
			var i_239086 = 0;
			F.line = 2610;
			var colontmp__291125 = 0;
			F.line = 1767;
			colontmp__291125 = (a_239059 != null ? (a_239059.length-1) : -1);
			F.line = 2620;
			var res_291126 = 0;
			L2: do {
				F.line = 2621;
					L3: while (true) {
					if (!(res_291126 <= colontmp__291125)) break L3;
						F.line = 1767;
						i_239086 = res_291126;
						F.line = 1767;
						l_239072 = addInt(l_239072, (a_239059[chckIndx(i_239086, 0, a_239059.length+0-1)-0] != null ? a_239059[chckIndx(i_239086, 0, a_239059.length+0-1)-0].length : 0));
						F.line = 2623;
						res_291126 = addInt(res_291126, 1);
					}
			} while(false);
		} while(false);
		F.line = 1768;
		result_239061 = nimCopy(null, mnewString(0), NTI86040);
		F.line = 1769;
		if (result_239061 != null) { result_239061 = (result_239061).concat(a_239059[chckIndx(0, 0, a_239059.length+0-1)-0]); } else { result_239061 = a_239059[chckIndx(0, 0, a_239059.length+0-1)-0].slice(); };
		L4: do {
			F.line = 1770;
			var i_239106 = 0;
			F.line = 2610;
			var colontmp__291132 = 0;
			F.line = 1770;
			colontmp__291132 = (a_239059 != null ? (a_239059.length-1) : -1);
			F.line = 2620;
			var res_291133 = 1;
			L5: do {
				F.line = 2621;
					L6: while (true) {
					if (!(res_291133 <= colontmp__291132)) break L6;
						F.line = 1770;
						i_239106 = res_291133;
						F.line = 1771;
						if (result_239061 != null) { result_239061 = (result_239061).concat(sep_239060); } else { result_239061 = sep_239060.slice(); };
						F.line = 1772;
						if (result_239061 != null) { result_239061 = (result_239061).concat(a_239059[chckIndx(i_239106, 0, a_239059.length+0-1)-0]); } else { result_239061 = a_239059[chckIndx(i_239106, 0, a_239059.length+0-1)-0].slice(); };
						F.line = 2623;
						res_291133 = addInt(res_291133, 1);
					}
			} while(false);
		} while(false);
		}
		else {
			F.line = 1774;
			result_239061 = nimCopy(null, [], NTI86040);
		}
		
	framePtr = F.prev;

	return result_239061;

}

function to_type_string_290192(self_290194, obj_name_290195, public_field_290196) {
		var Tmp1;
				var Tmp2;
				var Tmp3;
			var Tmp4;
			var Tmp5;

	var result_290197 = null;

	var F={procname:"nimjson.toTypeString",prev:framePtr,filename:"/home/travis/build/jiro4989/nimjson/src/nimjsonpkg/util.nim",line:0};
	framePtr = F;
		F.line = 105;
		if (public_field_290196) {
		Tmp1 = makeNimstrLit("*");
		}
		else {
		Tmp1 = [];
		}
		
		var public_str_290198 = nimCopy(null, Tmp1, NTI86040);
		F.line = 109;
		if (result_290197 != null) { result_290197 = (result_290197).concat(makeNimstrLit("type\x0A")); } else { result_290197 = makeNimstrLit("type\x0A"); };
		F.line = 110;
		F.line = 110;
		var fmt_res_290199 = [mnewString(0)];
		F.line = 110;
		if (fmt_res_290199[0] != null) { fmt_res_290199[0] = (fmt_res_290199[0]).concat(makeNimstrLit("  ")); } else { fmt_res_290199[0] = makeNimstrLit("  "); };
		F.line = 110;
		format_value_287691(fmt_res_290199, 0, makeNimstrLit("NilType"), []);
		F.line = 110;
		format_value_287691(fmt_res_290199, 0, public_str_290198, []);
		F.line = 110;
		if (fmt_res_290199[0] != null) { fmt_res_290199[0] = (fmt_res_290199[0]).concat(makeNimstrLit(" = ref object\x0A")); } else { fmt_res_290199[0] = makeNimstrLit(" = ref object\x0A"); };
		if (result_290197 != null) { result_290197 = (result_290197).concat(fmt_res_290199[0]); } else { result_290197 = fmt_res_290199[0].slice(); };
		F.line = 111;
		switch (self_290194.kind) {
		case 5:
			F.line = 113;
			var ret_290203 = [null];
			F.line = 114;
			obj_format_290002(self_290194, obj_name_290195, ret_290203, 0, 0, public_str_290198);
			F.line = 115;
			if (result_290197 != null) { result_290197 = (result_290197).concat(nsuJoinSep(ret_290203[0], [])); } else { result_290197 = nsuJoinSep(ret_290203[0], []).slice(); };
			break;
		case 6:
			F.line = 117;
			F.line = 117;
			var fmt_res_290206 = [mnewString(0)];
			F.line = 117;
			if (fmt_res_290206[0] != null) { fmt_res_290206[0] = (fmt_res_290206[0]).concat(makeNimstrLit("Seq")); } else { fmt_res_290206[0] = makeNimstrLit("Seq"); };
			F.line = 117;
			format_value_287691(fmt_res_290206, 0, head_upper_290024(obj_name_290195), []);
			var seq_obj_name_290208 = nimCopy(null, fmt_res_290206[0], NTI86040);
				var Tmp2 = self_290194;
				if (ConstSet13[Tmp2.kind]===undefined) { raiseFieldError(makeNimstrLit("elems")); }
			if ((0 < ((Tmp3 = Tmp2.elems, Tmp3) != null ? Tmp3.length : 0))) {
			F.line = 119;
			var Tmp4 = self_290194;
			if (ConstSet14[Tmp4.kind]===undefined) { raiseFieldError(makeNimstrLit("elems")); }
			var child_290218 = (Tmp5 = Tmp4.elems, Tmp5)[chckIndx(0, 0, Tmp5.length+0-1)-0];
			F.line = 120;
			switch (child_290218.kind) {
			case 5:
				F.line = 122;
				F.line = 122;
				var fmt_res_290219 = [mnewString(0)];
				F.line = 122;
				if (fmt_res_290219[0] != null) { fmt_res_290219[0] = (fmt_res_290219[0]).concat(makeNimstrLit("  ")); } else { fmt_res_290219[0] = makeNimstrLit("  "); };
				F.line = 122;
				format_value_287691(fmt_res_290219, 0, seq_obj_name_290208, []);
				F.line = 122;
				if (fmt_res_290219[0] != null) { fmt_res_290219[0] = (fmt_res_290219[0]).concat(makeNimstrLit(" = seq[")); } else { fmt_res_290219[0] = makeNimstrLit(" = seq["); };
				F.line = 122;
				format_value_287691(fmt_res_290219, 0, obj_name_290195, []);
				F.line = 122;
				if (fmt_res_290219[0] != null) { fmt_res_290219[0] = (fmt_res_290219[0]).concat(makeNimstrLit("]\x0A")); } else { fmt_res_290219[0] = makeNimstrLit("]\x0A"); };
				if (result_290197 != null) { result_290197 = (result_290197).concat(fmt_res_290219[0]); } else { result_290197 = fmt_res_290219[0].slice(); };
				F.line = 123;
				var ret_290223 = [null];
				F.line = 124;
				obj_format_290002(child_290218, obj_name_290195, ret_290223, 0, 0, public_str_290198);
				F.line = 125;
				if (result_290197 != null) { result_290197 = (result_290197).concat(nsuJoinSep(ret_290223[0], [])); } else { result_290197 = nsuJoinSep(ret_290223[0], []).slice(); };
				break;
			default: 
				F.line = 127;
				var strs_290227 = [null];
				F.line = 128;
				var t_290229 = get_type_290076(obj_name_290195, child_290218, strs_290227, 0, 0, public_str_290198);
				F.line = 129;
				F.line = 129;
				var fmt_res_290230 = [mnewString(0)];
				F.line = 129;
				if (fmt_res_290230[0] != null) { fmt_res_290230[0] = (fmt_res_290230[0]).concat(makeNimstrLit("  ")); } else { fmt_res_290230[0] = makeNimstrLit("  "); };
				F.line = 129;
				format_value_287691(fmt_res_290230, 0, obj_name_290195, []);
				F.line = 129;
				if (fmt_res_290230[0] != null) { fmt_res_290230[0] = (fmt_res_290230[0]).concat(makeNimstrLit(" = seq[")); } else { fmt_res_290230[0] = makeNimstrLit(" = seq["); };
				F.line = 129;
				format_value_287691(fmt_res_290230, 0, t_290229, []);
				F.line = 129;
				if (fmt_res_290230[0] != null) { fmt_res_290230[0] = (fmt_res_290230[0]).concat(makeNimstrLit("]\x0A")); } else { fmt_res_290230[0] = makeNimstrLit("]\x0A"); };
				if (result_290197 != null) { result_290197 = (result_290197).concat(fmt_res_290230[0]); } else { result_290197 = fmt_res_290230[0].slice(); };
				break;
			}
			}
			
			break;
		default: 
			break;
		}
	framePtr = F.prev;

	return result_290197;

}

function get_var_type_281909(x_281911) {
	var result_281912 = 0;

	var F={procname:"json.getVarType",prev:framePtr,filename:"/home/travis/.choosenim/toolchains/nim-#v0.20.0/lib/pure/json.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 871;
		result_281912 = 0;
		F.line = 874;
		switch (toJSStr(cstrToNimstr(Object.prototype.toString.call(x_281911)))) {
		case "[object Array]":
			F.line = 875;
			result_281912 = 6;
			break BeforeRet;
			break;
		case "[object Object]":
			F.line = 876;
			result_281912 = 5;
			break BeforeRet;
			break;
		case "[object Number]":
			if ((x_281911 % 1.0000000000000000e+00 == 0.0)) {
			F.line = 879;
			result_281912 = 2;
			break BeforeRet;
			}
			else {
				F.line = 881;
				result_281912 = 3;
				break BeforeRet;
			}
			
			break;
		case "[object Boolean]":
			F.line = 882;
			result_281912 = 1;
			break BeforeRet;
			break;
		case "[object Null]":
			F.line = 883;
			result_281912 = 0;
			break BeforeRet;
			break;
		case "[object String]":
			F.line = 884;
			result_281912 = 4;
			break BeforeRet;
			break;
		default: 
			if (true) {
			F.line = 885;
			failed_assert_impl_100055(makeNimstrLit("/home/travis/.choosenim/toolchains/nim-#v0.20.0/lib/pure/json.nim(885, 18) `false` "));
			}
			
			break;
		}
	} while (false);
	framePtr = F.prev;

	return result_281912;

}

function new_jarray_264451() {
	var result_264453 = null;

	var F={procname:"json.newJArray",prev:framePtr,filename:"/home/travis/.choosenim/toolchains/nim-#v0.20.0/lib/pure/json.nim",line:0};
	framePtr = F;
		F.line = 219;
		result_264453 = {kind: 6, elems: [], str: null, num: 0, fnum: 0.0, bval: false, fields: {data: null, counter: 0, first: 0, last: 0}};
	framePtr = F.prev;

	return result_264453;

}

function len_282029(x_282031) {
	var result_282032 = 0;

	var F={procname:"json.len",prev:framePtr,filename:"/home/travis/.choosenim/toolchains/nim-#v0.20.0/lib/pure/json.nim",line:0};
	framePtr = F;
		if (!((get_var_type_281909(x_282031) == 6))) {
		F.line = 888;
		failed_assert_impl_100055(makeNimstrLit("/home/travis/.choosenim/toolchains/nim-#v0.20.0/lib/pure/json.nim(888, 12) `x.getVarType == JArray` "));
		}
		
		F.line = 889;
		      result_282032 = x_282031.length;
    
	framePtr = F.prev;

	return result_282032;

}

function add_264785(father_264787, child_264788) {
		var Tmp1;
		var Tmp2;

	var F={procname:"json.add",prev:framePtr,filename:"/home/travis/.choosenim/toolchains/nim-#v0.20.0/lib/pure/json.nim",line:0};
	framePtr = F;
		if (!((father_264787.kind == 6))) {
		F.line = 289;
		failed_assert_impl_100055(makeNimstrLit("/home/travis/.choosenim/toolchains/nim-#v0.20.0/lib/pure/json.nim(289, 10) `father.kind == JArray` "));
		}
		
		F.line = 290;
		var Tmp1 = father_264787;
		if (ConstSet15[Tmp1.kind]===undefined) { raiseFieldError(makeNimstrLit("elems")); }
		if ((Tmp2 = Tmp1.elems, Tmp2) != null) { Tmp2.push(child_264788); } else { Tmp2 = [child_264788]; };
	framePtr = F.prev;

	
}

function HEX5BHEX5D_282414(x_282416, y_282417) {
	var result_282418 = {};

	var F={procname:"json.[]",prev:framePtr,filename:"/home/travis/.choosenim/toolchains/nim-#v0.20.0/lib/pure/json.nim",line:0};
	framePtr = F;
		if (!((get_var_type_281909(x_282416) == 6))) {
		F.line = 900;
		failed_assert_impl_100055(makeNimstrLit("/home/travis/.choosenim/toolchains/nim-#v0.20.0/lib/pure/json.nim(900, 12) `x.getVarType == JArray` "));
		}
		
		F.line = 901;
		      result_282418 = x_282416[y_282417];
    
	framePtr = F.prev;

	return result_282418;

}

function is_power_of_two_144062(x_144064) {
		var Tmp1;

	var result_144065 = false;

	BeforeRet: do {
		if (!(0 < x_144064)) Tmp1 = false; else {			Tmp1 = ((x_144064 & (x_144064 - 1)) == 0);		}		result_144065 = Tmp1;
		break BeforeRet;
	} while (false);

	return result_144065;

}

function init_ordered_table_264383(initialsize_264387) {
	var result_264389 = {data: null, counter: 0, first: 0, last: 0};

	var F={procname:"initOrderedTable.initOrderedTable",prev:framePtr,filename:"/home/travis/.choosenim/toolchains/nim-#v0.20.0/lib/pure/collections/tables.nim",line:0};
	framePtr = F;
		if (!(is_power_of_two_144062(initialsize_264387))) {
		F.line = 118;
		failed_assert_impl_100055(makeNimstrLit("/home/travis/.choosenim/toolchains/nim-#v0.20.0/lib/pure/collections/tableimpl.nim(118, 10) `isPowerOfTwo(initialsize)` "));
		}
		
		F.line = 119;
		result_264389.counter = 0;
		F.line = 1284;
		result_264389.data = new Array(chckRange(initialsize_264387, 0, 2147483647)); for (var i=0;i<chckRange(initialsize_264387, 0, 2147483647);++i) {result_264389.data[i]={Field0: 0, Field1: 0, Field2: null, Field3: null};}		F.line = 1285;
		result_264389.first = -1;
		F.line = 1286;
		result_264389.last = -1;
	framePtr = F.prev;

	return result_264389;

}

function new_jobject_264378() {
	var result_264380 = null;

	var F={procname:"json.newJObject",prev:framePtr,filename:"/home/travis/.choosenim/toolchains/nim-#v0.20.0/lib/pure/json.nim",line:0};
	framePtr = F;
		F.line = 215;
		result_264380 = {kind: 5, fields: init_ordered_table_264383(4), str: null, num: 0, fnum: 0.0, bval: false, elems: null};
	framePtr = F.prev;

	return result_264380;

}

function HEX21HEX26_244031(h_244033, val_244034) {
	var result_244035 = 0;

	var F={procname:"hashes.!&",prev:framePtr,filename:"/home/travis/.choosenim/toolchains/nim-#v0.20.0/lib/pure/hashes.nim",line:0};
	framePtr = F;
		F.line = 63;
		var h_244036 = (h_244033 >>> 0);
		F.line = 64;
		var val_244037 = (val_244034 >>> 0);
		F.line = 65;
		var res_244043 = ((h_244036 + val_244037) >>> 0);
		F.line = 66;
		res_244043 = ((res_244043 + (res_244043 << 10)) >>> 0);
		F.line = 67;
		res_244043 = (res_244043 ^ ((res_244043 >>> 0) >>> 6));
		F.line = 68;
		result_244035 = (res_244043|0);
	framePtr = F.prev;

	return result_244035;

}

function hash_244869(x_244871) {
	var result_244872 = 0;

	var F={procname:"hashes.hash",prev:framePtr,filename:"/home/travis/.choosenim/toolchains/nim-#v0.20.0/lib/pure/hashes.nim",line:0};
	framePtr = F;
		F.line = 141;
		result_244872 = x_244871;
	framePtr = F.prev;

	return result_244872;

}

function HEX21HEX24_244081(h_244083) {
	var result_244084 = 0;

	var F={procname:"hashes.!$",prev:framePtr,filename:"/home/travis/.choosenim/toolchains/nim-#v0.20.0/lib/pure/hashes.nim",line:0};
	framePtr = F;
		F.line = 74;
		var h_244085 = (h_244083 >>> 0);
		F.line = 75;
		var res_244098 = ((h_244085 + (h_244085 << 3)) >>> 0);
		F.line = 76;
		res_244098 = (res_244098 ^ ((res_244098 >>> 0) >>> 11));
		F.line = 77;
		res_244098 = ((res_244098 + (res_244098 << 15)) >>> 0);
		F.line = 78;
		result_244084 = (res_244098|0);
	framePtr = F.prev;

	return result_244084;

}

function hash_244968(x_244970) {
	var result_244971 = 0;

	var F={procname:"hashes.hash",prev:framePtr,filename:"/home/travis/.choosenim/toolchains/nim-#v0.20.0/lib/pure/hashes.nim",line:0};
	framePtr = F;
		F.line = 159;
		var element_size_244973 = 1;
		F.line = 160;
		var step_size_244974 = divInt(4, element_size_244973);
		F.line = 161;
		var i_244975 = 0;
		L1: do {
			F.line = 162;
				L2: while (true) {
				if (!(i_244975 <= subInt(addInt((x_244970 != null ? (x_244970.length-1) : -1), 1), step_size_244974))) break L2;
					F.line = 163;
					var n_244976 = 0;
					F.line = 169;
					n_244976 = x_244970[chckIndx(i_244975, 0, x_244970.length+0-1)-0];
					F.line = 170;
					result_244971 = HEX21HEX26_244031(result_244971, n_244976);
					F.line = 171;
					i_244975 = addInt(i_244975, step_size_244974);
				}
		} while(false);
		L3: do {
			F.line = 153;
			var i_245207 = 0;
			F.line = 2610;
			var colontmp__291161 = 0;
			F.line = 183;
			colontmp__291161 = (x_244970 != null ? (x_244970.length-1) : -1);
			F.line = 2620;
			var res_291162 = i_244975;
			L4: do {
				F.line = 2621;
					L5: while (true) {
					if (!(res_291162 <= colontmp__291161)) break L5;
						F.line = 153;
						i_245207 = res_291162;
						F.line = 154;
						result_244971 = HEX21HEX26_244031(result_244971, hash_244869(x_244970[chckIndx(i_245207, 0, x_244970.length+0-1)-0]));
						F.line = 2623;
						res_291162 = addInt(res_291162, 1);
					}
			} while(false);
		} while(false);
		F.line = 155;
		result_244971 = HEX21HEX24_244081(result_244971);
	framePtr = F.prev;

	return result_244971;

}

function next_try_248435(h_248437, max_hash_248438) {
	var result_248439 = 0;

	var F={procname:"tables.nextTry",prev:framePtr,filename:"/home/travis/.choosenim/toolchains/nim-#v0.20.0/lib/pure/collections/hashcommon.nim",line:0};
	framePtr = F;
		F.line = 30;
		result_248439 = (addInt(h_248437, 1) & max_hash_248438);
	framePtr = F.prev;

	return result_248439;

}

function raw_get_265428(t_265433, key_265434, hc_265435, hc_265435_Idx) {
						var Tmp3;

	var result_265436 = 0;

	var F={procname:"rawGet.rawGet",prev:framePtr,filename:"/home/travis/.choosenim/toolchains/nim-#v0.20.0/lib/pure/collections/tables.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 54;
		hc_265435[hc_265435_Idx] = hash_244968(key_265434);
		if ((hc_265435[hc_265435_Idx] == 0)) {
		F.line = 56;
		hc_265435[hc_265435_Idx] = 314159265;
		}
		
		if (((t_265433.data != null ? t_265433.data.length : 0) == 0)) {
		F.line = 38;
		result_265436 = -1;
		break BeforeRet;
		}
		
		F.line = 39;
		var h_265578 = (hc_265435[hc_265435_Idx] & (t_265433.data != null ? (t_265433.data.length-1) : -1));
		L1: do {
			F.line = 40;
				L2: while (true) {
				if (!is_filled_248418(t_265433.data[chckIndx(h_265578, 0, t_265433.data.length+0-1)-0].Field0)) break L2;
						if (!(t_265433.data[chckIndx(h_265578, 0, t_265433.data.length+0-1)-0].Field0 == hc_265435[hc_265435_Idx])) Tmp3 = false; else {							Tmp3 = eqStrings(t_265433.data[chckIndx(h_265578, 0, t_265433.data.length+0-1)-0].Field2, key_265434);						}					if (Tmp3) {
					F.line = 46;
					result_265436 = h_265578;
					break BeforeRet;
					}
					
					F.line = 47;
					h_265578 = next_try_248435(h_265578, (t_265433.data != null ? (t_265433.data.length-1) : -1));
				}
		} while(false);
		F.line = 48;
		result_265436 = subInt(-1, h_265578);
	} while (false);
	framePtr = F.prev;

	return result_265436;

}

function must_rehash_248453(length_248455, counter_248456) {
	var result_248457 = false;

	var F={procname:"tables.mustRehash",prev:framePtr,filename:"/home/travis/.choosenim/toolchains/nim-#v0.20.0/lib/pure/collections/hashcommon.nim",line:0};
	framePtr = F;
		if (!((counter_248456 < length_248455))) {
		F.line = 33;
		failed_assert_impl_100055(makeNimstrLit("/home/travis/.choosenim/toolchains/nim-#v0.20.0/lib/pure/collections/hashcommon.nim(33, 9) `length > counter` "));
		}
		
		F.line = 34;
		result_248457 = ((mulInt(length_248455, 2) < mulInt(counter_248456, 3)) || (subInt(length_248455, counter_248456) < 4));
	framePtr = F.prev;

	return result_248457;

}

function raw_insert_267672(t_267678, data_267681, data_267681_Idx, key_267682, val_267683, hc_267684, h_267685) {
	var F={procname:"rawInsert.rawInsert",prev:framePtr,filename:"/home/travis/.choosenim/toolchains/nim-#v0.20.0/lib/pure/collections/tables.nim",line:0};
	framePtr = F;
		F.line = 22;
		data_267681[data_267681_Idx][chckIndx(h_267685, 0, data_267681[data_267681_Idx].length+0-1)-0].Field2 = nimCopy(null, key_267682, NTI86040);
		F.line = 23;
		data_267681[data_267681_Idx][chckIndx(h_267685, 0, data_267681[data_267681_Idx].length+0-1)-0].Field3 = val_267683;
		F.line = 24;
		data_267681[data_267681_Idx][chckIndx(h_267685, 0, data_267681[data_267681_Idx].length+0-1)-0].Field0 = hc_267684;
		F.line = 1233;
		data_267681[data_267681_Idx][chckIndx(h_267685, 0, data_267681[data_267681_Idx].length+0-1)-0].Field1 = -1;
		if ((t_267678.first < 0)) {
		F.line = 1234;
		t_267678.first = h_267685;
		}
		
		if ((0 <= t_267678.last)) {
		F.line = 1235;
		data_267681[data_267681_Idx][chckIndx(t_267678.last, 0, data_267681[data_267681_Idx].length+0-1)-0].Field1 = h_267685;
		}
		
		F.line = 1236;
		t_267678.last = h_267685;
	framePtr = F.prev;

	
}

function enlarge_266574(t_266580) {
	var F={procname:"enlarge.enlarge",prev:framePtr,filename:"/home/travis/.choosenim/toolchains/nim-#v0.20.0/lib/pure/collections/tables.nim",line:0};
	framePtr = F;
		F.line = 1239;
		var n_266588 = null;
		F.line = 1240;
		n_266588 = new Array(chckRange(mulInt((t_266580.data != null ? t_266580.data.length : 0), 2), 0, 2147483647)); for (var i=0;i<chckRange(mulInt((t_266580.data != null ? t_266580.data.length : 0), 2), 0, 2147483647);++i) {n_266588[i]={Field0: 0, Field1: 0, Field2: null, Field3: null};}		F.line = 1241;
		var h_266727 = t_266580.first;
		F.line = 1242;
		t_266580.first = -1;
		F.line = 1243;
		t_266580.last = -1;
		F.line = 1244;
		var Tmp1 = t_266580.data; t_266580.data = n_266588; n_266588 = Tmp1;		L2: do {
			F.line = 1245;
				L3: while (true) {
				if (!(0 <= h_266727)) break L3;
					F.line = 1246;
					var nxt_266886 = n_266588[chckIndx(h_266727, 0, n_266588.length+0-1)-0].Field1;
					F.line = 1247;
					var eh_267035 = n_266588[chckIndx(h_266727, 0, n_266588.length+0-1)-0].Field0;
					if (is_filled_248418(eh_267035)) {
					F.line = 1249;
					var j_267042 = (eh_267035 & (t_266580.data != null ? (t_266580.data.length-1) : -1));
					L4: do {
						F.line = 1250;
							L5: while (true) {
							if (!is_filled_248418(t_266580.data[chckIndx(j_267042, 0, t_266580.data.length+0-1)-0].Field0)) break L5;
								F.line = 1251;
								j_267042 = next_try_248435(j_267042, (t_266580.data != null ? (t_266580.data.length-1) : -1));
							}
					} while(false);
					F.line = 1252;
					raw_insert_267672(t_266580, t_266580, "data", n_266588[chckIndx(h_266727, 0, n_266588.length+0-1)-0].Field2, n_266588[chckIndx(h_266727, 0, n_266588.length+0-1)-0].Field3, n_266588[chckIndx(h_266727, 0, n_266588.length+0-1)-0].Field0, j_267042);
					}
					
					F.line = 1253;
					h_266727 = nxt_266886;
				}
		} while(false);
	framePtr = F.prev;

	
}

function raw_get_known_hc_268489(t_268494, key_268495, hc_268496) {
	var result_268497 = 0;

	var F={procname:"rawGetKnownHC.rawGetKnownHC",prev:framePtr,filename:"/home/travis/.choosenim/toolchains/nim-#v0.20.0/lib/pure/collections/tables.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		if (((t_268494.data != null ? t_268494.data.length : 0) == 0)) {
		F.line = 38;
		result_268497 = -1;
		break BeforeRet;
		}
		
		F.line = 39;
		var h_268636 = (hc_268496 & (t_268494.data != null ? (t_268494.data.length-1) : -1));
		L1: do {
			F.line = 40;
				L2: while (true) {
				if (!is_filled_248418(t_268494.data[chckIndx(h_268636, 0, t_268494.data.length+0-1)-0].Field0)) break L2;
					if (((t_268494.data[chckIndx(h_268636, 0, t_268494.data.length+0-1)-0].Field0 == hc_268496) && eqStrings(t_268494.data[chckIndx(h_268636, 0, t_268494.data.length+0-1)-0].Field2, key_268495))) {
					F.line = 46;
					result_268497 = h_268636;
					break BeforeRet;
					}
					
					F.line = 47;
					h_268636 = next_try_248435(h_268636, (t_268494.data != null ? (t_268494.data.length-1) : -1));
				}
		} while(false);
		F.line = 48;
		result_268497 = subInt(-1, h_268636);
	} while (false);
	framePtr = F.prev;

	return result_268497;

}

function HEX5BHEX5DHEX3D_265111(t_265117, key_265118, val_265119) {
	var F={procname:"[]=.[]=",prev:framePtr,filename:"/home/travis/.choosenim/toolchains/nim-#v0.20.0/lib/pure/collections/tables.nim",line:0};
	framePtr = F;
		if (((t_265117.data != null ? t_265117.data.length : 0) == 0)) {
		if (!(is_power_of_two_144062(64))) {
		F.line = 118;
		failed_assert_impl_100055(makeNimstrLit("/home/travis/.choosenim/toolchains/nim-#v0.20.0/lib/pure/collections/tableimpl.nim(118, 10) `isPowerOfTwo(defaultInitialSize)` "));
		}
		
		F.line = 119;
		t_265117.counter = 0;
		F.line = 54;
		t_265117.data = new Array(64); for (var i=0;i<64;++i) {t_265117.data[i]={Field0: 0, Field1: 0, Field2: null, Field3: null};}		}
		
		F.line = 55;
		var hc_265408 = [0];
		F.line = 56;
		var index_266046 = raw_get_265428(t_265117, key_265118, hc_265408, 0);
		if ((0 <= index_266046)) {
		F.line = 57;
		t_265117.data[chckIndx(index_266046, 0, t_265117.data.length+0-1)-0].Field3 = val_265119;
		}
		else {
			if (((t_265117.data != null ? t_265117.data.length : 0) == 0)) {
			if (!(is_power_of_two_144062(64))) {
			F.line = 118;
			failed_assert_impl_100055(makeNimstrLit("/home/travis/.choosenim/toolchains/nim-#v0.20.0/lib/pure/collections/tableimpl.nim(118, 10) `isPowerOfTwo(defaultInitialSize)` "));
			}
			
			F.line = 119;
			t_265117.counter = 0;
			F.line = 44;
			t_265117.data = new Array(64); for (var i=0;i<64;++i) {t_265117.data[i]={Field0: 0, Field1: 0, Field2: null, Field3: null};}			}
			
			if (must_rehash_248453((t_265117.data != null ? t_265117.data.length : 0), t_265117.counter)) {
			F.line = 46;
			enlarge_266574(t_265117);
			F.line = 47;
			index_266046 = raw_get_known_hc_268489(t_265117, key_265118, hc_265408[0]);
			}
			
			F.line = 48;
			index_266046 = subInt(-1, index_266046);
			F.line = 49;
			raw_insert_267672(t_265117, t_265117, "data", key_265118, val_265119, hc_265408[0], index_266046);
			F.line = 58;
			t_265117.counter = addInt(t_265117.counter, 1);
		}
		
	framePtr = F.prev;

	
}

function HEX5BHEX5DHEX3D_269614(obj_269616, key_269617, val_269618) {
		var Tmp1;

	var F={procname:"json.[]=",prev:framePtr,filename:"/home/travis/.choosenim/toolchains/nim-#v0.20.0/lib/pure/json.nim",line:0};
	framePtr = F;
		if (!((obj_269616.kind == 5))) {
		F.line = 363;
		failed_assert_impl_100055(makeNimstrLit("/home/travis/.choosenim/toolchains/nim-#v0.20.0/lib/pure/json.nim(363, 9) `obj.kind == JObject` "));
		}
		
		F.line = 364;
		var Tmp1 = obj_269616;
		if (ConstSet16[Tmp1.kind]===undefined) { raiseFieldError(makeNimstrLit("fields")); }
		HEX5BHEX5DHEX3D_265111(Tmp1.fields, key_269617, val_269618);
	framePtr = F.prev;

	
}

function new_jint_264311(n_264313) {
	var result_264314 = null;

	var F={procname:"json.newJInt",prev:framePtr,filename:"/home/travis/.choosenim/toolchains/nim-#v0.20.0/lib/pure/json.nim",line:0};
	framePtr = F;
		F.line = 199;
		result_264314 = {kind: 2, num: n_264313, str: null, fnum: 0.0, bval: false, fields: {data: null, counter: 0, first: 0, last: 0}, elems: null};
	framePtr = F.prev;

	return result_264314;

}

function new_jfloat_264328(n_264330) {
	var result_264331 = null;

	var F={procname:"json.newJFloat",prev:framePtr,filename:"/home/travis/.choosenim/toolchains/nim-#v0.20.0/lib/pure/json.nim",line:0};
	framePtr = F;
		F.line = 203;
		result_264331 = {kind: 3, fnum: n_264330, str: null, num: 0, bval: false, fields: {data: null, counter: 0, first: 0, last: 0}, elems: null};
	framePtr = F.prev;

	return result_264331;

}

function new_jstring_264261(s_264263) {
	var result_264264 = null;

	var F={procname:"json.newJString",prev:framePtr,filename:"/home/travis/.choosenim/toolchains/nim-#v0.20.0/lib/pure/json.nim",line:0};
	framePtr = F;
		F.line = 191;
		result_264264 = {kind: 4, str: nimCopy(null, s_264263, NTI86040), num: 0, fnum: 0.0, bval: false, fields: {data: null, counter: 0, first: 0, last: 0}, elems: null};
	framePtr = F.prev;

	return result_264264;

}

function new_jbool_264345(b_264347) {
	var result_264348 = null;

	var F={procname:"json.newJBool",prev:framePtr,filename:"/home/travis/.choosenim/toolchains/nim-#v0.20.0/lib/pure/json.nim",line:0};
	framePtr = F;
		F.line = 207;
		result_264348 = {kind: 1, bval: b_264347, str: null, num: 0, fnum: 0.0, fields: {data: null, counter: 0, first: 0, last: 0}, elems: null};
	framePtr = F.prev;

	return result_264348;

}

function new_jnull_264362() {
	var result_264364 = null;

	var F={procname:"json.newJNull",prev:framePtr,filename:"/home/travis/.choosenim/toolchains/nim-#v0.20.0/lib/pure/json.nim",line:0};
	framePtr = F;
		F.line = 211;
		result_264364 = {kind: 0, str: null, num: 0, fnum: 0.0, bval: false, fields: {data: null, counter: 0, first: 0, last: 0}, elems: null};
	framePtr = F.prev;

	return result_264364;

}

function convert_object_282614(x_282616) {
	var result_282617 = null;

	var F={procname:"json.convertObject",prev:framePtr,filename:"/home/travis/.choosenim/toolchains/nim-#v0.20.0/lib/pure/json.nim",line:0};
	framePtr = F;
		F.line = 906;
		switch (get_var_type_281909(x_282616)) {
		case 6:
			F.line = 908;
			result_282617 = new_jarray_264451();
			L1: do {
				F.line = 909;
				var i_282624 = 0;
				F.line = 2647;
				var colontmp__291139 = 0;
				F.line = 909;
				colontmp__291139 = len_282029(x_282616);
				F.line = 2648;
				var i_291140 = 0;
				L2: do {
					F.line = 2649;
						L3: while (true) {
						if (!(i_291140 < colontmp__291139)) break L3;
							F.line = 909;
							i_282624 = i_291140;
							F.line = 910;
							add_264785(result_282617, convert_object_282614(HEX5BHEX5D_282414(x_282616, i_282624)));
							F.line = 2651;
							i_291140 = addInt(i_291140, 1);
						}
				} while(false);
			} while(false);
			break;
		case 5:
			F.line = 912;
			result_282617 = new_jobject_264378();
			F.line = 913;
			for (var property in x_282616) {
        if (x_282616.hasOwnProperty(property)) {
      
			F.line = 916;
			var nim_property_282626 = null;
			F.line = 917;
			var nim_value_282627 = {};
			F.line = 918;
			nim_property_282626 = property; nim_value_282627 = x_282616[property];
			F.line = 919;
			HEX5BHEX5DHEX3D_269614(result_282617, cstrToNimstr(nim_property_282626), convert_object_282614(nim_value_282627));
			F.line = 920;
			}}
			break;
		case 2:
			F.line = 922;
			result_282617 = new_jint_264311(x_282616);
			break;
		case 3:
			F.line = 924;
			result_282617 = new_jfloat_264328(x_282616);
			break;
		case 4:
			F.line = 926;
			result_282617 = new_jstring_264261(cstrToNimstr(x_282616));
			break;
		case 1:
			F.line = 928;
			result_282617 = new_jbool_264345(x_282616);
			break;
		case 0:
			F.line = 930;
			result_282617 = new_jnull_264362();
			break;
		}
	framePtr = F.prev;

	return result_282617;

}

function parse_json_282656(buffer_282658) {
	var result_282659 = null;

	var F={procname:"json.parseJson",prev:framePtr,filename:"/home/travis/.choosenim/toolchains/nim-#v0.20.0/lib/pure/json.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 933;
		result_282659 = convert_object_282614(JSON.parse(toJSStr(buffer_282658)));
		break BeforeRet;
	} while (false);
	framePtr = F.prev;

	return result_282659;

}

function generateNimDefinitions(str_291029, public_field_291030) {
	var result_291031 = null;

	var F={procname:"nimjson_js.generateNimDefinitions",prev:framePtr,filename:"/home/travis/build/jiro4989/nimjson/js/nimjson_js.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 5;
		result_291031 = toJSStr(to_type_string_290192(parse_json_282656(cstrToNimstr(str_291029)), makeNimstrLit("Object"), public_field_291030));
		break BeforeRet;
	} while (false);
	framePtr = F.prev;

	return result_291031;

}
