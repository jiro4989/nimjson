/* Generated by the Nim Compiler v0.20.2 */
/*   (c) 2019 Andreas Rumpf */

var framePtr = null;
var excHandler = 0;
var lastJSError = null;
if (typeof Int8Array === 'undefined') Int8Array = Array;
if (typeof Int16Array === 'undefined') Int16Array = Array;
if (typeof Int32Array === 'undefined') Int32Array = Array;
if (typeof Uint8Array === 'undefined') Uint8Array = Array;
if (typeof Uint16Array === 'undefined') Uint16Array = Array;
if (typeof Uint32Array === 'undefined') Uint32Array = Array;
if (typeof Float32Array === 'undefined') Float32Array = Array;
if (typeof Float64Array === 'undefined') Float64Array = Array;
var NTI47850 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI222245 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI44032 = {size: 0,kind: 1,base: null,node: null,finalizer: null};
var NTI44026 = {size: 0,kind: 36,base: null,node: null,finalizer: null};
var NTI54087 = {size: 0,kind: 35,base: null,node: null,finalizer: null};
var NTI222202 = {size: 0, kind: 14, base: null, node: null, finalizer: null};
var NTI222206 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI222204 = {size: 0,kind: 22,base: null,node: null,finalizer: null};
var NTI202015 = {size: 0,kind: 31,base: null,node: null,finalizer: null};
var NTI222234 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI222231 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI222228 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI47860 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI141832 = {size: 0,kind: 31,base: null,node: null,finalizer: null};
var NTI144647 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI47862 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI47830 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI47852 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI47844 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI47858 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI44006 = {size: 0,kind: 31,base: null,node: null,finalizer: null};
var NTI64156 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI47808 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI47914 = {size: 0,kind: 22,base: null,node: null,finalizer: null};
var NTI44016 = {size: 0,kind: 40,base: null,node: null,finalizer: null};
var NTI44042 = {size: 0,kind: 29,base: null,node: null,finalizer: null};
var NTI47908 = {size: 0,kind: 22,base: null,node: null,finalizer: null};
var NTI47826 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI47828 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI47842 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI47846 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI44040 = {size: 0,kind: 28,base: null,node: null,finalizer: null};
var NNI47846 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI47846.node = NNI47846;
var NNI47842 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI47842.node = NNI47842;
var NNI47828 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI47828.node = NNI47828;
NTI47908.base = NTI47826;
NTI47914.base = NTI47826;
var NNI47826 = {kind: 2, len: 6, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "parent", len: 0, typ: NTI47908, name: "parent", sons: null}, 
{kind: 1, offset: "name", len: 0, typ: NTI44042, name: "name", sons: null}, 
{kind: 1, offset: "message", len: 0, typ: NTI44040, name: "msg", sons: null}, 
{kind: 1, offset: "trace", len: 0, typ: NTI44040, name: "trace", sons: null}, 
{kind: 1, offset: "raiseId", len: 0, typ: NTI44016, name: "raiseId", sons: null}, 
{kind: 1, offset: "up", len: 0, typ: NTI47914, name: "up", sons: null}]};
NTI47826.node = NNI47826;
var NNI47808 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI47808.node = NNI47808;
NTI47826.base = NTI47808;
NTI47828.base = NTI47826;
NTI47842.base = NTI47828;
NTI47846.base = NTI47842;
var NNI64156 = {kind: 2, len: 2, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "Field0", len: 0, typ: NTI44042, name: "Field0", sons: null}, 
{kind: 1, offset: "Field1", len: 0, typ: NTI44006, name: "Field1", sons: null}]};
NTI64156.node = NNI64156;
var NNI47858 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI47858.node = NNI47858;
NTI47858.base = NTI47828;
var NNI47844 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI47844.node = NNI47844;
NTI47844.base = NTI47842;
var NNI47852 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI47852.node = NNI47852;
var NNI47830 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI47830.node = NNI47830;
NTI47830.base = NTI47826;
NTI47852.base = NTI47830;
var NNI47862 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI47862.node = NNI47862;
NTI47862.base = NTI47828;
var NNI144647 = {kind: 2, len: 2, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "a", len: 0, typ: NTI141832, name: "a", sons: null}, 
{kind: 1, offset: "b", len: 0, typ: NTI44006, name: "b", sons: null}]};
NTI144647.node = NNI144647;
var NNI47860 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI47860.node = NNI47860;
NTI47860.base = NTI47828;
var NNI222202 = {kind: 2, offset: 0, typ: null, name: null, len: 7, sons: {"0": {kind: 1, offset: 0, typ: NTI222202, name: "JNull", len: 0, sons: null}, 
"1": {kind: 1, offset: 1, typ: NTI222202, name: "JBool", len: 0, sons: null}, 
"2": {kind: 1, offset: 2, typ: NTI222202, name: "JInt", len: 0, sons: null}, 
"3": {kind: 1, offset: 3, typ: NTI222202, name: "JFloat", len: 0, sons: null}, 
"4": {kind: 1, offset: 4, typ: NTI222202, name: "JString", len: 0, sons: null}, 
"5": {kind: 1, offset: 5, typ: NTI222202, name: "JObject", len: 0, sons: null}, 
"6": {kind: 1, offset: 6, typ: NTI222202, name: "JArray", len: 0, sons: null}}};
NTI222202.node = NNI222202;
NTI222245.base = NTI222204;
var NNI222206 = {kind: 3, offset: "kind", len: 7, typ: NTI222202, name: "kind", sons: [[setConstr(4), {kind: 1, offset: "str", len: 0, typ: NTI44040, name: "str", sons: null}], 
[setConstr(2), {kind: 1, offset: "num", len: 0, typ: NTI54087, name: "num", sons: null}], 
[setConstr(3), {kind: 1, offset: "fnum", len: 0, typ: NTI44026, name: "fnum", sons: null}], 
[setConstr(1), {kind: 1, offset: "bval", len: 0, typ: NTI44032, name: "bval", sons: null}], 
[setConstr(0), {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []}], 
[setConstr(5), {kind: 1, offset: "fields", len: 0, typ: NTI222228, name: "fields", sons: null}], 
[setConstr(6), {kind: 1, offset: "elems", len: 0, typ: NTI222245, name: "elems", sons: null}]]};
NTI222206.node = NNI222206;
NTI222204.base = NTI222206;
var NNI222234 = {kind: 2, len: 4, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "Field0", len: 0, typ: NTI202015, name: "Field0", sons: null}, 
{kind: 1, offset: "Field1", len: 0, typ: NTI44006, name: "Field1", sons: null}, 
{kind: 1, offset: "Field2", len: 0, typ: NTI44040, name: "Field2", sons: null}, 
{kind: 1, offset: "Field3", len: 0, typ: NTI222204, name: "Field3", sons: null}]};
NTI222234.node = NNI222234;
NTI222231.base = NTI222234;
var NNI222228 = {kind: 2, len: 4, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "data", len: 0, typ: NTI222231, name: "data", sons: null}, 
{kind: 1, offset: "counter", len: 0, typ: NTI44006, name: "counter", sons: null}, 
{kind: 1, offset: "first", len: 0, typ: NTI44006, name: "first", sons: null}, 
{kind: 1, offset: "last", len: 0, typ: NTI44006, name: "last", sons: null}]};
NTI222228.node = NNI222228;
var NNI47850 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI47850.node = NNI47850;
NTI47850.base = NTI47828;

function makeNimstrLit(c_66254) {
		  var ln = c_66254.length;
  var result = new Array(ln);
  for (var i = 0; i < ln; ++i) {
    result[i] = c_66254.charCodeAt(i);
  }
  return result;
  

	
}

function setConstr() {
		    var result = {};
    for (var i = 0; i < arguments.length; ++i) {
      var x = arguments[i];
      if (typeof(x) == "object") {
        for (var j = x[0]; j <= x[1]; ++j) {
          result[j] = true;
        }
      } else {
        result[x] = true;
      }
    }
    return result;
  

	
}
var ConstSet1 = setConstr(17, 16, 4, 18, 27, 19, 23, 22, 21);

function nimCopy(dest_67427, src_67428, ti_67429) {
	var result_67619 = null;

		switch (ti_67429.kind) {
		case 21:
		case 22:
		case 23:
		case 5:
			if (!(is_fat_pointer_67401(ti_67429))) {
			result_67619 = src_67428;
			}
			else {
				result_67619 = [src_67428[0], src_67428[1]];
			}
			
			break;
		case 19:
			      if (dest_67427 === null || dest_67427 === undefined) {
        dest_67427 = {};
      }
      else {
        for (var key in dest_67427) { delete dest_67427[key]; }
      }
      for (var key in src_67428) { dest_67427[key] = src_67428[key]; }
      result_67619 = dest_67427;
    
			break;
		case 18:
		case 17:
			if (!((ti_67429.base == null))) {
			result_67619 = nimCopy(dest_67427, src_67428, ti_67429.base);
			}
			else {
			if ((ti_67429.kind == 17)) {
			result_67619 = (dest_67427 === null || dest_67427 === undefined) ? {m_type: ti_67429} : dest_67427;
			}
			else {
				result_67619 = (dest_67427 === null || dest_67427 === undefined) ? {} : dest_67427;
			}
			}
			nimCopyAux(result_67619, src_67428, ti_67429.node);
			break;
		case 24:
		case 4:
		case 27:
		case 16:
			      if (src_67428 === null) {
        result_67619 = null;
      }
      else {
        if (dest_67427 === null || dest_67427 === undefined) {
          dest_67427 = new Array(src_67428.length);
        }
        else {
          dest_67427.length = src_67428.length;
        }
        result_67619 = dest_67427;
        for (var i = 0; i < src_67428.length; ++i) {
          result_67619[i] = nimCopy(result_67619[i], src_67428[i], ti_67429.base);
        }
      }
    
			break;
		case 28:
			      if (src_67428 !== null) {
        result_67619 = src_67428.slice(0);
      }
    
			break;
		default: 
			result_67619 = src_67428;
			break;
		}

	return result_67619;

}

function mnewString(len_66305) {
		    return new Array(len_66305);
  

	
}

function arrayConstr(len_67686, value_67687, typ_67688) {
		    var result = new Array(len_67686);
    for (var i = 0; i < len_67686; ++i) result[i] = nimCopy(null, value_67687, typ_67688);
    return result;
  

	
}

function cstrToNimstr(c_66271) {
		  var ln = c_66271.length;
  var result = new Array(ln);
  var r = 0;
  for (var i = 0; i < ln; ++i) {
    var ch = c_66271.charCodeAt(i);

    if (ch < 128) {
      result[r] = ch;
    }
    else {
      if (ch < 2048) {
        result[r] = (ch >> 6) | 192;
      }
      else {
        if (ch < 55296 || ch >= 57344) {
          result[r] = (ch >> 12) | 224;
        }
        else {
            ++i;
            ch = 65536 + (((ch & 1023) << 10) | (c_66271.charCodeAt(i) & 1023));
            result[r] = (ch >> 18) | 240;
            ++r;
            result[r] = ((ch >> 12) & 63) | 128;
        }
        ++r;
        result[r] = ((ch >> 6) & 63) | 128;
      }
      ++r;
      result[r] = (ch & 63) | 128;
    }
    ++r;
  }
  return result;
  

	
}

function toJSStr(s_66288) {
		  if (s_66288 === null) return "";
  var len = s_66288.length;
  var asciiPart = new Array(len);
  var fcc = String.fromCharCode;
  var nonAsciiPart = null;
  var nonAsciiOffset = 0;
  for (var i = 0; i < len; ++i) {
    if (nonAsciiPart !== null) {
      var offset = (i - nonAsciiOffset) * 2;
      var code = s_66288[i].toString(16);
      if (code.length == 1) {
        code = "0"+code;
      }
      nonAsciiPart[offset] = "%";
      nonAsciiPart[offset + 1] = code;
    }
    else if (s_66288[i] < 128)
      asciiPart[i] = fcc(s_66288[i]);
    else {
      asciiPart.length = i;
      nonAsciiOffset = i;
      nonAsciiPart = new Array((len - i) * 2);
      --i;
    }
  }
  asciiPart = asciiPart.join("");
  return (nonAsciiPart === null) ?
      asciiPart : asciiPart + decodeURIComponent(nonAsciiPart.join(""));
  

	
}

function raiseException(e_64618, ename_64619) {
		e_64618.name = ename_64619;
		if ((excHandler == 0)) {
		unhandledException(e_64618);
		}
		
		e_64618.trace = nimCopy(null, raw_write_stack_trace_64468(), NTI44040);
		throw e_64618;

	
}

function addInt(a_66603, b_66604) {
		    var result = a_66603 + b_66604;
    if (result > 2147483647 || result < -2147483648) raiseOverflow();
    return result;
  

	
}
var ConstSet2 = setConstr(60, 62, 94);

function chckIndx(i_67705, a_67706, b_67707) {
			var Tmp1;

	var result_67708 = 0;

	BeforeRet: do {
			if (!(a_67706 <= i_67705)) Tmp1 = false; else {				Tmp1 = (i_67705 <= b_67707);			}		if (Tmp1) {
		result_67708 = i_67705;
		break BeforeRet;
		}
		else {
		raiseIndexError(i_67705, a_67706, b_67707);
		}
		
	} while (false);

	return result_67708;

}
var ConstSet3 = setConstr(60, 62, 94);
var ConstSet4 = setConstr(45, 43, 32);
var ConstSet5 = setConstr([48, 57]);
var ConstSet6 = setConstr([48, 57]);
var ConstSet7 = setConstr([48, 57]);

function subInt(a_66621, b_66622) {
		    var result = a_66621 - b_66622;
    if (result > 2147483647 || result < -2147483648) raiseOverflow();
    return result;
  

	
}

function divInt(a_66657, b_66658) {
		    if (b_66658 == 0) raiseDivByZero();
    if (b_66658 == -1 && a_66657 == 2147483647) raiseOverflow();
    return Math.trunc(a_66657 / b_66658);
  

	
}

function mulInt(a_66639, b_66640) {
		    var result = a_66639 * b_66640;
    if (result > 2147483647 || result < -2147483648) raiseOverflow();
    return result;
  

	
}
var ConstSet8 = setConstr([65, 90], [97, 122]);

function chckRange(i_67724, a_67725, b_67726) {
			var Tmp1;

	var result_67727 = 0;

	BeforeRet: do {
			if (!(a_67725 <= i_67724)) Tmp1 = false; else {				Tmp1 = (i_67724 <= b_67726);			}		if (Tmp1) {
		result_67727 = i_67724;
		break BeforeRet;
		}
		else {
		raiseRangeError();
		}
		
	} while (false);

	return result_67727;

}
var ConstSet9 = setConstr([97, 122]);
var ConstSet10 = setConstr(5);

function raiseFieldError(f_66039) {
		var e_66042 = null;
		e_66042 = {m_type: NTI47860, parent: null, name: null, message: null, trace: null, raiseId: 0, up: null};
		e_66042.message = nimCopy(null, (f_66039 || []).concat(makeNimstrLit(" is not accessible") || []), NTI44040);
		e_66042.parent = null;
		raiseException(e_66042, "FieldError");

	
}
var ConstSet11 = setConstr(6);
var ConstSet12 = setConstr(6);
var ConstSet13 = setConstr(6);
var ConstSet14 = setConstr(6);
var ConstSet15 = setConstr(6);

function eqStrings(a_66483, b_66484) {
		    if (a_66483 == b_66484) return true;
    if (a_66483 === null && b_66484.length == 0) return true;
    if (b_66484 === null && a_66483.length == 0) return true;
    if ((!a_66483) || (!b_66484)) return false;
    var alen = a_66483.length;
    if (alen != b_66484.length) return false;
    for (var i = 0; i < alen; ++i)
      if (a_66483[i] != b_66484[i]) return false;
    return true;
  

	
}
var ConstSet16 = setConstr(5);
var nim_program_result = 0;
var global_raise_hook_61618 = [null];
var local_raise_hook_61623 = [null];
var out_of_mem_hook_61626 = [null];
  if (!Math.trunc) {
    Math.trunc = function(v) {
      v = +v;
      if (!isFinite(v)) return v;

      return (v - v % 1)   ||   (v < 0 ? -0 : v === 0 ? v : 0);
    };
  }
var object_id_202237 = [0];

function is_fat_pointer_67401(ti_67403) {
	var result_67404 = false;

	BeforeRet: do {
		result_67404 = !((ConstSet1[ti_67403.base.kind] != undefined));
		break BeforeRet;
	} while (false);

	return result_67404;

}

function nimCopyAux(dest_67432, src_67433, n_67435) {
		switch (n_67435.kind) {
		case 0:
			break;
		case 1:
			      dest_67432[n_67435.offset] = nimCopy(dest_67432[n_67435.offset], src_67433[n_67435.offset], n_67435.typ);
    
			break;
		case 2:
			    for (var i = 0; i < n_67435.sons.length; i++) {
      nimCopyAux(dest_67432, src_67433, n_67435.sons[i]);
    }
    
			break;
		case 3:
			      dest_67432[n_67435.offset] = nimCopy(dest_67432[n_67435.offset], src_67433[n_67435.offset], n_67435.typ);
      for (var i = 0; i < n_67435.sons.length; ++i) {
        nimCopyAux(dest_67432, src_67433, n_67435.sons[i][1]);
      }
    
			break;
		}

	
}

function add_61638(x_61641, x_61641_Idx, y_61642) {
		      if (x_61641[x_61641_Idx] === null) { x_61641[x_61641_Idx] = []; }
      var off = x_61641[x_61641_Idx].length;
      x_61641[x_61641_Idx].length += y_61642.length;
      for (var i = 0; i < y_61642.length; ++i) {
        x_61641[x_61641_Idx][off+i] = y_61642.charCodeAt(i);
      }
    

	
}

function aux_write_stack_trace_64151(f_64153) {
					var Tmp3;

	var result_64154 = [null];

		var it_64162 = f_64153;
		var i_64164 = 0;
		var total_64166 = 0;
		var temp_frames_64173 = arrayConstr(64, {Field0: null, Field1: 0}, NTI64156);
		L1: do {
				L2: while (true) {
					if (!!((it_64162 == null))) Tmp3 = false; else {						Tmp3 = (i_64164 <= 63);					}				if (!Tmp3) break L2;
					temp_frames_64173[i_64164].Field0 = it_64162.procname;
					temp_frames_64173[i_64164].Field1 = it_64162.line;
					i_64164 += 1;
					total_64166 += 1;
					it_64162 = it_64162.prev;
				}
		} while(false);
		L4: do {
				L5: while (true) {
				if (!!((it_64162 == null))) break L5;
					total_64166 += 1;
					it_64162 = it_64162.prev;
				}
		} while(false);
		result_64154[0] = nimCopy(null, [], NTI44040);
		if (!((total_64166 == i_64164))) {
		if (result_64154[0] != null) { result_64154[0] = (result_64154[0]).concat(makeNimstrLit("(")); } else { result_64154[0] = makeNimstrLit("("); };
		if (result_64154[0] != null) { result_64154[0] = (result_64154[0]).concat(cstrToNimstr(((total_64166 - i_64164))+"")); } else { result_64154[0] = cstrToNimstr(((total_64166 - i_64164))+"").slice(); };
		if (result_64154[0] != null) { result_64154[0] = (result_64154[0]).concat(makeNimstrLit(" calls omitted) ...\x0A")); } else { result_64154[0] = makeNimstrLit(" calls omitted) ...\x0A"); };
		}
		
		L6: do {
			var j_64421 = 0;
			var colontmp__250051 = 0;
			colontmp__250051 = (i_64164 - 1);
			var res_250056 = colontmp__250051;
			L7: do {
					L8: while (true) {
					if (!(0 <= res_250056)) break L8;
						j_64421 = res_250056;
						add_61638(result_64154, 0, temp_frames_64173[j_64421].Field0);
						if ((0 < temp_frames_64173[j_64421].Field1)) {
						if (result_64154[0] != null) { result_64154[0] = (result_64154[0]).concat(makeNimstrLit(", line: ")); } else { result_64154[0] = makeNimstrLit(", line: "); };
						if (result_64154[0] != null) { result_64154[0] = (result_64154[0]).concat(cstrToNimstr((temp_frames_64173[j_64421].Field1)+"")); } else { result_64154[0] = cstrToNimstr((temp_frames_64173[j_64421].Field1)+"").slice(); };
						}
						
						if (result_64154[0] != null) { result_64154[0] = (result_64154[0]).concat(makeNimstrLit("\x0A")); } else { result_64154[0] = makeNimstrLit("\x0A"); };
						res_250056 -= 1;
					}
			} while(false);
		} while(false);

	return result_64154[0];

}

function raw_write_stack_trace_64468() {
	var result_64470 = null;

		if (!((framePtr == null))) {
		result_64470 = nimCopy(null, (makeNimstrLit("Traceback (most recent call last)\x0A") || []).concat(aux_write_stack_trace_64151(framePtr) || []), NTI44040);
		}
		else {
			result_64470 = nimCopy(null, makeNimstrLit("No stack traceback available\x0A"), NTI44040);
		}
		

	return result_64470;

}

function unhandledException(e_64529) {
		var buf_64530 = [[]];
		if (!(((e_64529.message != null ? e_64529.message.length : 0) == 0))) {
		if (buf_64530[0] != null) { buf_64530[0] = (buf_64530[0]).concat(makeNimstrLit("Error: unhandled exception: ")); } else { buf_64530[0] = makeNimstrLit("Error: unhandled exception: "); };
		if (buf_64530[0] != null) { buf_64530[0] = (buf_64530[0]).concat(e_64529.message); } else { buf_64530[0] = e_64529.message.slice(); };
		}
		else {
		if (buf_64530[0] != null) { buf_64530[0] = (buf_64530[0]).concat(makeNimstrLit("Error: unhandled exception")); } else { buf_64530[0] = makeNimstrLit("Error: unhandled exception"); };
		}
		
		if (buf_64530[0] != null) { buf_64530[0] = (buf_64530[0]).concat(makeNimstrLit(" [")); } else { buf_64530[0] = makeNimstrLit(" ["); };
		add_61638(buf_64530, 0, e_64529.name);
		if (buf_64530[0] != null) { buf_64530[0] = (buf_64530[0]).concat(makeNimstrLit("]\x0A")); } else { buf_64530[0] = makeNimstrLit("]\x0A"); };
		if (buf_64530[0] != null) { buf_64530[0] = (buf_64530[0]).concat(raw_write_stack_trace_64468()); } else { buf_64530[0] = raw_write_stack_trace_64468().slice(); };
		var cbuf_64601 = toJSStr(buf_64530[0]);
		framePtr = null;
		  if (typeof(Error) !== "undefined") {
    throw new Error(cbuf_64601);
  }
  else {
    throw cbuf_64601;
  }
  

	
}

function raiseOverflow() {
		var e_65042 = null;
		e_65042 = {m_type: NTI47846, parent: null, name: null, message: null, trace: null, raiseId: 0, up: null};
		e_65042.message = nimCopy(null, makeNimstrLit("over- or underflow"), NTI44040);
		e_65042.parent = null;
		raiseException(e_65042, "OverflowError");

	
}

function raiseIndexError(i_65639, a_65640, b_65641) {
		var Tmp1;

		var e_65802 = null;
		e_65802 = {m_type: NTI47858, parent: null, name: null, message: null, trace: null, raiseId: 0, up: null};
		if ((b_65641 < a_65640)) {
		Tmp1 = makeNimstrLit("index out of bounds, the container is empty");
		}
		else {
		Tmp1 = (makeNimstrLit("index ") || []).concat(cstrToNimstr((i_65639)+"") || [],makeNimstrLit(" not in ") || [],cstrToNimstr((a_65640)+"") || [],makeNimstrLit(" .. ") || [],cstrToNimstr((b_65641)+"") || []);
		}
		
		e_65802.message = nimCopy(null, Tmp1, NTI44040);
		e_65802.parent = null;
		raiseException(e_65802, "IndexError");

	
}

function raiseDivByZero() {
		var e_65241 = null;
		e_65241 = {m_type: NTI47844, parent: null, name: null, message: null, trace: null, raiseId: 0, up: null};
		e_65241.message = nimCopy(null, makeNimstrLit("division by zero"), NTI44040);
		e_65241.parent = null;
		raiseException(e_65241, "DivByZeroError");

	
}

function parse_saturated_natural_87631(s_87633, b_87635, b_87635_Idx, start_87636) {
			var Tmp1;
					var Tmp4;

	var result_87638 = 0;

	var F={procname:"parseutils.parseSaturatedNatural",prev:framePtr,filename:"parseutils.nim",line:0};
	framePtr = F;
		F.line = 480;
		var i_87639 = start_87636;
		if (((i_87639 < (s_87633 != null ? s_87633.length : 0)) && (s_87633[chckIndx(i_87639, 0, s_87633.length+0-1)-0] == 43))) {
		F.line = 481;
		i_87639 = addInt(i_87639, 1);
		}
		
			if (!(i_87639 < (s_87633 != null ? s_87633.length : 0))) Tmp1 = false; else {				Tmp1 = (ConstSet6[s_87633[chckIndx(i_87639, 0, s_87633.length+0-1)-0]] != undefined);			}		if (Tmp1) {
		F.line = 483;
		b_87635[b_87635_Idx] = 0;
		L2: do {
			F.line = 484;
				L3: while (true) {
					if (!(i_87639 < (s_87633 != null ? s_87633.length : 0))) Tmp4 = false; else {						Tmp4 = (ConstSet7[s_87633[chckIndx(i_87639, 0, s_87633.length+0-1)-0]] != undefined);					}				if (!Tmp4) break L3;
					F.line = 485;
					var c_87668 = subInt(s_87633[chckIndx(i_87639, 0, s_87633.length+0-1)-0], 48);
					if ((b_87635[b_87635_Idx] <= divInt(subInt(2147483647, c_87668), 10))) {
					F.line = 487;
					b_87635[b_87635_Idx] = addInt(mulInt(b_87635[b_87635_Idx], 10), c_87668);
					}
					else {
						F.line = 489;
						b_87635[b_87635_Idx] = 2147483647;
					}
					
					F.line = 490;
					i_87639 = addInt(i_87639, 1);
					L5: do {
						F.line = 491;
							L6: while (true) {
							if (!((i_87639 < (s_87633 != null ? s_87633.length : 0)) && (s_87633[chckIndx(i_87639, 0, s_87633.length+0-1)-0] == 95))) break L6;
								F.line = 491;
								i_87639 = addInt(i_87639, 1);
							}
					} while(false);
				}
		} while(false);
		F.line = 492;
		result_87638 = subInt(i_87639, start_87636);
		}
		
	framePtr = F.prev;

	return result_87638;

}

function raiseRangeError() {
		var e_65441 = null;
		e_65441 = {m_type: NTI47862, parent: null, name: null, message: null, trace: null, raiseId: 0, up: null};
		e_65441.message = nimCopy(null, makeNimstrLit("value out of range"), NTI44040);
		e_65441.parent = null;
		raiseException(e_65441, "RangeError");

	
}

function HEX5BHEX5D_144704(s_144708, x_144710) {
	var result_144711 = null;

	var F={procname:"[].[]",prev:framePtr,filename:"system.nim",line:0};
	framePtr = F;
		F.line = 3936;
		var a_144801 = x_144710.a;
		F.line = 3937;
		var l_145001 = addInt(subInt(subInt((s_144708 != null ? s_144708.length : 0), x_144710.b), a_144801), 1);
		F.line = 3938;
		result_144711 = nimCopy(null, mnewString(chckRange(l_145001, 0, 2147483647)), NTI44040);
		L1: do {
			F.line = 3939;
			var i_145009 = 0;
			F.line = 2717;
			var i_250078 = 0;
			L2: do {
				F.line = 2718;
					L3: while (true) {
					if (!(i_250078 < l_145001)) break L3;
						F.line = 3939;
						i_145009 = i_250078;
						F.line = 3939;
						result_144711[chckIndx(i_145009, 0, result_144711.length+0-1)-0] = s_144708[chckIndx(addInt(i_145009, a_144801), 0, s_144708.length+0-1)-0];
						F.line = 2720;
						i_250078 = addInt(i_250078, 1);
					}
			} while(false);
		} while(false);
	framePtr = F.prev;

	return result_144711;

}

function HEX2EHEX2E_144639(a_144643, b_144644) {
	var result_144650 = {a: 0, b: 0};

	var F={procname:".....",prev:framePtr,filename:"system.nim",line:0};
	framePtr = F;
		F.line = 500;
		nimCopy(result_144650, {a: a_144643, b: b_144644}, NTI144647);
	framePtr = F.prev;

	return result_144650;

}

function parse_standard_format_specifier_246324(s_246326, start_246327, ignore_unknown_suffix_246329) {
			var Tmp1;
			var Tmp2;
			var Tmp3;

	var result_246330 = {fill: 0, align: 0, sign: 0, alternateForm: false, padWithZero: false, minimumWidth: 0, precision: 0, typ: 0, endPosition: 0};

	var F={procname:"strformat.parseStandardFormatSpecifier",prev:framePtr,filename:"strformat.nim",line:0};
	framePtr = F;
		F.line = 377;
		result_246330.fill = 32;
		F.line = 378;
		result_246330.align = 0;
		F.line = 379;
		result_246330.sign = 45;
		F.line = 380;
		var i_246333 = start_246327;
		if (((addInt(i_246333, 1) < (s_246326 != null ? s_246326.length : 0)) && (ConstSet2[s_246326[chckIndx(addInt(i_246333, 1), 0, s_246326.length+0-1)-0]] != undefined))) {
		F.line = 382;
		result_246330.fill = s_246326[chckIndx(i_246333, 0, s_246326.length+0-1)-0];
		F.line = 383;
		result_246330.align = s_246326[chckIndx(addInt(i_246333, 1), 0, s_246326.length+0-1)-0];
		F.line = 384;
		i_246333 = addInt(i_246333, 2);
		}
		else {
		if (((i_246333 < (s_246326 != null ? s_246326.length : 0)) && (ConstSet3[s_246326[chckIndx(i_246333, 0, s_246326.length+0-1)-0]] != undefined))) {
		F.line = 386;
		result_246330.align = s_246326[chckIndx(i_246333, 0, s_246326.length+0-1)-0];
		F.line = 387;
		i_246333 = addInt(i_246333, 1);
		}
		}
		if (((i_246333 < (s_246326 != null ? s_246326.length : 0)) && (ConstSet4[s_246326[chckIndx(i_246333, 0, s_246326.length+0-1)-0]] != undefined))) {
		F.line = 390;
		result_246330.sign = s_246326[chckIndx(i_246333, 0, s_246326.length+0-1)-0];
		F.line = 391;
		i_246333 = addInt(i_246333, 1);
		}
		
		if (((i_246333 < (s_246326 != null ? s_246326.length : 0)) && (s_246326[chckIndx(i_246333, 0, s_246326.length+0-1)-0] == 35))) {
		F.line = 394;
		result_246330.alternateForm = true;
		F.line = 395;
		i_246333 = addInt(i_246333, 1);
		}
		
			if (!((addInt(i_246333, 1) < (s_246326 != null ? s_246326.length : 0)) && (s_246326[chckIndx(i_246333, 0, s_246326.length+0-1)-0] == 48))) Tmp1 = false; else {				Tmp1 = (ConstSet5[s_246326[chckIndx(addInt(i_246333, 1), 0, s_246326.length+0-1)-0]] != undefined);			}		if (Tmp1) {
		F.line = 398;
		result_246330.padWithZero = true;
		F.line = 399;
		i_246333 = addInt(i_246333, 1);
		}
		
		F.line = 401;
		var parsed_length_246391 = parse_saturated_natural_87631(s_246326, result_246330, "minimumWidth", i_246333);
		F.line = 402;
		i_246333 = addInt(i_246333, parsed_length_246391);
		if (((i_246333 < (s_246326 != null ? s_246326.length : 0)) && (s_246326[chckIndx(i_246333, 0, s_246326.length+0-1)-0] == 46))) {
		F.line = 404;
		i_246333 = addInt(i_246333, 1);
		F.line = 405;
		var parsed_length_b_246405 = parse_saturated_natural_87631(s_246326, result_246330, "precision", i_246333);
		F.line = 406;
		i_246333 = addInt(i_246333, parsed_length_b_246405);
		}
		else {
			F.line = 408;
			result_246330.precision = -1;
		}
		
			if (!(i_246333 < (s_246326 != null ? s_246326.length : 0))) Tmp2 = false; else {				Tmp2 = (ConstSet8[s_246326[chckIndx(i_246333, 0, s_246326.length+0-1)-0]] != undefined);			}		if (Tmp2) {
		F.line = 411;
		result_246330.typ = s_246326[chckIndx(i_246333, 0, s_246326.length+0-1)-0];
		F.line = 412;
		i_246333 = addInt(i_246333, 1);
		}
		
		F.line = 413;
		result_246330.endPosition = i_246333;
			if (!!((i_246333 == (s_246326 != null ? s_246326.length : 0)))) Tmp3 = false; else {				Tmp3 = !(ignore_unknown_suffix_246329);			}		if (Tmp3) {
		F.line = 3436;
		var e_246460 = null;
		F.line = 3439;
		e_246460 = {m_type: NTI47852, parent: null, name: null, message: null, trace: null, raiseId: 0, up: null};
		F.line = 416;
		e_246460.message = nimCopy(null, (makeNimstrLit("invalid format string, cannot parse: ") || []).concat(HEX5BHEX5D_144704(s_246326, HEX2EHEX2E_144639(i_246333, 1)) || []), NTI44040);
		F.line = 3432;
		e_246460.parent = null;
		F.line = 415;
		raiseException(e_246460, "ValueError");
		}
		
	framePtr = F.prev;

	return result_246330;

}

function nucruneLen(s_109227) {
	var result_109228 = 0;

	var F={procname:"unicode.runeLen",prev:framePtr,filename:"unicode.nim",line:0};
	framePtr = F;
		F.line = 49;
		var i_109230 = 0;
		L1: do {
			F.line = 50;
				L2: while (true) {
				if (!(i_109230 < (s_109227 != null ? s_109227.length : 0))) break L2;
					if ((s_109227[chckIndx(i_109230, 0, s_109227.length+0-1)-0] <= 127)) {
					F.line = 51;
					i_109230 = addInt(i_109230, 1);
					}
					else {
					if ((((s_109227[chckIndx(i_109230, 0, s_109227.length+0-1)-0] >>> 0) >>> 5) == 6)) {
					F.line = 52;
					i_109230 = addInt(i_109230, 2);
					}
					else {
					if ((((s_109227[chckIndx(i_109230, 0, s_109227.length+0-1)-0] >>> 0) >>> 4) == 14)) {
					F.line = 53;
					i_109230 = addInt(i_109230, 3);
					}
					else {
					if ((((s_109227[chckIndx(i_109230, 0, s_109227.length+0-1)-0] >>> 0) >>> 3) == 30)) {
					F.line = 54;
					i_109230 = addInt(i_109230, 4);
					}
					else {
					if ((((s_109227[chckIndx(i_109230, 0, s_109227.length+0-1)-0] >>> 0) >>> 2) == 62)) {
					F.line = 55;
					i_109230 = addInt(i_109230, 5);
					}
					else {
					if ((((s_109227[chckIndx(i_109230, 0, s_109227.length+0-1)-0] >>> 0) >>> 1) == 126)) {
					F.line = 56;
					i_109230 = addInt(i_109230, 6);
					}
					else {
						F.line = 57;
					i_109230 = addInt(i_109230, 1);
					}
					}}}}}
					F.line = 58;
					result_109228 = addInt(result_109228, 1);
				}
		} while(false);
	framePtr = F.prev;

	return result_109228;

}

function rune_len_at_109359(s_109361, i_109362) {
	var result_109363 = 0;

	var F={procname:"unicode.runeLenAt",prev:framePtr,filename:"unicode.nim",line:0};
	framePtr = F;
		if ((s_109361[chckIndx(i_109362, 0, s_109361.length+0-1)-0] <= 127)) {
		F.line = 70;
		result_109363 = 1;
		}
		else {
		if ((((s_109361[chckIndx(i_109362, 0, s_109361.length+0-1)-0] >>> 0) >>> 5) == 6)) {
		F.line = 71;
		result_109363 = 2;
		}
		else {
		if ((((s_109361[chckIndx(i_109362, 0, s_109361.length+0-1)-0] >>> 0) >>> 4) == 14)) {
		F.line = 72;
		result_109363 = 3;
		}
		else {
		if ((((s_109361[chckIndx(i_109362, 0, s_109361.length+0-1)-0] >>> 0) >>> 3) == 30)) {
		F.line = 73;
		result_109363 = 4;
		}
		else {
		if ((((s_109361[chckIndx(i_109362, 0, s_109361.length+0-1)-0] >>> 0) >>> 2) == 62)) {
		F.line = 74;
		result_109363 = 5;
		}
		else {
		if ((((s_109361[chckIndx(i_109362, 0, s_109361.length+0-1)-0] >>> 0) >>> 1) == 126)) {
		F.line = 75;
		result_109363 = 6;
		}
		else {
			F.line = 76;
			result_109363 = 1;
		}
		}}}}}
	framePtr = F.prev;

	return result_109363;

}

function rune_offset_115044(s_115046, pos_115047, start_115048) {
	var result_115049 = 0;

	var F={procname:"unicode.runeOffset",prev:framePtr,filename:"unicode.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 327;
		var i_115051 = 0;
		F.line = 328;
		var o_115052 = start_115048;
		L1: do {
			F.line = 329;
				L2: while (true) {
				if (!(i_115051 < pos_115047)) break L2;
					F.line = 330;
					o_115052 = addInt(o_115052, chckRange(rune_len_at_109359(s_115046, o_115052), 0, 2147483647));
					if (((s_115046 != null ? s_115046.length : 0) <= o_115052)) {
					F.line = 332;
					result_115049 = -1;
					break BeforeRet;
					}
					
					F.line = 333;
					i_115051 = addInt(i_115051, 1);
				}
		} while(false);
		F.line = 334;
		result_115049 = o_115052;
		break BeforeRet;
	} while (false);
	framePtr = F.prev;

	return result_115049;

}

function validate_utf8_112229(s_112231) {
						var Tmp3;
						var Tmp4;
						var Tmp5;
						var Tmp6;
						var Tmp7;
						var Tmp8;

	var result_112232 = 0;

	var F={procname:"unicode.validateUtf8",prev:framePtr,filename:"unicode.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 180;
		var i_112234 = 0;
		F.line = 181;
		var l_112235 = (s_112231 != null ? s_112231.length : 0);
		L1: do {
			F.line = 182;
				L2: while (true) {
				if (!(i_112234 < l_112235)) break L2;
					if ((s_112231[chckIndx(i_112234, 0, s_112231.length+0-1)-0] <= 127)) {
					F.line = 184;
					i_112234 = addInt(i_112234, 1);
					}
					else {
					if ((((s_112231[chckIndx(i_112234, 0, s_112231.length+0-1)-0] >>> 0) >>> 5) == 6)) {
					if ((s_112231[chckIndx(i_112234, 0, s_112231.length+0-1)-0] < 194)) {
					F.line = 186;
					result_112232 = i_112234;
					break BeforeRet;
					}
					
						if (!(addInt(i_112234, 1) < l_112235)) Tmp3 = false; else {							Tmp3 = (((s_112231[chckIndx(addInt(i_112234, 1), 0, s_112231.length+0-1)-0] >>> 0) >>> 6) == 2);						}					if (Tmp3) {
					F.line = 187;
					i_112234 = addInt(i_112234, 2);
					}
					else {
						F.line = 188;
						result_112232 = i_112234;
						break BeforeRet;
					}
					
					}
					else {
					if ((((s_112231[chckIndx(i_112234, 0, s_112231.length+0-1)-0] >>> 0) >>> 4) == 14)) {
						if (!(addInt(i_112234, 2) < l_112235)) Tmp5 = false; else {							Tmp5 = (((s_112231[chckIndx(addInt(i_112234, 1), 0, s_112231.length+0-1)-0] >>> 0) >>> 6) == 2);						}						if (!Tmp5) Tmp4 = false; else {							Tmp4 = (((s_112231[chckIndx(addInt(i_112234, 2), 0, s_112231.length+0-1)-0] >>> 0) >>> 6) == 2);						}					if (Tmp4) {
					F.line = 191;
					i_112234 = addInt(i_112234, 3);
					}
					else {
						F.line = 192;
						result_112232 = i_112234;
						break BeforeRet;
					}
					
					}
					else {
					if ((((s_112231[chckIndx(i_112234, 0, s_112231.length+0-1)-0] >>> 0) >>> 3) == 30)) {
						if (!(addInt(i_112234, 3) < l_112235)) Tmp8 = false; else {							Tmp8 = (((s_112231[chckIndx(addInt(i_112234, 1), 0, s_112231.length+0-1)-0] >>> 0) >>> 6) == 2);						}						if (!Tmp8) Tmp7 = false; else {							Tmp7 = (((s_112231[chckIndx(addInt(i_112234, 2), 0, s_112231.length+0-1)-0] >>> 0) >>> 6) == 2);						}						if (!Tmp7) Tmp6 = false; else {							Tmp6 = (((s_112231[chckIndx(addInt(i_112234, 3), 0, s_112231.length+0-1)-0] >>> 0) >>> 6) == 2);						}					if (Tmp6) {
					F.line = 197;
					i_112234 = addInt(i_112234, 4);
					}
					else {
						F.line = 198;
						result_112232 = i_112234;
						break BeforeRet;
					}
					
					}
					else {
						F.line = 200;
						result_112232 = i_112234;
						break BeforeRet;
					}
					}}}
				}
		} while(false);
		F.line = 201;
		result_112232 = -1;
		break BeforeRet;
	} while (false);
	framePtr = F.prev;

	return result_112232;

}

function nsuRepeatChar(c_195855, count_195856) {
	var result_195857 = null;

	var F={procname:"strutils.repeat",prev:framePtr,filename:"strutils.nim",line:0};
	framePtr = F;
		F.line = 1290;
		result_195857 = nimCopy(null, mnewString(count_195856), NTI44040);
		L1: do {
			F.line = 1291;
			var i_195866 = 0;
			F.line = 2679;
			var colontmp__250110 = 0;
			F.line = 1291;
			colontmp__250110 = subInt(count_195856, 1);
			F.line = 2689;
			var res_250111 = 0;
			L2: do {
				F.line = 2690;
					L3: while (true) {
					if (!(res_250111 <= colontmp__250110)) break L3;
						F.line = 1291;
						i_195866 = res_250111;
						F.line = 1291;
						result_195857[chckIndx(i_195866, 0, result_195857.length+0-1)-0] = c_195855;
						F.line = 2692;
						res_250111 = addInt(res_250111, 1);
					}
			} while(false);
		} while(false);
	framePtr = F.prev;

	return result_195857;

}

function align_string_246223(s_246225, minimum_width_246226, align_246227, fill_246228) {
			var Tmp1;

	var result_246229 = null;

	var F={procname:"strformat.alignString",prev:framePtr,filename:"strformat.nim",line:0};
	framePtr = F;
		if ((minimum_width_246226 == 0)) {
		F.line = 281;
		result_246229 = nimCopy(null, s_246225, NTI44040);
		}
		else {
			F.line = 283;
			if ((validate_utf8_112229(s_246225) == -1)) {
			Tmp1 = nucruneLen(s_246225);
			}
			else {
			Tmp1 = (s_246225 != null ? s_246225.length : 0);
			}
			
			var s_rune_len_246231 = Tmp1;
			F.line = 284;
			var to_fill_246232 = subInt(minimum_width_246226, s_rune_len_246231);
			if ((to_fill_246232 <= 0)) {
			F.line = 286;
			result_246229 = nimCopy(null, s_246225, NTI44040);
			}
			else {
			if (((align_246227 == 60) || (align_246227 == 0))) {
			F.line = 288;
			result_246229 = nimCopy(null, (s_246225 || []).concat(nsuRepeatChar(fill_246228, chckRange(to_fill_246232, 0, 2147483647)) || []), NTI44040);
			}
			else {
			if ((align_246227 == 94)) {
			F.line = 290;
			var half_246233 = divInt(to_fill_246232, 2);
			F.line = 291;
			result_246229 = nimCopy(null, (nsuRepeatChar(fill_246228, chckRange(half_246233, 0, 2147483647)) || []).concat(s_246225 || [],nsuRepeatChar(fill_246228, chckRange(subInt(to_fill_246232, half_246233), 0, 2147483647)) || []), NTI44040);
			}
			else {
				F.line = 293;
				result_246229 = nimCopy(null, (nsuRepeatChar(fill_246228, chckRange(to_fill_246232, 0, 2147483647)) || []).concat(s_246225 || []), NTI44040);
			}
			}}
		}
		
	framePtr = F.prev;

	return result_246229;

}

function format_value_246687(result_246690, result_246690_Idx, value_246691, specifier_246692) {
	var F={procname:"strformat.formatValue",prev:framePtr,filename:"strformat.nim",line:0};
	framePtr = F;
		F.line = 499;
		var spec_246693 = parse_standard_format_specifier_246324(specifier_246692, 0, false);
		F.line = 500;
		var value_246694 = nimCopy(null, value_246691, NTI44040);
		F.line = 501;
		switch (spec_246693.typ) {
		case 115:
		case 0:
			break;
		default: 
			F.line = 3436;
			var e_246697 = null;
			F.line = 3439;
			e_246697 = {m_type: NTI47852, parent: null, name: null, message: null, trace: null, raiseId: 0, up: null};
			F.line = 505;
			e_246697.message = nimCopy(null, (makeNimstrLit("invalid type in format string for string, expected \'s\', but got ") || []).concat([spec_246693.typ]), NTI44040);
			F.line = 3432;
			e_246697.parent = null;
			F.line = 504;
			raiseException(e_246697, "ValueError");
			break;
		}
		if (!((spec_246693.precision == -1))) {
		if ((spec_246693.precision < nucruneLen(value_246694))) {
		F.line = 509;
		(value_246694 == null ? value_246694 = mnewString(chckRange(rune_offset_115044(value_246694, chckRange(spec_246693.precision, 0, 2147483647), 0), 0, 2147483647)) : value_246694.length = chckRange(rune_offset_115044(value_246694, chckRange(spec_246693.precision, 0, 2147483647), 0), 0, 2147483647));
		}
		
		}
		
		F.line = 510;
		if (result_246690[result_246690_Idx] != null) { result_246690[result_246690_Idx] = (result_246690[result_246690_Idx]).concat(align_string_246223(value_246694, spec_246693.minimumWidth, spec_246693.align, spec_246693.fill)); } else { result_246690[result_246690_Idx] = align_string_246223(value_246694, spec_246693.minimumWidth, spec_246693.align, spec_246693.fill).slice(); };
	framePtr = F.prev;

	
}

function nsuToUpperAsciiChar(c_191862) {
	var result_191863 = 0;

	var F={procname:"strutils.toUpperAscii",prev:framePtr,filename:"strutils.nim",line:0};
	framePtr = F;
		if ((ConstSet9[c_191862] != undefined)) {
		F.line = 261;
		result_191863 = chckRange(subInt(c_191862, 32), 0, 255);
		}
		else {
			F.line = 263;
			result_191863 = c_191862;
		}
		
	framePtr = F.prev;

	return result_191863;

}

function head_upper_249024(str_249026) {
	var result_249027 = null;

	var F={procname:"nimjson.headUpper",prev:framePtr,filename:"util.nim",line:0};
	framePtr = F;
		F.line = 32;
		result_249027 = nimCopy(null, [nsuToUpperAsciiChar(str_249026[chckIndx(0, 0, str_249026.length+0-1)-0])].concat(HEX5BHEX5D_144704(str_249026, HEX2EHEX2E_144639(1, 1)) || []), NTI44040);
	framePtr = F.prev;

	return result_249027;

}

function len_229765(t_229770) {
	var result_229771 = 0;

	var F={procname:"len.len",prev:framePtr,filename:"tables.nim",line:0};
	framePtr = F;
		F.line = 1473;
		result_229771 = t_229770.counter;
	framePtr = F.prev;

	return result_229771;

}

function is_filled_206418(hcode_206420) {
	var result_206421 = false;

	var F={procname:"tables.isFilled",prev:framePtr,filename:"hashcommon.nim",line:0};
	framePtr = F;
		F.line = 27;
		result_206421 = !((hcode_206420 == 0));
	framePtr = F.prev;

	return result_206421;

}

function get_type_249076(key_249078, value_249079, strs_249082, strs_249082_Idx, index_249083, public_str_249084) {
		var Tmp1;
				var Tmp2;
				var Tmp3;
			var Tmp4;
			var Tmp5;

	var result_249085 = null;

	var F={procname:"nimjson.getType",prev:framePtr,filename:"util.nim",line:0};
	framePtr = F;
		F.line = 38;
		F.line = 42;
		switch (value_249079.kind) {
		case 6:
			F.line = 44;
			var u_key_249086 = head_upper_249024(key_249078);
			F.line = 45;
			var s_249087 = makeNimstrLit("seq[");
				var Tmp2 = value_249079;
				if (ConstSet11[Tmp2.kind]===undefined) { raiseFieldError(makeNimstrLit("elems")); }
			if ((0 < ((Tmp3 = Tmp2.elems, Tmp3) != null ? Tmp3.length : 0))) {
			F.line = 48;
			var Tmp4 = value_249079;
			if (ConstSet12[Tmp4.kind]===undefined) { raiseFieldError(makeNimstrLit("elems")); }
			var child_249097 = (Tmp5 = Tmp4.elems, Tmp5)[chckIndx(0, 0, Tmp5.length+0-1)-0];
			F.line = 49;
			if (s_249087 != null) { s_249087 = (s_249087).concat(get_type_249076(u_key_249086, child_249097, strs_249082, strs_249082_Idx, index_249083, public_str_249084)); } else { s_249087 = get_type_249076(u_key_249086, child_249097, strs_249082, strs_249082_Idx, index_249083, public_str_249084).slice(); };
			if ((child_249097.kind == 5)) {
			F.line = 51;
			obj_format_249002(child_249097, u_key_249086, strs_249082, strs_249082_Idx, addInt(index_249083, 1), public_str_249084);
			}
			
			}
			else {
				F.line = 53;
			if (s_249087 != null) { s_249087 = (s_249087).concat(makeNimstrLit("NilType")); } else { s_249087 = makeNimstrLit("NilType"); };
			}
			
			F.line = 54;
			if (s_249087 != null) { s_249087 = (s_249087).concat(makeNimstrLit("]")); } else { s_249087 = makeNimstrLit("]"); };
			Tmp1 = s_249087;
			break;
		case 5:
			Tmp1 = head_upper_249024(key_249078);
			break;
		case 4:
			Tmp1 = makeNimstrLit("string");
			break;
		case 2:
			Tmp1 = makeNimstrLit("int64");
			break;
		case 3:
			Tmp1 = makeNimstrLit("float64");
			break;
		case 1:
			Tmp1 = makeNimstrLit("bool");
			break;
		case 0:
			Tmp1 = makeNimstrLit("NilType");
			break;
		}
		result_249085 = nimCopy(null, Tmp1, NTI44040);
	framePtr = F.prev;

	return result_249085;

}

function sys_fatal_58662(message_58666) {
	var F={procname:"sysFatal.sysFatal",prev:framePtr,filename:"fatal.nim",line:0};
	framePtr = F;
		F.line = 34;
		var e_58803 = null;
		F.line = 37;
		e_58803 = {m_type: NTI47850, parent: null, name: null, message: null, trace: null, raiseId: 0, up: null};
		F.line = 38;
		e_58803.message = nimCopy(null, message_58666, NTI44040);
		F.line = 39;
		raiseException(e_58803, "AssertionError");
	framePtr = F.prev;

	
}

function raise_assert_58658(msg_58660) {
	var F={procname:"assertions.raiseAssert",prev:framePtr,filename:"assertions.nim",line:0};
	framePtr = F;
		F.line = 20;
		sys_fatal_58662(msg_58660);
	framePtr = F.prev;

	
}

function failed_assert_impl_58851(msg_58853) {
	var F={procname:"assertions.failedAssertImpl",prev:framePtr,filename:"assertions.nim",line:0};
	framePtr = F;
		F.line = 27;
		raise_assert_58658(msg_58853);
	framePtr = F.prev;

	
}

function obj_format_249002(self_249004, obj_name_249005, strs_249020, strs_249020_Idx, index_249021, public_str_249023) {
			var Tmp2;

	var F={procname:"nimjson.objFormat",prev:framePtr,filename:"util.nim",line:0};
	framePtr = F;
		F.line = 67;
		if (strs_249020[strs_249020_Idx] != null) { strs_249020[strs_249020_Idx].push([]); } else { strs_249020[strs_249020_Idx] = [[]]; };
		F.line = 68;
		F.line = 68;
		var fmt_res_249149 = [mnewString(0)];
		F.line = 68;
		if (fmt_res_249149[0] != null) { fmt_res_249149[0] = (fmt_res_249149[0]).concat(makeNimstrLit("  ")); } else { fmt_res_249149[0] = makeNimstrLit("  "); };
		F.line = 68;
		format_value_246687(fmt_res_249149, 0, head_upper_249024(obj_name_249005), []);
		F.line = 68;
		format_value_246687(fmt_res_249149, 0, public_str_249023, []);
		F.line = 68;
		if (fmt_res_249149[0] != null) { fmt_res_249149[0] = (fmt_res_249149[0]).concat(makeNimstrLit(" = ref object\x0A")); } else { fmt_res_249149[0] = makeNimstrLit(" = ref object\x0A"); };
		if (strs_249020[strs_249020_Idx][chckIndx(index_249021, 0, strs_249020[strs_249020_Idx].length+0-1)-0] != null) { strs_249020[strs_249020_Idx][chckIndx(index_249021, 0, strs_249020[strs_249020_Idx].length+0-1)-0] = (strs_249020[strs_249020_Idx][chckIndx(index_249021, 0, strs_249020[strs_249020_Idx].length+0-1)-0]).concat(fmt_res_249149[0]); } else { strs_249020[strs_249020_Idx][chckIndx(index_249021, 0, strs_249020[strs_249020_Idx].length+0-1)-0] = fmt_res_249149[0].slice(); };
		L1: do {
			F.line = 69;
			var k_249166 = null;
			F.line = 69;
			var v_249167 = null;
			F.line = 1619;
			var colontmp__250117 = {data: null, counter: 0, first: 0, last: 0};
			F.line = 69;
			var Tmp2 = self_249004;
			if (ConstSet10[Tmp2.kind]===undefined) { raiseFieldError(makeNimstrLit("fields")); }
			nimCopy(colontmp__250117, Tmp2.fields, NTI222228);
			F.line = 1645;
			var l_250119 = len_229765(colontmp__250117);
			if ((0 < colontmp__250117.counter)) {
			F.line = 1257;
			var h_250120 = colontmp__250117.first;
			L3: do {
				F.line = 1258;
					L4: while (true) {
					if (!(0 <= h_250120)) break L4;
						F.line = 1259;
						var nxt_250122 = colontmp__250117.data[chckIndx(h_250120, 0, colontmp__250117.data.length+0-1)-0].Field1;
						if (is_filled_206418(colontmp__250117.data[chckIndx(h_250120, 0, colontmp__250117.data.length+0-1)-0].Field0)) {
						F.line = 69;
						k_249166 = colontmp__250117.data[chckIndx(h_250120, 0, colontmp__250117.data.length+0-1)-0].Field2;
						F.line = 1647;
						v_249167 = colontmp__250117.data[chckIndx(h_250120, 0, colontmp__250117.data.length+0-1)-0].Field3;
						F.line = 70;
						var t_249168 = get_type_249076(k_249166, v_249167, strs_249020, strs_249020_Idx, index_249021, public_str_249023);
						F.line = 71;
						F.line = 71;
						var fmt_res_249169 = [mnewString(0)];
						F.line = 71;
						if (fmt_res_249169[0] != null) { fmt_res_249169[0] = (fmt_res_249169[0]).concat(makeNimstrLit("    ")); } else { fmt_res_249169[0] = makeNimstrLit("    "); };
						F.line = 71;
						format_value_246687(fmt_res_249169, 0, k_249166, []);
						F.line = 71;
						format_value_246687(fmt_res_249169, 0, public_str_249023, []);
						F.line = 71;
						if (fmt_res_249169[0] != null) { fmt_res_249169[0] = (fmt_res_249169[0]).concat(makeNimstrLit(": ")); } else { fmt_res_249169[0] = makeNimstrLit(": "); };
						F.line = 71;
						format_value_246687(fmt_res_249169, 0, t_249168, []);
						F.line = 71;
						if (fmt_res_249169[0] != null) { fmt_res_249169[0] = (fmt_res_249169[0]).concat(makeNimstrLit("\x0A")); } else { fmt_res_249169[0] = makeNimstrLit("\x0A"); };
						if (strs_249020[strs_249020_Idx][chckIndx(index_249021, 0, strs_249020[strs_249020_Idx].length+0-1)-0] != null) { strs_249020[strs_249020_Idx][chckIndx(index_249021, 0, strs_249020[strs_249020_Idx].length+0-1)-0] = (strs_249020[strs_249020_Idx][chckIndx(index_249021, 0, strs_249020[strs_249020_Idx].length+0-1)-0]).concat(fmt_res_249169[0]); } else { strs_249020[strs_249020_Idx][chckIndx(index_249021, 0, strs_249020[strs_249020_Idx].length+0-1)-0] = fmt_res_249169[0].slice(); };
						if ((v_249167.kind == 5)) {
						F.line = 75;
						obj_format_249002(v_249167, k_249166, strs_249020, strs_249020_Idx, addInt(index_249021, 1), public_str_249023);
						}
						
						if (!((len_229765(colontmp__250117) == l_250119))) {
						F.line = 1648;
						failed_assert_impl_58851(makeNimstrLit("/home/travis/.choosenim/toolchains/nim-0.20.2/lib/pure/collections/tables.nim(1648, 11) `len(t) ==\x0A    L` the length of the table changed while iterating over it"));
						}
						
						}
						
						F.line = 1262;
						h_250120 = nxt_250122;
					}
			} while(false);
			}
			
		} while(false);
	framePtr = F.prev;

	
}

function nsuJoinSep(a_197059, sep_197060) {
	var result_197061 = null;

	var F={procname:"strutils.join",prev:framePtr,filename:"strutils.nim",line:0};
	framePtr = F;
		if ((0 < (a_197059 != null ? a_197059.length : 0))) {
		F.line = 1769;
		var l_197072 = mulInt((sep_197060 != null ? sep_197060.length : 0), subInt((a_197059 != null ? a_197059.length : 0), 1));
		L1: do {
			F.line = 1770;
			var i_197086 = 0;
			F.line = 2679;
			var colontmp__250127 = 0;
			F.line = 1770;
			colontmp__250127 = (a_197059 != null ? (a_197059.length-1) : -1);
			F.line = 2689;
			var res_250128 = 0;
			L2: do {
				F.line = 2690;
					L3: while (true) {
					if (!(res_250128 <= colontmp__250127)) break L3;
						F.line = 1770;
						i_197086 = res_250128;
						F.line = 1770;
						l_197072 = addInt(l_197072, (a_197059[chckIndx(i_197086, 0, a_197059.length+0-1)-0] != null ? a_197059[chckIndx(i_197086, 0, a_197059.length+0-1)-0].length : 0));
						F.line = 2692;
						res_250128 = addInt(res_250128, 1);
					}
			} while(false);
		} while(false);
		F.line = 1771;
		result_197061 = nimCopy(null, mnewString(0), NTI44040);
		F.line = 1772;
		if (result_197061 != null) { result_197061 = (result_197061).concat(a_197059[chckIndx(0, 0, a_197059.length+0-1)-0]); } else { result_197061 = a_197059[chckIndx(0, 0, a_197059.length+0-1)-0].slice(); };
		L4: do {
			F.line = 1773;
			var i_197106 = 0;
			F.line = 2679;
			var colontmp__250134 = 0;
			F.line = 1773;
			colontmp__250134 = (a_197059 != null ? (a_197059.length-1) : -1);
			F.line = 2689;
			var res_250135 = 1;
			L5: do {
				F.line = 2690;
					L6: while (true) {
					if (!(res_250135 <= colontmp__250134)) break L6;
						F.line = 1773;
						i_197106 = res_250135;
						F.line = 1774;
						if (result_197061 != null) { result_197061 = (result_197061).concat(sep_197060); } else { result_197061 = sep_197060.slice(); };
						F.line = 1775;
						if (result_197061 != null) { result_197061 = (result_197061).concat(a_197059[chckIndx(i_197106, 0, a_197059.length+0-1)-0]); } else { result_197061 = a_197059[chckIndx(i_197106, 0, a_197059.length+0-1)-0].slice(); };
						F.line = 2692;
						res_250135 = addInt(res_250135, 1);
					}
			} while(false);
		} while(false);
		}
		else {
			F.line = 1777;
			result_197061 = nimCopy(null, [], NTI44040);
		}
		
	framePtr = F.prev;

	return result_197061;

}

function to_type_string_249192(self_249194, obj_name_249195, public_field_249196) {
		var Tmp1;
				var Tmp2;
				var Tmp3;
			var Tmp4;
			var Tmp5;

	var result_249197 = null;

	var F={procname:"nimjson.toTypeString",prev:framePtr,filename:"util.nim",line:0};
	framePtr = F;
		F.line = 109;
		if (public_field_249196) {
		Tmp1 = makeNimstrLit("*");
		}
		else {
		Tmp1 = [];
		}
		
		var public_str_249198 = nimCopy(null, Tmp1, NTI44040);
		F.line = 113;
		if (result_249197 != null) { result_249197 = (result_249197).concat(makeNimstrLit("type\x0A")); } else { result_249197 = makeNimstrLit("type\x0A"); };
		F.line = 114;
		F.line = 114;
		var fmt_res_249199 = [mnewString(0)];
		F.line = 114;
		if (fmt_res_249199[0] != null) { fmt_res_249199[0] = (fmt_res_249199[0]).concat(makeNimstrLit("  ")); } else { fmt_res_249199[0] = makeNimstrLit("  "); };
		F.line = 114;
		format_value_246687(fmt_res_249199, 0, makeNimstrLit("NilType"), []);
		F.line = 114;
		format_value_246687(fmt_res_249199, 0, public_str_249198, []);
		F.line = 114;
		if (fmt_res_249199[0] != null) { fmt_res_249199[0] = (fmt_res_249199[0]).concat(makeNimstrLit(" = ref object\x0A")); } else { fmt_res_249199[0] = makeNimstrLit(" = ref object\x0A"); };
		if (result_249197 != null) { result_249197 = (result_249197).concat(fmt_res_249199[0]); } else { result_249197 = fmt_res_249199[0].slice(); };
		F.line = 115;
		switch (self_249194.kind) {
		case 5:
			F.line = 117;
			var ret_249203 = [null];
			F.line = 118;
			obj_format_249002(self_249194, obj_name_249195, ret_249203, 0, 0, public_str_249198);
			F.line = 119;
			if (result_249197 != null) { result_249197 = (result_249197).concat(nsuJoinSep(ret_249203[0], [])); } else { result_249197 = nsuJoinSep(ret_249203[0], []).slice(); };
			break;
		case 6:
			F.line = 121;
			F.line = 121;
			var fmt_res_249206 = [mnewString(0)];
			F.line = 121;
			if (fmt_res_249206[0] != null) { fmt_res_249206[0] = (fmt_res_249206[0]).concat(makeNimstrLit("Seq")); } else { fmt_res_249206[0] = makeNimstrLit("Seq"); };
			F.line = 121;
			format_value_246687(fmt_res_249206, 0, head_upper_249024(obj_name_249195), []);
			var seq_obj_name_249208 = nimCopy(null, fmt_res_249206[0], NTI44040);
				var Tmp2 = self_249194;
				if (ConstSet13[Tmp2.kind]===undefined) { raiseFieldError(makeNimstrLit("elems")); }
			if ((0 < ((Tmp3 = Tmp2.elems, Tmp3) != null ? Tmp3.length : 0))) {
			F.line = 123;
			var Tmp4 = self_249194;
			if (ConstSet14[Tmp4.kind]===undefined) { raiseFieldError(makeNimstrLit("elems")); }
			var child_249218 = (Tmp5 = Tmp4.elems, Tmp5)[chckIndx(0, 0, Tmp5.length+0-1)-0];
			F.line = 124;
			switch (child_249218.kind) {
			case 5:
				F.line = 126;
				F.line = 126;
				var fmt_res_249219 = [mnewString(0)];
				F.line = 126;
				if (fmt_res_249219[0] != null) { fmt_res_249219[0] = (fmt_res_249219[0]).concat(makeNimstrLit("  ")); } else { fmt_res_249219[0] = makeNimstrLit("  "); };
				F.line = 126;
				format_value_246687(fmt_res_249219, 0, seq_obj_name_249208, []);
				F.line = 126;
				if (fmt_res_249219[0] != null) { fmt_res_249219[0] = (fmt_res_249219[0]).concat(makeNimstrLit(" = seq[")); } else { fmt_res_249219[0] = makeNimstrLit(" = seq["); };
				F.line = 126;
				format_value_246687(fmt_res_249219, 0, obj_name_249195, []);
				F.line = 126;
				if (fmt_res_249219[0] != null) { fmt_res_249219[0] = (fmt_res_249219[0]).concat(makeNimstrLit("]\x0A")); } else { fmt_res_249219[0] = makeNimstrLit("]\x0A"); };
				if (result_249197 != null) { result_249197 = (result_249197).concat(fmt_res_249219[0]); } else { result_249197 = fmt_res_249219[0].slice(); };
				F.line = 127;
				var ret_249223 = [null];
				F.line = 128;
				obj_format_249002(child_249218, obj_name_249195, ret_249223, 0, 0, public_str_249198);
				F.line = 129;
				if (result_249197 != null) { result_249197 = (result_249197).concat(nsuJoinSep(ret_249223[0], [])); } else { result_249197 = nsuJoinSep(ret_249223[0], []).slice(); };
				break;
			default: 
				F.line = 131;
				var strs_249227 = [null];
				F.line = 132;
				var t_249229 = get_type_249076(obj_name_249195, child_249218, strs_249227, 0, 0, public_str_249198);
				F.line = 133;
				F.line = 133;
				var fmt_res_249230 = [mnewString(0)];
				F.line = 133;
				if (fmt_res_249230[0] != null) { fmt_res_249230[0] = (fmt_res_249230[0]).concat(makeNimstrLit("  ")); } else { fmt_res_249230[0] = makeNimstrLit("  "); };
				F.line = 133;
				format_value_246687(fmt_res_249230, 0, obj_name_249195, []);
				F.line = 133;
				if (fmt_res_249230[0] != null) { fmt_res_249230[0] = (fmt_res_249230[0]).concat(makeNimstrLit(" = seq[")); } else { fmt_res_249230[0] = makeNimstrLit(" = seq["); };
				F.line = 133;
				format_value_246687(fmt_res_249230, 0, t_249229, []);
				F.line = 133;
				if (fmt_res_249230[0] != null) { fmt_res_249230[0] = (fmt_res_249230[0]).concat(makeNimstrLit("]\x0A")); } else { fmt_res_249230[0] = makeNimstrLit("]\x0A"); };
				if (result_249197 != null) { result_249197 = (result_249197).concat(fmt_res_249230[0]); } else { result_249197 = fmt_res_249230[0].slice(); };
				break;
			}
			}
			
			break;
		default: 
			break;
		}
	framePtr = F.prev;

	return result_249197;

}

function get_var_type_240509(x_240511) {
	var result_240512 = 0;

	var F={procname:"json.getVarType",prev:framePtr,filename:"json.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 871;
		result_240512 = 0;
		F.line = 874;
		switch (toJSStr(cstrToNimstr(Object.prototype.toString.call(x_240511)))) {
		case "[object Array]":
			F.line = 875;
			result_240512 = 6;
			break BeforeRet;
			break;
		case "[object Object]":
			F.line = 876;
			result_240512 = 5;
			break BeforeRet;
			break;
		case "[object Number]":
			if ((x_240511 % 1.0000000000000000e+00 == 0.0)) {
			F.line = 879;
			result_240512 = 2;
			break BeforeRet;
			}
			else {
				F.line = 881;
				result_240512 = 3;
				break BeforeRet;
			}
			
			break;
		case "[object Boolean]":
			F.line = 882;
			result_240512 = 1;
			break BeforeRet;
			break;
		case "[object Null]":
			F.line = 883;
			result_240512 = 0;
			break BeforeRet;
			break;
		case "[object String]":
			F.line = 884;
			result_240512 = 4;
			break BeforeRet;
			break;
		default: 
			if (true) {
			F.line = 885;
			failed_assert_impl_58851(makeNimstrLit("/home/travis/.choosenim/toolchains/nim-0.20.2/lib/pure/json.nim(885, 18) `false` "));
			}
			
			break;
		}
	} while (false);
	framePtr = F.prev;

	return result_240512;

}

function new_jarray_222642() {
	var result_222644 = null;

	var F={procname:"json.newJArray",prev:framePtr,filename:"json.nim",line:0};
	framePtr = F;
		F.line = 219;
		result_222644 = {kind: 6, elems: [], str: null, num: 0, fnum: 0.0, bval: false, fields: {data: null, counter: 0, first: 0, last: 0}};
	framePtr = F.prev;

	return result_222644;

}

function len_240629(x_240631) {
	var result_240632 = 0;

	var F={procname:"json.len",prev:framePtr,filename:"json.nim",line:0};
	framePtr = F;
		if (!((get_var_type_240509(x_240631) == 6))) {
		F.line = 888;
		failed_assert_impl_58851(makeNimstrLit("/home/travis/.choosenim/toolchains/nim-0.20.2/lib/pure/json.nim(888, 12) `x.getVarType == JArray` "));
		}
		
		F.line = 889;
		      result_240632 = x_240631.length;
    
	framePtr = F.prev;

	return result_240632;

}

function add_222976(father_222978, child_222979) {
		var Tmp1;
		var Tmp2;

	var F={procname:"json.add",prev:framePtr,filename:"json.nim",line:0};
	framePtr = F;
		if (!((father_222978.kind == 6))) {
		F.line = 289;
		failed_assert_impl_58851(makeNimstrLit("/home/travis/.choosenim/toolchains/nim-0.20.2/lib/pure/json.nim(289, 10) `father.kind == JArray` "));
		}
		
		F.line = 290;
		var Tmp1 = father_222978;
		if (ConstSet15[Tmp1.kind]===undefined) { raiseFieldError(makeNimstrLit("elems")); }
		if ((Tmp2 = Tmp1.elems, Tmp2) != null) { Tmp2.push(child_222979); } else { Tmp2 = [child_222979]; };
	framePtr = F.prev;

	
}

function HEX5BHEX5D_241014(x_241016, y_241017) {
	var result_241018 = {};

	var F={procname:"json.[]",prev:framePtr,filename:"json.nim",line:0};
	framePtr = F;
		if (!((get_var_type_240509(x_241016) == 6))) {
		F.line = 900;
		failed_assert_impl_58851(makeNimstrLit("/home/travis/.choosenim/toolchains/nim-0.20.2/lib/pure/json.nim(900, 12) `x.getVarType == JArray` "));
		}
		
		F.line = 901;
		      result_241018 = x_241016[y_241017];
    
	framePtr = F.prev;

	return result_241018;

}

function is_power_of_two_102062(x_102064) {
		var Tmp1;

	var result_102065 = false;

	BeforeRet: do {
		if (!(0 < x_102064)) Tmp1 = false; else {			Tmp1 = ((x_102064 & (x_102064 - 1)) == 0);		}		result_102065 = Tmp1;
		break BeforeRet;
	} while (false);

	return result_102065;

}

function init_ordered_table_222383(initial_size_222387) {
	var result_222389 = {data: null, counter: 0, first: 0, last: 0};

	var F={procname:"initOrderedTable.initOrderedTable",prev:framePtr,filename:"tables.nim",line:0};
	framePtr = F;
		if (!(is_power_of_two_102062(initial_size_222387))) {
		F.line = 118;
		failed_assert_impl_58851(makeNimstrLit("/home/travis/.choosenim/toolchains/nim-0.20.2/lib/pure/collections/tableimpl.nim(118, 10) `isPowerOfTwo(initialSize)` "));
		}
		
		F.line = 119;
		result_222389.counter = 0;
		F.line = 120;
		result_222389.data = new Array(chckRange(initial_size_222387, 0, 2147483647)); for (var i=0;i<chckRange(initial_size_222387, 0, 2147483647);++i) {result_222389.data[i]={Field0: 0, Field1: 0, Field2: null, Field3: null};}		F.line = 122;
		result_222389.first = -1;
		F.line = 123;
		result_222389.last = -1;
	framePtr = F.prev;

	return result_222389;

}

function new_jobject_222378() {
	var result_222380 = null;

	var F={procname:"json.newJObject",prev:framePtr,filename:"json.nim",line:0};
	framePtr = F;
		F.line = 215;
		result_222380 = {kind: 5, fields: init_ordered_table_222383(4), str: null, num: 0, fnum: 0.0, bval: false, elems: null};
	framePtr = F.prev;

	return result_222380;

}

function HEX21HEX26_202031(h_202033, val_202034) {
	var result_202035 = 0;

	var F={procname:"hashes.!&",prev:framePtr,filename:"hashes.nim",line:0};
	framePtr = F;
		F.line = 63;
		var h_202036 = (h_202033 >>> 0);
		F.line = 64;
		var val_202037 = (val_202034 >>> 0);
		F.line = 65;
		var res_202043 = ((h_202036 + val_202037) >>> 0);
		F.line = 66;
		res_202043 = ((res_202043 + (res_202043 << 10)) >>> 0);
		F.line = 67;
		res_202043 = (res_202043 ^ ((res_202043 >>> 0) >>> 6));
		F.line = 68;
		result_202035 = (res_202043|0);
	framePtr = F.prev;

	return result_202035;

}

function hash_202869(x_202871) {
	var result_202872 = 0;

	var F={procname:"hashes.hash",prev:framePtr,filename:"hashes.nim",line:0};
	framePtr = F;
		F.line = 141;
		result_202872 = x_202871;
	framePtr = F.prev;

	return result_202872;

}

function HEX21HEX24_202081(h_202083) {
	var result_202084 = 0;

	var F={procname:"hashes.!$",prev:framePtr,filename:"hashes.nim",line:0};
	framePtr = F;
		F.line = 74;
		var h_202085 = (h_202083 >>> 0);
		F.line = 75;
		var res_202098 = ((h_202085 + (h_202085 << 3)) >>> 0);
		F.line = 76;
		res_202098 = (res_202098 ^ ((res_202098 >>> 0) >>> 11));
		F.line = 77;
		res_202098 = ((res_202098 + (res_202098 << 15)) >>> 0);
		F.line = 78;
		result_202084 = (res_202098|0);
	framePtr = F.prev;

	return result_202084;

}

function hash_202980(x_202982) {
	var result_202983 = 0;

	var F={procname:"hashes.hash",prev:framePtr,filename:"hashes.nim",line:0};
	framePtr = F;
		F.line = 165;
		var element_size_202985 = 1;
		F.line = 166;
		var step_size_202986 = divInt(4, element_size_202985);
		F.line = 167;
		var i_202987 = 0;
		L1: do {
			F.line = 168;
				L2: while (true) {
				if (!(i_202987 <= subInt(addInt((x_202982 != null ? (x_202982.length-1) : -1), 1), step_size_202986))) break L2;
					F.line = 169;
					var n_202988 = 0;
					F.line = 175;
					n_202988 = x_202982[chckIndx(i_202987, 0, x_202982.length+0-1)-0];
					F.line = 176;
					result_202983 = HEX21HEX26_202031(result_202983, n_202988);
					F.line = 177;
					i_202987 = addInt(i_202987, step_size_202986);
				}
		} while(false);
		L3: do {
			F.line = 159;
			var i_203207 = 0;
			F.line = 2679;
			var colontmp__250163 = 0;
			F.line = 189;
			colontmp__250163 = (x_202982 != null ? (x_202982.length-1) : -1);
			F.line = 2689;
			var res_250164 = i_202987;
			L4: do {
				F.line = 2690;
					L5: while (true) {
					if (!(res_250164 <= colontmp__250163)) break L5;
						F.line = 159;
						i_203207 = res_250164;
						F.line = 160;
						result_202983 = HEX21HEX26_202031(result_202983, hash_202869(x_202982[chckIndx(i_203207, 0, x_202982.length+0-1)-0]));
						F.line = 2692;
						res_250164 = addInt(res_250164, 1);
					}
			} while(false);
		} while(false);
		F.line = 161;
		result_202983 = HEX21HEX24_202081(result_202983);
	framePtr = F.prev;

	return result_202983;

}

function next_try_206435(h_206437, max_hash_206438) {
	var result_206439 = 0;

	var F={procname:"tables.nextTry",prev:framePtr,filename:"hashcommon.nim",line:0};
	framePtr = F;
		F.line = 30;
		result_206439 = (addInt(h_206437, 1) & max_hash_206438);
	framePtr = F.prev;

	return result_206439;

}

function raw_get_223821(t_223826, key_223827, hc_223828, hc_223828_Idx) {
						var Tmp3;

	var result_223829 = 0;

	var F={procname:"rawGet.rawGet",prev:framePtr,filename:"tables.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 54;
		hc_223828[hc_223828_Idx] = hash_202980(key_223827);
		if ((hc_223828[hc_223828_Idx] == 0)) {
		F.line = 56;
		hc_223828[hc_223828_Idx] = 314159265;
		}
		
		if (((t_223826.data != null ? t_223826.data.length : 0) == 0)) {
		F.line = 38;
		result_223829 = -1;
		break BeforeRet;
		}
		
		F.line = 39;
		var h_223971 = (hc_223828[hc_223828_Idx] & (t_223826.data != null ? (t_223826.data.length-1) : -1));
		L1: do {
			F.line = 40;
				L2: while (true) {
				if (!is_filled_206418(t_223826.data[chckIndx(h_223971, 0, t_223826.data.length+0-1)-0].Field0)) break L2;
						if (!(t_223826.data[chckIndx(h_223971, 0, t_223826.data.length+0-1)-0].Field0 == hc_223828[hc_223828_Idx])) Tmp3 = false; else {							Tmp3 = eqStrings(t_223826.data[chckIndx(h_223971, 0, t_223826.data.length+0-1)-0].Field2, key_223827);						}					if (Tmp3) {
					F.line = 46;
					result_223829 = h_223971;
					break BeforeRet;
					}
					
					F.line = 47;
					h_223971 = next_try_206435(h_223971, (t_223826.data != null ? (t_223826.data.length-1) : -1));
				}
		} while(false);
		F.line = 48;
		result_223829 = subInt(-1, h_223971);
	} while (false);
	framePtr = F.prev;

	return result_223829;

}

function must_rehash_206453(length_206455, counter_206456) {
	var result_206457 = false;

	var F={procname:"tables.mustRehash",prev:framePtr,filename:"hashcommon.nim",line:0};
	framePtr = F;
		if (!((counter_206456 < length_206455))) {
		F.line = 33;
		failed_assert_impl_58851(makeNimstrLit("/home/travis/.choosenim/toolchains/nim-0.20.2/lib/pure/collections/hashcommon.nim(33, 9) `length > counter` "));
		}
		
		F.line = 34;
		result_206457 = ((mulInt(length_206455, 2) < mulInt(counter_206456, 3)) || (subInt(length_206455, counter_206456) < 4));
	framePtr = F.prev;

	return result_206457;

}

function raw_insert_226265(t_226271, data_226274, data_226274_Idx, key_226275, val_226276, hc_226277, h_226278) {
	var F={procname:"rawInsert.rawInsert",prev:framePtr,filename:"tables.nim",line:0};
	framePtr = F;
		F.line = 22;
		data_226274[data_226274_Idx][chckIndx(h_226278, 0, data_226274[data_226274_Idx].length+0-1)-0].Field2 = nimCopy(null, key_226275, NTI44040);
		F.line = 23;
		data_226274[data_226274_Idx][chckIndx(h_226278, 0, data_226274[data_226274_Idx].length+0-1)-0].Field3 = val_226276;
		F.line = 24;
		data_226274[data_226274_Idx][chckIndx(h_226278, 0, data_226274[data_226274_Idx].length+0-1)-0].Field0 = hc_226277;
		F.line = 1233;
		data_226274[data_226274_Idx][chckIndx(h_226278, 0, data_226274[data_226274_Idx].length+0-1)-0].Field1 = -1;
		if ((t_226271.first < 0)) {
		F.line = 1234;
		t_226271.first = h_226278;
		}
		
		if ((0 <= t_226271.last)) {
		F.line = 1235;
		data_226274[data_226274_Idx][chckIndx(t_226271.last, 0, data_226274[data_226274_Idx].length+0-1)-0].Field1 = h_226278;
		}
		
		F.line = 1236;
		t_226271.last = h_226278;
	framePtr = F.prev;

	
}

function enlarge_225167(t_225173) {
	var F={procname:"enlarge.enlarge",prev:framePtr,filename:"tables.nim",line:0};
	framePtr = F;
		F.line = 1239;
		var n_225181 = null;
		F.line = 1240;
		n_225181 = new Array(chckRange(mulInt((t_225173.data != null ? t_225173.data.length : 0), 2), 0, 2147483647)); for (var i=0;i<chckRange(mulInt((t_225173.data != null ? t_225173.data.length : 0), 2), 0, 2147483647);++i) {n_225181[i]={Field0: 0, Field1: 0, Field2: null, Field3: null};}		F.line = 1241;
		var h_225320 = t_225173.first;
		F.line = 1242;
		t_225173.first = -1;
		F.line = 1243;
		t_225173.last = -1;
		F.line = 1244;
		var Tmp1 = t_225173.data; t_225173.data = n_225181; n_225181 = Tmp1;		L2: do {
			F.line = 1245;
				L3: while (true) {
				if (!(0 <= h_225320)) break L3;
					F.line = 1246;
					var nxt_225479 = n_225181[chckIndx(h_225320, 0, n_225181.length+0-1)-0].Field1;
					F.line = 1247;
					var eh_225628 = n_225181[chckIndx(h_225320, 0, n_225181.length+0-1)-0].Field0;
					if (is_filled_206418(eh_225628)) {
					F.line = 1249;
					var j_225635 = (eh_225628 & (t_225173.data != null ? (t_225173.data.length-1) : -1));
					L4: do {
						F.line = 1250;
							L5: while (true) {
							if (!is_filled_206418(t_225173.data[chckIndx(j_225635, 0, t_225173.data.length+0-1)-0].Field0)) break L5;
								F.line = 1251;
								j_225635 = next_try_206435(j_225635, (t_225173.data != null ? (t_225173.data.length-1) : -1));
							}
					} while(false);
					F.line = 1252;
					raw_insert_226265(t_225173, t_225173, "data", n_225181[chckIndx(h_225320, 0, n_225181.length+0-1)-0].Field2, n_225181[chckIndx(h_225320, 0, n_225181.length+0-1)-0].Field3, n_225181[chckIndx(h_225320, 0, n_225181.length+0-1)-0].Field0, j_225635);
					}
					
					F.line = 1253;
					h_225320 = nxt_225479;
				}
		} while(false);
	framePtr = F.prev;

	
}

function raw_get_known_hc_227082(t_227087, key_227088, hc_227089) {
	var result_227090 = 0;

	var F={procname:"rawGetKnownHC.rawGetKnownHC",prev:framePtr,filename:"tables.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		if (((t_227087.data != null ? t_227087.data.length : 0) == 0)) {
		F.line = 38;
		result_227090 = -1;
		break BeforeRet;
		}
		
		F.line = 39;
		var h_227229 = (hc_227089 & (t_227087.data != null ? (t_227087.data.length-1) : -1));
		L1: do {
			F.line = 40;
				L2: while (true) {
				if (!is_filled_206418(t_227087.data[chckIndx(h_227229, 0, t_227087.data.length+0-1)-0].Field0)) break L2;
					if (((t_227087.data[chckIndx(h_227229, 0, t_227087.data.length+0-1)-0].Field0 == hc_227089) && eqStrings(t_227087.data[chckIndx(h_227229, 0, t_227087.data.length+0-1)-0].Field2, key_227088))) {
					F.line = 46;
					result_227090 = h_227229;
					break BeforeRet;
					}
					
					F.line = 47;
					h_227229 = next_try_206435(h_227229, (t_227087.data != null ? (t_227087.data.length-1) : -1));
				}
		} while(false);
		F.line = 48;
		result_227090 = subInt(-1, h_227229);
	} while (false);
	framePtr = F.prev;

	return result_227090;

}

function HEX5BHEX5DHEX3D_223311(t_223317, key_223318, val_223319) {
	var F={procname:"[]=.[]=",prev:framePtr,filename:"tables.nim",line:0};
	framePtr = F;
		if (((t_223317.data != null ? t_223317.data.length : 0) == 0)) {
		if (!(is_power_of_two_102062(64))) {
		F.line = 118;
		failed_assert_impl_58851(makeNimstrLit("/home/travis/.choosenim/toolchains/nim-0.20.2/lib/pure/collections/tableimpl.nim(118, 10) `isPowerOfTwo(defaultInitialSize)` "));
		}
		
		F.line = 119;
		t_223317.counter = 0;
		F.line = 120;
		t_223317.data = new Array(64); for (var i=0;i<64;++i) {t_223317.data[i]={Field0: 0, Field1: 0, Field2: null, Field3: null};}		F.line = 122;
		t_223317.first = -1;
		F.line = 123;
		t_223317.last = -1;
		}
		
		F.line = 57;
		var hc_223801 = [0];
		F.line = 58;
		var index_224439 = raw_get_223821(t_223317, key_223318, hc_223801, 0);
		if ((0 <= index_224439)) {
		F.line = 59;
		t_223317.data[chckIndx(index_224439, 0, t_223317.data.length+0-1)-0].Field3 = val_223319;
		}
		else {
			if (((t_223317.data != null ? t_223317.data.length : 0) == 0)) {
			if (!(is_power_of_two_102062(64))) {
			F.line = 118;
			failed_assert_impl_58851(makeNimstrLit("/home/travis/.choosenim/toolchains/nim-0.20.2/lib/pure/collections/tableimpl.nim(118, 10) `isPowerOfTwo(defaultInitialSize)` "));
			}
			
			F.line = 119;
			t_223317.counter = 0;
			F.line = 120;
			t_223317.data = new Array(64); for (var i=0;i<64;++i) {t_223317.data[i]={Field0: 0, Field1: 0, Field2: null, Field3: null};}			F.line = 122;
			t_223317.first = -1;
			F.line = 123;
			t_223317.last = -1;
			}
			
			if (must_rehash_206453((t_223317.data != null ? t_223317.data.length : 0), t_223317.counter)) {
			F.line = 49;
			enlarge_225167(t_223317);
			F.line = 50;
			index_224439 = raw_get_known_hc_227082(t_223317, key_223318, hc_223801[0]);
			}
			
			F.line = 51;
			index_224439 = subInt(-1, index_224439);
			F.line = 52;
			raw_insert_226265(t_223317, t_223317, "data", key_223318, val_223319, hc_223801[0], index_224439);
			F.line = 60;
			t_223317.counter = addInt(t_223317.counter, 1);
		}
		
	framePtr = F.prev;

	
}

function HEX5BHEX5DHEX3D_228214(obj_228216, key_228217, val_228218) {
		var Tmp1;

	var F={procname:"json.[]=",prev:framePtr,filename:"json.nim",line:0};
	framePtr = F;
		if (!((obj_228216.kind == 5))) {
		F.line = 363;
		failed_assert_impl_58851(makeNimstrLit("/home/travis/.choosenim/toolchains/nim-0.20.2/lib/pure/json.nim(363, 9) `obj.kind == JObject` "));
		}
		
		F.line = 364;
		var Tmp1 = obj_228216;
		if (ConstSet16[Tmp1.kind]===undefined) { raiseFieldError(makeNimstrLit("fields")); }
		HEX5BHEX5DHEX3D_223311(Tmp1.fields, key_228217, val_228218);
	framePtr = F.prev;

	
}

function new_jint_222311(n_222313) {
	var result_222314 = null;

	var F={procname:"json.newJInt",prev:framePtr,filename:"json.nim",line:0};
	framePtr = F;
		F.line = 199;
		result_222314 = {kind: 2, num: n_222313, str: null, fnum: 0.0, bval: false, fields: {data: null, counter: 0, first: 0, last: 0}, elems: null};
	framePtr = F.prev;

	return result_222314;

}

function new_jfloat_222328(n_222330) {
	var result_222331 = null;

	var F={procname:"json.newJFloat",prev:framePtr,filename:"json.nim",line:0};
	framePtr = F;
		F.line = 203;
		result_222331 = {kind: 3, fnum: n_222330, str: null, num: 0, bval: false, fields: {data: null, counter: 0, first: 0, last: 0}, elems: null};
	framePtr = F.prev;

	return result_222331;

}

function new_jstring_222261(s_222263) {
	var result_222264 = null;

	var F={procname:"json.newJString",prev:framePtr,filename:"json.nim",line:0};
	framePtr = F;
		F.line = 191;
		result_222264 = {kind: 4, str: nimCopy(null, s_222263, NTI44040), num: 0, fnum: 0.0, bval: false, fields: {data: null, counter: 0, first: 0, last: 0}, elems: null};
	framePtr = F.prev;

	return result_222264;

}

function new_jbool_222345(b_222347) {
	var result_222348 = null;

	var F={procname:"json.newJBool",prev:framePtr,filename:"json.nim",line:0};
	framePtr = F;
		F.line = 207;
		result_222348 = {kind: 1, bval: b_222347, str: null, num: 0, fnum: 0.0, fields: {data: null, counter: 0, first: 0, last: 0}, elems: null};
	framePtr = F.prev;

	return result_222348;

}

function new_jnull_222362() {
	var result_222364 = null;

	var F={procname:"json.newJNull",prev:framePtr,filename:"json.nim",line:0};
	framePtr = F;
		F.line = 211;
		result_222364 = {kind: 0, str: null, num: 0, fnum: 0.0, bval: false, fields: {data: null, counter: 0, first: 0, last: 0}, elems: null};
	framePtr = F.prev;

	return result_222364;

}

function convert_object_241214(x_241216) {
	var result_241217 = null;

	var F={procname:"json.convertObject",prev:framePtr,filename:"json.nim",line:0};
	framePtr = F;
		F.line = 906;
		switch (get_var_type_240509(x_241216)) {
		case 6:
			F.line = 908;
			result_241217 = new_jarray_222642();
			L1: do {
				F.line = 909;
				var i_241225 = 0;
				F.line = 2716;
				var colontmp__250141 = 0;
				F.line = 909;
				colontmp__250141 = len_240629(x_241216);
				F.line = 2717;
				var i_250142 = 0;
				L2: do {
					F.line = 2718;
						L3: while (true) {
						if (!(i_250142 < colontmp__250141)) break L3;
							F.line = 909;
							i_241225 = i_250142;
							F.line = 910;
							add_222976(result_241217, convert_object_241214(HEX5BHEX5D_241014(x_241216, i_241225)));
							F.line = 2720;
							i_250142 = addInt(i_250142, 1);
						}
				} while(false);
			} while(false);
			break;
		case 5:
			F.line = 912;
			result_241217 = new_jobject_222378();
			F.line = 913;
			for (var property in x_241216) {
        if (x_241216.hasOwnProperty(property)) {
      
			F.line = 916;
			var nim_property_241227 = null;
			F.line = 917;
			var nim_value_241228 = {};
			F.line = 918;
			nim_property_241227 = property; nim_value_241228 = x_241216[property];
			F.line = 919;
			HEX5BHEX5DHEX3D_228214(result_241217, cstrToNimstr(nim_property_241227), convert_object_241214(nim_value_241228));
			F.line = 920;
			}}
			break;
		case 2:
			F.line = 922;
			result_241217 = new_jint_222311(x_241216);
			break;
		case 3:
			F.line = 924;
			result_241217 = new_jfloat_222328(x_241216);
			break;
		case 4:
			F.line = 926;
			result_241217 = new_jstring_222261(cstrToNimstr(x_241216));
			break;
		case 1:
			F.line = 928;
			result_241217 = new_jbool_222345(x_241216);
			break;
		case 0:
			F.line = 930;
			result_241217 = new_jnull_222362();
			break;
		}
	framePtr = F.prev;

	return result_241217;

}

function parse_json_241257(buffer_241259) {
	var result_241260 = null;

	var F={procname:"json.parseJson",prev:framePtr,filename:"json.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 933;
		result_241260 = convert_object_241214(JSON.parse(toJSStr(buffer_241259)));
		break BeforeRet;
	} while (false);
	framePtr = F.prev;

	return result_241260;

}

function generateNimDefinitions(str_250029, public_field_250030) {
	var result_250031 = null;

	var F={procname:"nimjson_js.generateNimDefinitions",prev:framePtr,filename:"nimjson_js.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 5;
		result_250031 = toJSStr(to_type_string_249192(parse_json_241257(cstrToNimstr(str_250029)), makeNimstrLit("Object"), public_field_250030));
		break BeforeRet;
	} while (false);
	framePtr = F.prev;

	return result_250031;

}
