/* Generated by the Nim Compiler v1.2.0 */
var framePtr = null;
var excHandler = 0;
var lastJSError = null;
if (typeof Int8Array === 'undefined') Int8Array = Array;
if (typeof Int16Array === 'undefined') Int16Array = Array;
if (typeof Int32Array === 'undefined') Int32Array = Array;
if (typeof Uint8Array === 'undefined') Uint8Array = Array;
if (typeof Uint16Array === 'undefined') Uint16Array = Array;
if (typeof Uint32Array === 'undefined') Uint32Array = Array;
if (typeof Float32Array === 'undefined') Float32Array = Array;
if (typeof Float64Array === 'undefined') Float64Array = Array;
var NTI1169041 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI11426084 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI1163065 = {size: 0,kind: 1,base: null,node: null,finalizer: null};
var NTI1163006 = {size: 0,kind: 36,base: null,node: null,finalizer: null};
var NTI1163081 = {size: 0,kind: 35,base: null,node: null,finalizer: null};
var NTI11426041 = {size: 0, kind: 14, base: null, node: null, finalizer: null};
var NTI11426045 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI11426043 = {size: 0,kind: 22,base: null,node: null,finalizer: null};
var NTI1787020 = {size: 0,kind: 31,base: null,node: null,finalizer: null};
var NTI11426073 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI11426070 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI11426067 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI1169051 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI1169021 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI1169043 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI5530232 = {size: 0,kind: 31,base: null,node: null,finalizer: null};
var NTI5785011 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI1169053 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI1169035 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI1169049 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI1163045 = {size: 0,kind: 31,base: null,node: null,finalizer: null};
var NTI1325043 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI1168808 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI1169086 = {size: 0,kind: 22,base: null,node: null,finalizer: null};
var NTI1163016 = {size: 0,kind: 29,base: null,node: null,finalizer: null};
var NTI1169081 = {size: 0,kind: 22,base: null,node: null,finalizer: null};
var NTI1169017 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI1169019 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI1169033 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI1169037 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI1163014 = {size: 0,kind: 28,base: null,node: null,finalizer: null};
var NNI1169037 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI1169037.node = NNI1169037;
var NNI1169033 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI1169033.node = NNI1169033;
var NNI1169019 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI1169019.node = NNI1169019;
NTI1169081.base = NTI1169017;
NTI1169086.base = NTI1169017;
var NNI1169017 = {kind: 2, len: 5, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "parent", len: 0, typ: NTI1169081, name: "parent", sons: null}, 
{kind: 1, offset: "name", len: 0, typ: NTI1163016, name: "name", sons: null}, 
{kind: 1, offset: "message", len: 0, typ: NTI1163014, name: "msg", sons: null}, 
{kind: 1, offset: "trace", len: 0, typ: NTI1163014, name: "trace", sons: null}, 
{kind: 1, offset: "up", len: 0, typ: NTI1169086, name: "up", sons: null}]};
NTI1169017.node = NNI1169017;
var NNI1168808 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI1168808.node = NNI1168808;
NTI1169017.base = NTI1168808;
NTI1169019.base = NTI1169017;
NTI1169033.base = NTI1169019;
NTI1169037.base = NTI1169033;
var NNI1325043 = {kind: 2, len: 2, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "Field0", len: 0, typ: NTI1163016, name: "Field0", sons: null}, 
{kind: 1, offset: "Field1", len: 0, typ: NTI1163045, name: "Field1", sons: null}]};
NTI1325043.node = NNI1325043;
var NNI1169049 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI1169049.node = NNI1169049;
NTI1169049.base = NTI1169019;
var NNI1169035 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI1169035.node = NNI1169035;
NTI1169035.base = NTI1169033;
var NNI1169053 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI1169053.node = NNI1169053;
NTI1169053.base = NTI1169019;
var NNI5785011 = {kind: 2, len: 2, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "a", len: 0, typ: NTI5530232, name: "a", sons: null}, 
{kind: 1, offset: "b", len: 0, typ: NTI1163045, name: "b", sons: null}]};
NTI5785011.node = NNI5785011;
var NNI1169043 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI1169043.node = NNI1169043;
var NNI1169021 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI1169021.node = NNI1169021;
NTI1169021.base = NTI1169017;
NTI1169043.base = NTI1169021;
var NNI1169051 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI1169051.node = NNI1169051;
NTI1169051.base = NTI1169019;
var NNI11426041 = {kind: 2, offset: 0, typ: null, name: null, len: 7, sons: {"0": {kind: 1, offset: 0, typ: NTI11426041, name: "JNull", len: 0, sons: null}, 
"1": {kind: 1, offset: 1, typ: NTI11426041, name: "JBool", len: 0, sons: null}, 
"2": {kind: 1, offset: 2, typ: NTI11426041, name: "JInt", len: 0, sons: null}, 
"3": {kind: 1, offset: 3, typ: NTI11426041, name: "JFloat", len: 0, sons: null}, 
"4": {kind: 1, offset: 4, typ: NTI11426041, name: "JString", len: 0, sons: null}, 
"5": {kind: 1, offset: 5, typ: NTI11426041, name: "JObject", len: 0, sons: null}, 
"6": {kind: 1, offset: 6, typ: NTI11426041, name: "JArray", len: 0, sons: null}}};
NTI11426041.node = NNI11426041;
NTI11426084.base = NTI11426043;
var NNI11426045 = {kind: 3, offset: "kind", len: 7, typ: NTI11426041, name: "kind", sons: [[setConstr(4), {kind: 1, offset: "str", len: 0, typ: NTI1163014, name: "str", sons: null}], 
[setConstr(2), {kind: 1, offset: "num", len: 0, typ: NTI1163081, name: "num", sons: null}], 
[setConstr(3), {kind: 1, offset: "fnum", len: 0, typ: NTI1163006, name: "fnum", sons: null}], 
[setConstr(1), {kind: 1, offset: "bval", len: 0, typ: NTI1163065, name: "bval", sons: null}], 
[setConstr(0), {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []}], 
[setConstr(5), {kind: 1, offset: "fields", len: 0, typ: NTI11426067, name: "fields", sons: null}], 
[setConstr(6), {kind: 1, offset: "elems", len: 0, typ: NTI11426084, name: "elems", sons: null}]]};
NTI11426045.node = NNI11426045;
NTI11426043.base = NTI11426045;
var NNI11426073 = {kind: 2, len: 4, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "Field0", len: 0, typ: NTI1787020, name: "Field0", sons: null}, 
{kind: 1, offset: "Field1", len: 0, typ: NTI1163045, name: "Field1", sons: null}, 
{kind: 1, offset: "Field2", len: 0, typ: NTI1163014, name: "Field2", sons: null}, 
{kind: 1, offset: "Field3", len: 0, typ: NTI11426043, name: "Field3", sons: null}]};
NTI11426073.node = NNI11426073;
NTI11426070.base = NTI11426073;
var NNI11426067 = {kind: 2, len: 4, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "data", len: 0, typ: NTI11426070, name: "data", sons: null}, 
{kind: 1, offset: "counter", len: 0, typ: NTI1163045, name: "counter", sons: null}, 
{kind: 1, offset: "first", len: 0, typ: NTI1163045, name: "first", sons: null}, 
{kind: 1, offset: "last", len: 0, typ: NTI1163045, name: "last", sons: null}]};
NTI11426067.node = NNI11426067;
var NNI1169041 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI1169041.node = NNI1169041;
NTI1169041.base = NTI1169019;
function makeNimstrLit(c_1390062) {
      var ln = c_1390062.length;
  var result = new Array(ln);
  for (var i = 0; i < ln; ++i) {
    result[i] = c_1390062.charCodeAt(i);
  }
  return result;
  

  
}
function setConstr() {
        var result = {};
    for (var i = 0; i < arguments.length; ++i) {
      var x = arguments[i];
      if (typeof(x) == "object") {
        for (var j = x[0]; j <= x[1]; ++j) {
          result[j] = true;
        }
      } else {
        result[x] = true;
      }
    }
    return result;
  

  
}
var ConstSet1 = setConstr(17, 16, 4, 18, 27, 19, 23, 22, 21);
function nimCopy(dest_1405023, src_1405024, ti_1405025) {
  var result_1410219 = null;

    switch (ti_1405025.kind) {
    case 21:
    case 22:
    case 23:
    case 5:
      if (!(is_fat_pointer_1400401(ti_1405025))) {
      result_1410219 = src_1405024;
      }
      else {
        result_1410219 = [src_1405024[0], src_1405024[1]];
      }
      
      break;
    case 19:
            if (dest_1405023 === null || dest_1405023 === undefined) {
        dest_1405023 = {};
      }
      else {
        for (var key in dest_1405023) { delete dest_1405023[key]; }
      }
      for (var key in src_1405024) { dest_1405023[key] = src_1405024[key]; }
      result_1410219 = dest_1405023;
    
      break;
    case 18:
    case 17:
      if (!((ti_1405025.base == null))) {
      result_1410219 = nimCopy(dest_1405023, src_1405024, ti_1405025.base);
      }
      else {
      if ((ti_1405025.kind == 17)) {
      result_1410219 = (dest_1405023 === null || dest_1405023 === undefined) ? {m_type: ti_1405025} : dest_1405023;
      }
      else {
        result_1410219 = (dest_1405023 === null || dest_1405023 === undefined) ? {} : dest_1405023;
      }
      }
      nimCopyAux(result_1410219, src_1405024, ti_1405025.node);
      break;
    case 24:
    case 4:
    case 27:
    case 16:
            if (src_1405024 === null) {
        result_1410219 = null;
      }
      else {
        if (dest_1405023 === null || dest_1405023 === undefined) {
          dest_1405023 = new Array(src_1405024.length);
        }
        else {
          dest_1405023.length = src_1405024.length;
        }
        result_1410219 = dest_1405023;
        for (var i = 0; i < src_1405024.length; ++i) {
          result_1410219[i] = nimCopy(result_1410219[i], src_1405024[i], ti_1405025.base);
        }
      }
    
      break;
    case 28:
            if (src_1405024 !== null) {
        result_1410219 = src_1405024.slice(0);
      }
    
      break;
    default: 
      result_1410219 = src_1405024;
      break;
    }

  return result_1410219;

}
function mnewString(len_1395044) {
        return new Array(len_1395044);
  

  
}
function arrayConstr(len_1415067, value_1415068, typ_1415069) {
        var result = new Array(len_1415067);
    for (var i = 0; i < len_1415067; ++i) result[i] = nimCopy(null, value_1415068, typ_1415069);
    return result;
  

  
}
function cstrToNimstr(c_1390079) {
      var ln = c_1390079.length;
  var result = new Array(ln);
  var r = 0;
  for (var i = 0; i < ln; ++i) {
    var ch = c_1390079.charCodeAt(i);

    if (ch < 128) {
      result[r] = ch;
    }
    else {
      if (ch < 2048) {
        result[r] = (ch >> 6) | 192;
      }
      else {
        if (ch < 55296 || ch >= 57344) {
          result[r] = (ch >> 12) | 224;
        }
        else {
            ++i;
            ch = 65536 + (((ch & 1023) << 10) | (c_1390079.charCodeAt(i) & 1023));
            result[r] = (ch >> 18) | 240;
            ++r;
            result[r] = ((ch >> 12) & 63) | 128;
        }
        ++r;
        result[r] = ((ch >> 6) & 63) | 128;
      }
      ++r;
      result[r] = (ch & 63) | 128;
    }
    ++r;
  }
  return result;
  

  
}
function toJSStr(s_1390096) {
                    var Tmp5;
            var Tmp7;

  var result_1390097 = null;

    var res_1390170 = new_seq_1390128((s_1390096 != null ? s_1390096.length : 0));
    var i_1390172 = 0;
    var j_1390174 = 0;
    L1: do {
        L2: while (true) {
        if (!(i_1390172 < (s_1390096 != null ? s_1390096.length : 0))) break L2;
          var c_1390175 = s_1390096[i_1390172];
          if ((c_1390175 < 128)) {
          res_1390170[j_1390174] = String.fromCharCode(c_1390175);
          i_1390172 += 1;
          }
          else {
            var helper_1390198 = new_seq_1390128(0);
            L3: do {
                L4: while (true) {
                if (!true) break L4;
                  var code_1390199 = c_1390175.toString(16);
                  if (((code_1390199 != null ? code_1390199.length : 0) == 1)) {
                  if (helper_1390198 != null) { helper_1390198.push("%0"); } else { helper_1390198 = ["%0"]; };
                  }
                  else {
                  if (helper_1390198 != null) { helper_1390198.push("%"); } else { helper_1390198 = ["%"]; };
                  }
                  
                  if (helper_1390198 != null) { helper_1390198.push(code_1390199); } else { helper_1390198 = [code_1390199]; };
                  i_1390172 += 1;
                    if (((s_1390096 != null ? s_1390096.length : 0) <= i_1390172)) Tmp5 = true; else {                      Tmp5 = (s_1390096[i_1390172] < 128);                    }                  if (Tmp5) {
                  break L3;
                  }
                  
                  c_1390175 = s_1390096[i_1390172];
                }
            } while(false);
++excHandler;
            Tmp7 = framePtr;
            try {
            res_1390170[j_1390174] = decodeURIComponent(helper_1390198.join(""));
--excHandler;
} catch (EXC) {
 var prevJSError = lastJSError;
 lastJSError = EXC;
 --excHandler;
            framePtr = Tmp7;
            res_1390170[j_1390174] = helper_1390198.join("");
            lastJSError = prevJSError;
            } finally {
            framePtr = Tmp7;
            }
          }
          
          j_1390174 += 1;
        }
    } while(false);
    if (res_1390170 === null) res_1390170 = [];
               if (res_1390170.length < j_1390174) { for (var i=res_1390170.length;i<j_1390174;++i) res_1390170.push(null); }
               else { res_1390170.length = j_1390174; };
    result_1390097 = res_1390170.join("");

  return result_1390097;

}
function raiseException(e_1355218, ename_1355219) {
    e_1355218.name = ename_1355219;
    if ((excHandler == 0)) {
    unhandledException(e_1355218);
    }
    
    e_1355218.trace = nimCopy(null, raw_write_stack_trace_1345059(), NTI1163014);
    throw e_1355218;

  
}
function addInt(a_1395403, b_1395404) {
        var result = a_1395403 + b_1395404;
    if (result > 2147483647 || result < -2147483648) raiseOverflow();
    return result;
  

  
}
var ConstSet2 = setConstr(60, 62, 94);
function chckIndx(i_1415086, a_1415087, b_1415088) {
      var Tmp1;

  var result_1415089 = 0;

  BeforeRet: do {
      if (!(a_1415087 <= i_1415086)) Tmp1 = false; else {        Tmp1 = (i_1415086 <= b_1415088);      }    if (Tmp1) {
    result_1415089 = i_1415086;
    break BeforeRet;
    }
    else {
    raiseIndexError(i_1415086, a_1415087, b_1415088);
    }
    
  } while (false);

  return result_1415089;

}
var ConstSet3 = setConstr(60, 62, 94);
var ConstSet4 = setConstr(45, 43, 32);
var ConstSet5 = setConstr([48, 57]);
var ConstSet6 = setConstr([48, 57]);
var ConstSet7 = setConstr([48, 57]);
function subInt(a_1395421, b_1395422) {
        var result = a_1395421 - b_1395422;
    if (result > 2147483647 || result < -2147483648) raiseOverflow();
    return result;
  

  
}
function divInt(a_1395457, b_1395458) {
        if (b_1395458 == 0) raiseDivByZero();
    if (b_1395458 == -1 && a_1395457 == 2147483647) raiseOverflow();
    return Math.trunc(a_1395457 / b_1395458);
  

  
}
function mulInt(a_1395439, b_1395440) {
        var result = a_1395439 * b_1395440;
    if (result > 2147483647 || result < -2147483648) raiseOverflow();
    return result;
  

  
}
var ConstSet8 = setConstr([65, 90], [97, 122]);
function chckRange(i_1420016, a_1420017, b_1420018) {
      var Tmp1;

  var result_1420019 = 0;

  BeforeRet: do {
      if (!(a_1420017 <= i_1420016)) Tmp1 = false; else {        Tmp1 = (i_1420016 <= b_1420018);      }    if (Tmp1) {
    result_1420019 = i_1420016;
    break BeforeRet;
    }
    else {
    raiseRangeError();
    }
    
  } while (false);

  return result_1420019;

}
var ConstSet9 = setConstr([97, 122]);
var ConstSet10 = setConstr(5);
function raiseFieldError(f_1385047) {
    raiseException({message: nimCopy(null, f_1385047, NTI1163014), parent: null, m_type: NTI1169051, name: null, trace: null, up: null}, "FieldError");

  
}
var ConstSet11 = setConstr(6);
var ConstSet12 = setConstr(6);
var ConstSet13 = setConstr(6);
var ConstSet14 = setConstr(6);
var ConstSet15 = setConstr(6);
function modInt(a_1395475, b_1395476) {
        if (b_1395476 == 0) raiseDivByZero();
    if (b_1395476 == -1 && a_1395475 == 2147483647) raiseOverflow();
    return Math.trunc(a_1395475 % b_1395476);
  

  
}
function eqStrings(a_1395222, b_1395223) {
        if (a_1395222 == b_1395223) return true;
    if (a_1395222 === null && b_1395223.length == 0) return true;
    if (b_1395223 === null && a_1395222.length == 0) return true;
    if ((!a_1395222) || (!b_1395223)) return false;
    var alen = a_1395222.length;
    if (alen != b_1395223.length) return false;
    for (var i = 0; i < alen; ++i)
      if (a_1395222[i] != b_1395223[i]) return false;
    return true;
  

  
}
function genericReset(x_1415044, ti_1415045) {
  var result_1415046 = null;

    result_1415046 = null;
    switch (ti_1415045.kind) {
    case 21:
    case 22:
    case 23:
    case 5:
      if (is_fat_pointer_1400401(ti_1415045)) {
              result_1415046 = [null, 0];
      
      }
      
      break;
    case 19:
            result_1415046 = {};
    
      break;
    case 18:
    case 17:
      if ((ti_1415045.kind == 17)) {
      result_1415046 = {m_type: ti_1415045};
      }
      else {
        result_1415046 = {};
      }
      
      break;
    case 24:
    case 27:
            result_1415046 = [];
    
      break;
    case 4:
    case 16:
            result_1415046 = new Array(x_1415044.length);
      for (var i = 0; i < x_1415044.length; ++i) {
        result_1415046[i] = genericReset(x_1415044[i], ti_1415045.base);
      }
    
      break;
    default: 
      break;
    }

  return result_1415046;

}
var ConstSet16 = setConstr(5);
var nim_program_result = 0;
var global_raise_hook_1307018 = [null];
var local_raise_hook_1307023 = [null];
var out_of_mem_hook_1307026 = [null];
var unhandled_exception_hook_1307031 = [null];
if (!Math.trunc) {
  Math.trunc = function(v) {
    v = +v;
    if (!isFinite(v)) return v;
    return (v - v % 1) || (v < 0 ? -0 : v === 0 ? v : 0);
  };
}

var object_id_1790031 = [0];
function is_fat_pointer_1400401(ti_1400403) {
  var result_1400404 = false;

  BeforeRet: do {
    result_1400404 = !((ConstSet1[ti_1400403.base.kind] != undefined));
    break BeforeRet;
  } while (false);

  return result_1400404;

}
function nimCopyAux(dest_1405028, src_1405029, n_1405031) {
    switch (n_1405031.kind) {
    case 0:
      break;
    case 1:
            dest_1405028[n_1405031.offset] = nimCopy(dest_1405028[n_1405031.offset], src_1405029[n_1405031.offset], n_1405031.typ);
    
      break;
    case 2:
          for (var i = 0; i < n_1405031.sons.length; i++) {
      nimCopyAux(dest_1405028, src_1405029, n_1405031.sons[i]);
    }
    
      break;
    case 3:
            dest_1405028[n_1405031.offset] = nimCopy(dest_1405028[n_1405031.offset], src_1405029[n_1405031.offset], n_1405031.typ);
      for (var i = 0; i < n_1405031.sons.length; ++i) {
        nimCopyAux(dest_1405028, src_1405029, n_1405031.sons[i][1]);
      }
    
      break;
    }

  
}
function add_1307042(x_1307045, x_1307045_Idx, y_1307046) {
          if (x_1307045[x_1307045_Idx] === null) { x_1307045[x_1307045_Idx] = []; }
      var off = x_1307045[x_1307045_Idx].length;
      x_1307045[x_1307045_Idx].length += y_1307046.length;
      for (var i = 0; i < y_1307046.length; ++i) {
        x_1307045[x_1307045_Idx][off+i] = y_1307046.charCodeAt(i);
      }
    

  
}
function aux_write_stack_trace_1325038(f_1325040) {
          var Tmp3;

  var result_1325041 = [null];

    var it_1325049 = f_1325040;
    var i_1325051 = 0;
    var total_1325053 = 0;
    var temp_frames_1325060 = arrayConstr(64, {Field0: null, Field1: 0}, NTI1325043);
    L1: do {
        L2: while (true) {
          if (!!((it_1325049 == null))) Tmp3 = false; else {            Tmp3 = (i_1325051 <= 63);          }        if (!Tmp3) break L2;
          temp_frames_1325060[i_1325051].Field0 = it_1325049.procname;
          temp_frames_1325060[i_1325051].Field1 = it_1325049.line;
          i_1325051 += 1;
          total_1325053 += 1;
          it_1325049 = it_1325049.prev;
        }
    } while(false);
    L4: do {
        L5: while (true) {
        if (!!((it_1325049 == null))) break L5;
          total_1325053 += 1;
          it_1325049 = it_1325049.prev;
        }
    } while(false);
    result_1325041[0] = nimCopy(null, [], NTI1163014);
    if (!((total_1325053 == i_1325051))) {
    if (result_1325041[0] != null) { result_1325041[0] = (result_1325041[0]).concat(makeNimstrLit("(")); } else { result_1325041[0] = makeNimstrLit("("); };
    if (result_1325041[0] != null) { result_1325041[0] = (result_1325041[0]).concat(cstrToNimstr(((total_1325053 - i_1325051))+"")); } else { result_1325041[0] = cstrToNimstr(((total_1325053 - i_1325051))+"").slice(); };
    if (result_1325041[0] != null) { result_1325041[0] = (result_1325041[0]).concat(makeNimstrLit(" calls omitted) ...\x0A")); } else { result_1325041[0] = makeNimstrLit(" calls omitted) ...\x0A"); };
    }
    
    L6: do {
      var j_1340236 = 0;
      var colontmp__12161054 = 0;
      colontmp__12161054 = (i_1325051 - 1);
      var res_12161059 = colontmp__12161054;
      L7: do {
          L8: while (true) {
          if (!(0 <= res_12161059)) break L8;
            j_1340236 = res_12161059;
            add_1307042(result_1325041, 0, temp_frames_1325060[j_1340236].Field0);
            if ((0 < temp_frames_1325060[j_1340236].Field1)) {
            if (result_1325041[0] != null) { result_1325041[0] = (result_1325041[0]).concat(makeNimstrLit(", line: ")); } else { result_1325041[0] = makeNimstrLit(", line: "); };
            if (result_1325041[0] != null) { result_1325041[0] = (result_1325041[0]).concat(cstrToNimstr((temp_frames_1325060[j_1340236].Field1)+"")); } else { result_1325041[0] = cstrToNimstr((temp_frames_1325060[j_1340236].Field1)+"").slice(); };
            }
            
            if (result_1325041[0] != null) { result_1325041[0] = (result_1325041[0]).concat(makeNimstrLit("\x0A")); } else { result_1325041[0] = makeNimstrLit("\x0A"); };
            res_12161059 -= 1;
          }
      } while(false);
    } while(false);

  return result_1325041[0];

}
function raw_write_stack_trace_1345059() {
  var result_1345061 = null;

    if (!((framePtr == null))) {
    result_1345061 = nimCopy(null, (makeNimstrLit("Traceback (most recent call last)\x0A") || []).concat(aux_write_stack_trace_1325038(framePtr) || []), NTI1163014);
    }
    else {
      result_1345061 = nimCopy(null, makeNimstrLit("No stack traceback available\x0A"), NTI1163014);
    }
    

  return result_1345061;

}
function new_seq_1390128(len_1390131) {
  var result_1390133 = null;

  var F={procname:"newSeq.newSeq",prev:framePtr,filename:"system.nim",line:0};
  framePtr = F;
    F.line = 643;
    result_1390133 = new Array(len_1390131); for (var i=0;i<len_1390131;++i) {result_1390133[i]=null;}  framePtr = F.prev;

  return result_1390133;

}
function unhandledException(e_1350059) {
    var buf_1350060 = [[]];
    if (!(((e_1350059.message != null ? e_1350059.message.length : 0) == 0))) {
    if (buf_1350060[0] != null) { buf_1350060[0] = (buf_1350060[0]).concat(makeNimstrLit("Error: unhandled exception: ")); } else { buf_1350060[0] = makeNimstrLit("Error: unhandled exception: "); };
    if (buf_1350060[0] != null) { buf_1350060[0] = (buf_1350060[0]).concat(e_1350059.message); } else { buf_1350060[0] = e_1350059.message.slice(); };
    }
    else {
    if (buf_1350060[0] != null) { buf_1350060[0] = (buf_1350060[0]).concat(makeNimstrLit("Error: unhandled exception")); } else { buf_1350060[0] = makeNimstrLit("Error: unhandled exception"); };
    }
    
    if (buf_1350060[0] != null) { buf_1350060[0] = (buf_1350060[0]).concat(makeNimstrLit(" [")); } else { buf_1350060[0] = makeNimstrLit(" ["); };
    add_1307042(buf_1350060, 0, e_1350059.name);
    if (buf_1350060[0] != null) { buf_1350060[0] = (buf_1350060[0]).concat(makeNimstrLit("]\x0A")); } else { buf_1350060[0] = makeNimstrLit("]\x0A"); };
    if (buf_1350060[0] != null) { buf_1350060[0] = (buf_1350060[0]).concat(raw_write_stack_trace_1345059()); } else { buf_1350060[0] = raw_write_stack_trace_1345059().slice(); };
    var cbuf_1355201 = toJSStr(buf_1350060[0]);
    framePtr = null;
      if (typeof(Error) !== "undefined") {
    throw new Error(cbuf_1355201);
  }
  else {
    throw cbuf_1355201;
  }
  

  
}
function raiseOverflow() {
    raiseException({message: makeNimstrLit("over- or underflow"), parent: null, m_type: NTI1169037, name: null, trace: null, up: null}, "OverflowError");

  
}
function raiseIndexError(i_1375047, a_1375048, b_1375049) {
    var Tmp1;

    if ((b_1375049 < a_1375048)) {
    Tmp1 = makeNimstrLit("index out of bounds, the container is empty");
    }
    else {
    Tmp1 = (makeNimstrLit("index ") || []).concat(cstrToNimstr((i_1375047)+"") || [],makeNimstrLit(" not in ") || [],cstrToNimstr((a_1375048)+"") || [],makeNimstrLit(" .. ") || [],cstrToNimstr((b_1375049)+"") || []);
    }
    
    raiseException({message: nimCopy(null, Tmp1, NTI1163014), parent: null, m_type: NTI1169049, name: null, trace: null, up: null}, "IndexError");

  
}
function raiseDivByZero() {
    raiseException({message: makeNimstrLit("division by zero"), parent: null, m_type: NTI1169035, name: null, trace: null, up: null}, "DivByZeroError");

  
}
function parse_saturated_natural_2375017(s_2375019, b_2375021, b_2375021_Idx, start_2375022) {
      var Tmp1;
          var Tmp4;

  var result_2375024 = 0;

  var F={procname:"parseutils.parseSaturatedNatural",prev:framePtr,filename:"parseutils.nim",line:0};
  framePtr = F;
    F.line = 476;
    var i_2375025 = start_2375022;
    if (((i_2375025 < (s_2375019 != null ? s_2375019.length : 0)) && (s_2375019[chckIndx(i_2375025, 0, (s_2375019 != null ? s_2375019.length : 0)+0-1)-0] == 43))) {
    F.line = 477;
    i_2375025 = addInt(i_2375025, 1);
    }
    
      if (!(i_2375025 < (s_2375019 != null ? s_2375019.length : 0))) Tmp1 = false; else {        Tmp1 = (ConstSet6[s_2375019[chckIndx(i_2375025, 0, (s_2375019 != null ? s_2375019.length : 0)+0-1)-0]] != undefined);      }    if (Tmp1) {
    F.line = 479;
    b_2375021[b_2375021_Idx] = 0;
    L2: do {
      F.line = 480;
        L3: while (true) {
          if (!(i_2375025 < (s_2375019 != null ? s_2375019.length : 0))) Tmp4 = false; else {            Tmp4 = (ConstSet7[s_2375019[chckIndx(i_2375025, 0, (s_2375019 != null ? s_2375019.length : 0)+0-1)-0]] != undefined);          }        if (!Tmp4) break L3;
          F.line = 481;
          var c_2385016 = subInt(s_2375019[chckIndx(i_2375025, 0, (s_2375019 != null ? s_2375019.length : 0)+0-1)-0], 48);
          if ((b_2375021[b_2375021_Idx] <= divInt(subInt(2147483647, c_2385016), 10))) {
          F.line = 483;
          b_2375021[b_2375021_Idx] = addInt(mulInt(b_2375021[b_2375021_Idx], 10), c_2385016);
          }
          else {
            F.line = 485;
            b_2375021[b_2375021_Idx] = 2147483647;
          }
          
          F.line = 486;
          i_2375025 = addInt(i_2375025, 1);
          L5: do {
            F.line = 487;
              L6: while (true) {
              if (!((i_2375025 < (s_2375019 != null ? s_2375019.length : 0)) && (s_2375019[chckIndx(i_2375025, 0, (s_2375019 != null ? s_2375019.length : 0)+0-1)-0] == 95))) break L6;
                F.line = 487;
                i_2375025 = addInt(i_2375025, 1);
              }
          } while(false);
        }
    } while(false);
    F.line = 488;
    result_2375024 = subInt(i_2375025, start_2375022);
    }
    
  framePtr = F.prev;

  return result_2375024;

}
function raiseRangeError() {
    raiseException({message: makeNimstrLit("value out of range"), parent: null, m_type: NTI1169053, name: null, trace: null, up: null}, "RangeError");

  
}
function HEX5BHEX5D_5785068(s_5785072, x_5785074) {
  var result_5785075 = null;

  var F={procname:"[].[]",prev:framePtr,filename:"system.nim",line:0};
  framePtr = F;
    F.line = 2436;
    var a_5785201 = x_5785074.a;
    F.line = 2437;
    var l_5785401 = addInt(subInt(subInt((s_5785072 != null ? s_5785072.length : 0), x_5785074.b), a_5785201), 1);
    F.line = 2438;
    result_5785075 = nimCopy(null, mnewString(chckRange(l_5785401, 0, 2147483647)), NTI1163014);
    L1: do {
      F.line = 2439;
      var i_5785409 = 0;
      F.line = 106;
      var i_12161085 = 0;
      L2: do {
        F.line = 107;
          L3: while (true) {
          if (!(i_12161085 < l_5785401)) break L3;
            F.line = 2439;
            i_5785409 = i_12161085;
            F.line = 2439;
            result_5785075[chckIndx(i_5785409, 0, (result_5785075 != null ? result_5785075.length : 0)+0-1)-0] = s_5785072[chckIndx(addInt(i_5785409, a_5785201), 0, (s_5785072 != null ? s_5785072.length : 0)+0-1)-0];
            F.line = 109;
            i_12161085 = addInt(i_12161085, 1);
          }
      } while(false);
    } while(false);
  framePtr = F.prev;

  return result_5785075;

}
function HEX2EHEX2E_5785001(a_5785006, b_5785008) {
  var result_5785014 = {a: 0, b: 0};

  var F={procname:".....",prev:framePtr,filename:"system.nim",line:0};
  framePtr = F;
    F.line = 469;
    nimCopy(result_5785014, {a: a_5785006, b: b_5785008}, NTI5785011);
  framePtr = F.prev;

  return result_5785014;

}
function parse_standard_format_specifier_12015322(s_12015324, start_12015325, ignore_unknown_suffix_12015327) {
      var Tmp1;
      var Tmp2;
      var Tmp3;

  var result_12015328 = {fill: 0, align: 0, sign: 0, alternateForm: false, padWithZero: false, minimumWidth: 0, precision: 0, typ: 0, endPosition: 0};

  var F={procname:"strformat.parseStandardFormatSpecifier",prev:framePtr,filename:"strformat.nim",line:0};
  framePtr = F;
    F.line = 379;
    result_12015328.fill = 32;
    F.line = 380;
    result_12015328.align = 0;
    F.line = 381;
    result_12015328.sign = 45;
    F.line = 382;
    var i_12015331 = start_12015325;
    if (((addInt(i_12015331, 1) < (s_12015324 != null ? s_12015324.length : 0)) && (ConstSet2[s_12015324[chckIndx(addInt(i_12015331, 1), 0, (s_12015324 != null ? s_12015324.length : 0)+0-1)-0]] != undefined))) {
    F.line = 384;
    result_12015328.fill = s_12015324[chckIndx(i_12015331, 0, (s_12015324 != null ? s_12015324.length : 0)+0-1)-0];
    F.line = 385;
    result_12015328.align = s_12015324[chckIndx(addInt(i_12015331, 1), 0, (s_12015324 != null ? s_12015324.length : 0)+0-1)-0];
    F.line = 386;
    i_12015331 = addInt(i_12015331, 2);
    }
    else {
    if (((i_12015331 < (s_12015324 != null ? s_12015324.length : 0)) && (ConstSet3[s_12015324[chckIndx(i_12015331, 0, (s_12015324 != null ? s_12015324.length : 0)+0-1)-0]] != undefined))) {
    F.line = 388;
    result_12015328.align = s_12015324[chckIndx(i_12015331, 0, (s_12015324 != null ? s_12015324.length : 0)+0-1)-0];
    F.line = 389;
    i_12015331 = addInt(i_12015331, 1);
    }
    }
    if (((i_12015331 < (s_12015324 != null ? s_12015324.length : 0)) && (ConstSet4[s_12015324[chckIndx(i_12015331, 0, (s_12015324 != null ? s_12015324.length : 0)+0-1)-0]] != undefined))) {
    F.line = 392;
    result_12015328.sign = s_12015324[chckIndx(i_12015331, 0, (s_12015324 != null ? s_12015324.length : 0)+0-1)-0];
    F.line = 393;
    i_12015331 = addInt(i_12015331, 1);
    }
    
    if (((i_12015331 < (s_12015324 != null ? s_12015324.length : 0)) && (s_12015324[chckIndx(i_12015331, 0, (s_12015324 != null ? s_12015324.length : 0)+0-1)-0] == 35))) {
    F.line = 396;
    result_12015328.alternateForm = true;
    F.line = 397;
    i_12015331 = addInt(i_12015331, 1);
    }
    
      if (!((addInt(i_12015331, 1) < (s_12015324 != null ? s_12015324.length : 0)) && (s_12015324[chckIndx(i_12015331, 0, (s_12015324 != null ? s_12015324.length : 0)+0-1)-0] == 48))) Tmp1 = false; else {        Tmp1 = (ConstSet5[s_12015324[chckIndx(addInt(i_12015331, 1), 0, (s_12015324 != null ? s_12015324.length : 0)+0-1)-0]] != undefined);      }    if (Tmp1) {
    F.line = 400;
    result_12015328.padWithZero = true;
    F.line = 401;
    i_12015331 = addInt(i_12015331, 1);
    }
    
    F.line = 403;
    var parsed_length_12035015 = parse_saturated_natural_2375017(s_12015324, result_12015328, "minimumWidth", i_12015331);
    F.line = 404;
    i_12015331 = addInt(i_12015331, parsed_length_12035015);
    if (((i_12015331 < (s_12015324 != null ? s_12015324.length : 0)) && (s_12015324[chckIndx(i_12015331, 0, (s_12015324 != null ? s_12015324.length : 0)+0-1)-0] == 46))) {
    F.line = 406;
    i_12015331 = addInt(i_12015331, 1);
    F.line = 407;
    var parsed_length_b_12035029 = parse_saturated_natural_2375017(s_12015324, result_12015328, "precision", i_12015331);
    F.line = 408;
    i_12015331 = addInt(i_12015331, parsed_length_b_12035029);
    }
    else {
      F.line = 410;
      result_12015328.precision = -1;
    }
    
      if (!(i_12015331 < (s_12015324 != null ? s_12015324.length : 0))) Tmp2 = false; else {        Tmp2 = (ConstSet8[s_12015324[chckIndx(i_12015331, 0, (s_12015324 != null ? s_12015324.length : 0)+0-1)-0]] != undefined);      }    if (Tmp2) {
    F.line = 413;
    result_12015328.typ = s_12015324[chckIndx(i_12015331, 0, (s_12015324 != null ? s_12015324.length : 0)+0-1)-0];
    F.line = 414;
    i_12015331 = addInt(i_12015331, 1);
    }
    
    F.line = 415;
    result_12015328.endPosition = i_12015331;
      if (!!((i_12015331 == (s_12015324 != null ? s_12015324.length : 0)))) Tmp3 = false; else {        Tmp3 = !(ignore_unknown_suffix_12015327);      }    if (Tmp3) {
    F.line = 417;
    raiseException({message: (makeNimstrLit("invalid format string, cannot parse: ") || []).concat(HEX5BHEX5D_5785068(s_12015324, HEX2EHEX2E_5785001(i_12015331, 1)) || []), parent: null, m_type: NTI1169043, name: null, trace: null, up: null}, "ValueError");
    }
    
  framePtr = F.prev;

  return result_12015328;

}
function nucruneLen(s_2456829) {
  var result_2456830 = 0;

  var F={procname:"unicode.runeLen",prev:framePtr,filename:"unicode.nim",line:0};
  framePtr = F;
    F.line = 41;
    var i_2456832 = 0;
    L1: do {
      F.line = 42;
        L2: while (true) {
        if (!(i_2456832 < (s_2456829 != null ? s_2456829.length : 0))) break L2;
          if ((s_2456829[chckIndx(i_2456832, 0, (s_2456829 != null ? s_2456829.length : 0)+0-1)-0] <= 127)) {
          F.line = 43;
          i_2456832 = addInt(i_2456832, 1);
          }
          else {
          if ((((s_2456829[chckIndx(i_2456832, 0, (s_2456829 != null ? s_2456829.length : 0)+0-1)-0] >>> 0) >>> 5) == 6)) {
          F.line = 44;
          i_2456832 = addInt(i_2456832, 2);
          }
          else {
          if ((((s_2456829[chckIndx(i_2456832, 0, (s_2456829 != null ? s_2456829.length : 0)+0-1)-0] >>> 0) >>> 4) == 14)) {
          F.line = 45;
          i_2456832 = addInt(i_2456832, 3);
          }
          else {
          if ((((s_2456829[chckIndx(i_2456832, 0, (s_2456829 != null ? s_2456829.length : 0)+0-1)-0] >>> 0) >>> 3) == 30)) {
          F.line = 46;
          i_2456832 = addInt(i_2456832, 4);
          }
          else {
          if ((((s_2456829[chckIndx(i_2456832, 0, (s_2456829 != null ? s_2456829.length : 0)+0-1)-0] >>> 0) >>> 2) == 62)) {
          F.line = 47;
          i_2456832 = addInt(i_2456832, 5);
          }
          else {
          if ((((s_2456829[chckIndx(i_2456832, 0, (s_2456829 != null ? s_2456829.length : 0)+0-1)-0] >>> 0) >>> 1) == 126)) {
          F.line = 48;
          i_2456832 = addInt(i_2456832, 6);
          }
          else {
            F.line = 49;
          i_2456832 = addInt(i_2456832, 1);
          }
          }}}}}
          F.line = 50;
          result_2456830 = addInt(result_2456830, 1);
        }
    } while(false);
  framePtr = F.prev;

  return result_2456830;

}
function rune_len_at_2456931(s_2456933, i_2456934) {
  var result_2456935 = 0;

  var F={procname:"unicode.runeLenAt",prev:framePtr,filename:"unicode.nim",line:0};
  framePtr = F;
    if ((s_2456933[chckIndx(i_2456934, 0, (s_2456933 != null ? s_2456933.length : 0)+0-1)-0] <= 127)) {
    F.line = 62;
    result_2456935 = 1;
    }
    else {
    if ((((s_2456933[chckIndx(i_2456934, 0, (s_2456933 != null ? s_2456933.length : 0)+0-1)-0] >>> 0) >>> 5) == 6)) {
    F.line = 63;
    result_2456935 = 2;
    }
    else {
    if ((((s_2456933[chckIndx(i_2456934, 0, (s_2456933 != null ? s_2456933.length : 0)+0-1)-0] >>> 0) >>> 4) == 14)) {
    F.line = 64;
    result_2456935 = 3;
    }
    else {
    if ((((s_2456933[chckIndx(i_2456934, 0, (s_2456933 != null ? s_2456933.length : 0)+0-1)-0] >>> 0) >>> 3) == 30)) {
    F.line = 65;
    result_2456935 = 4;
    }
    else {
    if ((((s_2456933[chckIndx(i_2456934, 0, (s_2456933 != null ? s_2456933.length : 0)+0-1)-0] >>> 0) >>> 2) == 62)) {
    F.line = 66;
    result_2456935 = 5;
    }
    else {
    if ((((s_2456933[chckIndx(i_2456934, 0, (s_2456933 != null ? s_2456933.length : 0)+0-1)-0] >>> 0) >>> 1) == 126)) {
    F.line = 67;
    result_2456935 = 6;
    }
    else {
      F.line = 68;
      result_2456935 = 1;
    }
    }}}}}
  framePtr = F.prev;

  return result_2456935;

}
function rune_offset_3080244(s_3080246, pos_3080247, start_3080248) {
  var result_3080249 = 0;

  var F={procname:"unicode.runeOffset",prev:framePtr,filename:"unicode.nim",line:0};
  framePtr = F;
  BeforeRet: do {
    F.line = 319;
    var i_3080251 = 0;
    F.line = 320;
    var o_3080252 = start_3080248;
    L1: do {
      F.line = 321;
        L2: while (true) {
        if (!(i_3080251 < pos_3080247)) break L2;
          F.line = 322;
          o_3080252 = addInt(o_3080252, chckRange(rune_len_at_2456931(s_3080246, o_3080252), 0, 2147483647));
          if (((s_3080246 != null ? s_3080246.length : 0) <= o_3080252)) {
          F.line = 324;
          result_3080249 = -1;
          break BeforeRet;
          }
          
          F.line = 325;
          i_3080251 = addInt(i_3080251, 1);
        }
    } while(false);
    F.line = 326;
    result_3080249 = o_3080252;
    break BeforeRet;
  } while (false);
  framePtr = F.prev;

  return result_3080249;

}
function validate_utf8_2700229(s_2700231) {
            var Tmp3;
            var Tmp4;
            var Tmp5;
            var Tmp6;
            var Tmp7;
            var Tmp8;

  var result_2700232 = 0;

  var F={procname:"unicode.validateUtf8",prev:framePtr,filename:"unicode.nim",line:0};
  framePtr = F;
  BeforeRet: do {
    F.line = 172;
    var i_2700234 = 0;
    F.line = 173;
    var l_2700235 = (s_2700231 != null ? s_2700231.length : 0);
    L1: do {
      F.line = 174;
        L2: while (true) {
        if (!(i_2700234 < l_2700235)) break L2;
          if ((s_2700231[chckIndx(i_2700234, 0, (s_2700231 != null ? s_2700231.length : 0)+0-1)-0] <= 127)) {
          F.line = 176;
          i_2700234 = addInt(i_2700234, 1);
          }
          else {
          if ((((s_2700231[chckIndx(i_2700234, 0, (s_2700231 != null ? s_2700231.length : 0)+0-1)-0] >>> 0) >>> 5) == 6)) {
          if ((s_2700231[chckIndx(i_2700234, 0, (s_2700231 != null ? s_2700231.length : 0)+0-1)-0] < 194)) {
          F.line = 178;
          result_2700232 = i_2700234;
          break BeforeRet;
          }
          
            if (!(addInt(i_2700234, 1) < l_2700235)) Tmp3 = false; else {              Tmp3 = (((s_2700231[chckIndx(addInt(i_2700234, 1), 0, (s_2700231 != null ? s_2700231.length : 0)+0-1)-0] >>> 0) >>> 6) == 2);            }          if (Tmp3) {
          F.line = 179;
          i_2700234 = addInt(i_2700234, 2);
          }
          else {
            F.line = 180;
            result_2700232 = i_2700234;
            break BeforeRet;
          }
          
          }
          else {
          if ((((s_2700231[chckIndx(i_2700234, 0, (s_2700231 != null ? s_2700231.length : 0)+0-1)-0] >>> 0) >>> 4) == 14)) {
            if (!(addInt(i_2700234, 2) < l_2700235)) Tmp5 = false; else {              Tmp5 = (((s_2700231[chckIndx(addInt(i_2700234, 1), 0, (s_2700231 != null ? s_2700231.length : 0)+0-1)-0] >>> 0) >>> 6) == 2);            }            if (!Tmp5) Tmp4 = false; else {              Tmp4 = (((s_2700231[chckIndx(addInt(i_2700234, 2), 0, (s_2700231 != null ? s_2700231.length : 0)+0-1)-0] >>> 0) >>> 6) == 2);            }          if (Tmp4) {
          F.line = 183;
          i_2700234 = addInt(i_2700234, 3);
          }
          else {
            F.line = 184;
            result_2700232 = i_2700234;
            break BeforeRet;
          }
          
          }
          else {
          if ((((s_2700231[chckIndx(i_2700234, 0, (s_2700231 != null ? s_2700231.length : 0)+0-1)-0] >>> 0) >>> 3) == 30)) {
            if (!(addInt(i_2700234, 3) < l_2700235)) Tmp8 = false; else {              Tmp8 = (((s_2700231[chckIndx(addInt(i_2700234, 1), 0, (s_2700231 != null ? s_2700231.length : 0)+0-1)-0] >>> 0) >>> 6) == 2);            }            if (!Tmp8) Tmp7 = false; else {              Tmp7 = (((s_2700231[chckIndx(addInt(i_2700234, 2), 0, (s_2700231 != null ? s_2700231.length : 0)+0-1)-0] >>> 0) >>> 6) == 2);            }            if (!Tmp7) Tmp6 = false; else {              Tmp6 = (((s_2700231[chckIndx(addInt(i_2700234, 3), 0, (s_2700231 != null ? s_2700231.length : 0)+0-1)-0] >>> 0) >>> 6) == 2);            }          if (Tmp6) {
          F.line = 189;
          i_2700234 = addInt(i_2700234, 4);
          }
          else {
            F.line = 190;
            result_2700232 = i_2700234;
            break BeforeRet;
          }
          
          }
          else {
            F.line = 192;
            result_2700232 = i_2700234;
            break BeforeRet;
          }
          }}}
        }
    } while(false);
    F.line = 193;
    result_2700232 = -1;
    break BeforeRet;
  } while (false);
  framePtr = F.prev;

  return result_2700232;

}
function nsuRepeatChar(c_10555048, count_10555049) {
  var result_10555050 = null;

  var F={procname:"strutils.repeat",prev:framePtr,filename:"strutils.nim",line:0};
  framePtr = F;
    F.line = 1282;
    result_10555050 = nimCopy(null, mnewString(count_10555049), NTI1163014);
    L1: do {
      F.line = 1283;
      var i_10555059 = 0;
      F.line = 66;
      var colontmp__12161117 = 0;
      F.line = 1283;
      colontmp__12161117 = subInt(count_10555049, 1);
      F.line = 77;
      var res_12161118 = 0;
      L2: do {
        F.line = 78;
          L3: while (true) {
          if (!(res_12161118 <= colontmp__12161117)) break L3;
            F.line = 1283;
            i_10555059 = res_12161118;
            F.line = 1283;
            result_10555050[chckIndx(i_10555059, 0, (result_10555050 != null ? result_10555050.length : 0)+0-1)-0] = c_10555048;
            F.line = 80;
            res_12161118 = addInt(res_12161118, 1);
          }
      } while(false);
    } while(false);
  framePtr = F.prev;

  return result_10555050;

}
function align_string_12015222(s_12015224, minimum_width_12015225, align_12015226, fill_12015227) {
      var Tmp1;

  var result_12015228 = null;

  var F={procname:"strformat.alignString",prev:framePtr,filename:"strformat.nim",line:0};
  framePtr = F;
    if ((minimum_width_12015225 == 0)) {
    F.line = 282;
    result_12015228 = nimCopy(null, s_12015224, NTI1163014);
    }
    else {
      F.line = 284;
      if ((validate_utf8_2700229(s_12015224) == -1)) {
      Tmp1 = nucruneLen(s_12015224);
      }
      else {
      Tmp1 = (s_12015224 != null ? s_12015224.length : 0);
      }
      
      var s_rune_len_12015229 = Tmp1;
      F.line = 285;
      var to_fill_12015230 = subInt(minimum_width_12015225, s_rune_len_12015229);
      if ((to_fill_12015230 <= 0)) {
      F.line = 287;
      result_12015228 = nimCopy(null, s_12015224, NTI1163014);
      }
      else {
      if (((align_12015226 == 60) || (align_12015226 == 0))) {
      F.line = 289;
      result_12015228 = nimCopy(null, (s_12015224 || []).concat(nsuRepeatChar(fill_12015227, chckRange(to_fill_12015230, 0, 2147483647)) || []), NTI1163014);
      }
      else {
      if ((align_12015226 == 94)) {
      F.line = 291;
      var half_12015231 = divInt(to_fill_12015230, 2);
      F.line = 292;
      result_12015228 = nimCopy(null, (nsuRepeatChar(fill_12015227, chckRange(half_12015231, 0, 2147483647)) || []).concat(s_12015224 || [],nsuRepeatChar(fill_12015227, chckRange(subInt(to_fill_12015230, half_12015231), 0, 2147483647)) || []), NTI1163014);
      }
      else {
        F.line = 294;
        result_12015228 = nimCopy(null, (nsuRepeatChar(fill_12015227, chckRange(to_fill_12015230, 0, 2147483647)) || []).concat(s_12015224 || []), NTI1163014);
      }
      }}
    }
    
  framePtr = F.prev;

  return result_12015228;

}
function format_value_12060080(result_12060083, result_12060083_Idx, value_12060084, specifier_12060085) {
  var F={procname:"strformat.formatValue",prev:framePtr,filename:"strformat.nim",line:0};
  framePtr = F;
    F.line = 502;
    var spec_12060086 = parse_standard_format_specifier_12015322(specifier_12060085, 0, false);
    F.line = 503;
    var value_12060087 = nimCopy(null, value_12060084, NTI1163014);
    F.line = 504;
    switch (spec_12060086.typ) {
    case 115:
    case 0:
      break;
    default: 
      F.line = 507;
      raiseException({message: (makeNimstrLit("invalid type in format string for string, expected \'s\', but got ") || []).concat([spec_12060086.typ]), parent: null, m_type: NTI1169043, name: null, trace: null, up: null}, "ValueError");
      break;
    }
    if (!((spec_12060086.precision == -1))) {
    if ((spec_12060086.precision < nucruneLen(value_12060087))) {
    F.line = 512;
    (value_12060087 == null ? value_12060087 = mnewString(chckRange(rune_offset_3080244(value_12060087, chckRange(spec_12060086.precision, 0, 2147483647), 0), 0, 2147483647)) : value_12060087.length = chckRange(rune_offset_3080244(value_12060087, chckRange(spec_12060086.precision, 0, 2147483647), 0), 0, 2147483647));
    }
    
    }
    
    F.line = 513;
    if (result_12060083[result_12060083_Idx] != null) { result_12060083[result_12060083_Idx] = (result_12060083[result_12060083_Idx]).concat(align_string_12015222(value_12060087, spec_12060086.minimumWidth, spec_12060086.align, spec_12060086.fill)); } else { result_12060083[result_12060083_Idx] = align_string_12015222(value_12060087, spec_12060086.minimumWidth, spec_12060086.align, spec_12060086.fill).slice(); };
  framePtr = F.prev;

  
}
function nsuToUpperAsciiChar(c_10070016) {
  var result_10070017 = 0;

  var F={procname:"strutils.toUpperAscii",prev:framePtr,filename:"strutils.nim",line:0};
  framePtr = F;
    if ((ConstSet9[c_10070016] != undefined)) {
    F.line = 248;
    result_10070017 = chckRange(subInt(c_10070016, 32), 0, 255);
    }
    else {
      F.line = 250;
      result_10070017 = c_10070016;
    }
    
  framePtr = F.prev;

  return result_10070017;

}
function head_upper_12121026(str_12121028) {
  var result_12121029 = null;

  var F={procname:"nimjson.headUpper",prev:framePtr,filename:"util.nim",line:0};
  framePtr = F;
    F.line = 32;
    result_12121029 = nimCopy(null, [nsuToUpperAsciiChar(str_12121028[chckIndx(0, 0, (str_12121028 != null ? str_12121028.length : 0)+0-1)-0])].concat(HEX5BHEX5D_5785068(str_12121028, HEX2EHEX2E_5785001(1, 1)) || []), NTI1163014);
  framePtr = F.prev;

  return result_12121029;

}
function len_11605128(t_11605133) {
  var result_11605134 = 0;

  var F={procname:"len.len",prev:framePtr,filename:"tables.nim",line:0};
  framePtr = F;
    F.line = 1467;
    result_11605134 = t_11605133.counter;
  framePtr = F.prev;

  return result_11605134;

}
function is_filled_2164018(hcode_2164020) {
  var result_2164021 = false;

  var F={procname:"tables.isFilled",prev:framePtr,filename:"hashcommon.nim",line:0};
  framePtr = F;
    F.line = 27;
    result_2164021 = !((hcode_2164020 == 0));
  framePtr = F.prev;

  return result_2164021;

}
function get_type_12130050(key_12130052, value_12130053, strs_12130056, strs_12130056_Idx, index_12130057, public_str_12130058) {
    var Tmp1;
        var Tmp2;
        var Tmp3;
      var Tmp4;
      var Tmp5;

  var result_12130059 = null;

  var F={procname:"nimjson.getType",prev:framePtr,filename:"util.nim",line:0};
  framePtr = F;
    F.line = 38;
    F.line = 42;
    switch (value_12130053.kind) {
    case 6:
      F.line = 44;
      var u_key_12130060 = head_upper_12121026(key_12130052);
      F.line = 45;
      var s_12130061 = makeNimstrLit("seq[");
        var Tmp2 = value_12130053;
        if (ConstSet11[Tmp2.kind]===undefined) { raiseFieldError(makeNimstrLit("\'elems\' is not accessible using discriminant \'kind\' of type \'JsonNodeObj\'")); }
      if ((0 < ((Tmp3 = Tmp2.elems, Tmp3) != null ? Tmp3.length : 0))) {
      F.line = 48;
      var Tmp4 = value_12130053;
      if (ConstSet12[Tmp4.kind]===undefined) { raiseFieldError(makeNimstrLit("\'elems\' is not accessible using discriminant \'kind\' of type \'JsonNodeObj\'")); }
      var child_12130069 = (Tmp5 = Tmp4.elems, Tmp5)[chckIndx(0, 0, (Tmp5 != null ? Tmp5.length : 0)+0-1)-0];
      F.line = 49;
      if (s_12130061 != null) { s_12130061 = (s_12130061).concat(get_type_12130050(u_key_12130060, child_12130069, strs_12130056, strs_12130056_Idx, index_12130057, public_str_12130058)); } else { s_12130061 = get_type_12130050(u_key_12130060, child_12130069, strs_12130056, strs_12130056_Idx, index_12130057, public_str_12130058).slice(); };
      if ((child_12130069.kind == 5)) {
      F.line = 51;
      obj_format_12121002(child_12130069, u_key_12130060, strs_12130056, strs_12130056_Idx, addInt(index_12130057, 1), public_str_12130058);
      }
      
      }
      else {
        F.line = 53;
      if (s_12130061 != null) { s_12130061 = (s_12130061).concat(makeNimstrLit("NilType")); } else { s_12130061 = makeNimstrLit("NilType"); };
      }
      
      F.line = 54;
      if (s_12130061 != null) { s_12130061 = (s_12130061).concat(makeNimstrLit("]")); } else { s_12130061 = makeNimstrLit("]"); };
      Tmp1 = s_12130061;
      break;
    case 5:
      Tmp1 = head_upper_12121026(key_12130052);
      break;
    case 4:
      Tmp1 = makeNimstrLit("string");
      break;
    case 2:
      Tmp1 = makeNimstrLit("int64");
      break;
    case 3:
      Tmp1 = makeNimstrLit("float64");
      break;
    case 1:
      Tmp1 = makeNimstrLit("bool");
      break;
    case 0:
      Tmp1 = makeNimstrLit("NilType");
      break;
    }
    result_12130059 = nimCopy(null, Tmp1, NTI1163014);
  framePtr = F.prev;

  return result_12130059;

}
function sys_fatal_1267618(message_1267622) {
  var F={procname:"sysFatal.sysFatal",prev:framePtr,filename:"fatal.nim",line:0};
  framePtr = F;
    F.line = 49;
    raiseException({message: nimCopy(null, message_1267622, NTI1163014), m_type: NTI1169041, parent: null, name: null, trace: null, up: null}, "AssertionError");
  framePtr = F.prev;

  
}
function raise_assert_1267614(msg_1267616) {
  var F={procname:"assertions.raiseAssert",prev:framePtr,filename:"assertions.nim",line:0};
  framePtr = F;
    F.line = 22;
    sys_fatal_1267618(msg_1267616);
  framePtr = F.prev;

  
}
function failed_assert_impl_1267680(msg_1267682) {
  var F={procname:"assertions.failedAssertImpl",prev:framePtr,filename:"assertions.nim",line:0};
  framePtr = F;
    F.line = 29;
    raise_assert_1267614(msg_1267682);
  framePtr = F.prev;

  
}
function obj_format_12121002(self_12121004, obj_name_12121005, strs_12121022, strs_12121022_Idx, index_12121023, public_str_12121025) {
      var Tmp2;

  var F={procname:"nimjson.objFormat",prev:framePtr,filename:"util.nim",line:0};
  framePtr = F;
    F.line = 67;
    if (strs_12121022[strs_12121022_Idx] != null) { strs_12121022[strs_12121022_Idx].push([]); } else { strs_12121022[strs_12121022_Idx] = [[]]; };
    F.line = 68;
    F.line = 68;
    var fmt_res_12130123 = [mnewString(0)];
    F.line = 68;
    if (fmt_res_12130123[0] != null) { fmt_res_12130123[0] = (fmt_res_12130123[0]).concat(makeNimstrLit("  ")); } else { fmt_res_12130123[0] = makeNimstrLit("  "); };
    F.line = 68;
    format_value_12060080(fmt_res_12130123, 0, head_upper_12121026(obj_name_12121005), []);
    F.line = 68;
    format_value_12060080(fmt_res_12130123, 0, public_str_12121025, []);
    F.line = 68;
    if (fmt_res_12130123[0] != null) { fmt_res_12130123[0] = (fmt_res_12130123[0]).concat(makeNimstrLit(" = ref object\x0A")); } else { fmt_res_12130123[0] = makeNimstrLit(" = ref object\x0A"); };
    if (strs_12121022[strs_12121022_Idx][chckIndx(index_12121023, 0, (strs_12121022[strs_12121022_Idx] != null ? strs_12121022[strs_12121022_Idx].length : 0)+0-1)-0] != null) { strs_12121022[strs_12121022_Idx][chckIndx(index_12121023, 0, (strs_12121022[strs_12121022_Idx] != null ? strs_12121022[strs_12121022_Idx].length : 0)+0-1)-0] = (strs_12121022[strs_12121022_Idx][chckIndx(index_12121023, 0, (strs_12121022[strs_12121022_Idx] != null ? strs_12121022[strs_12121022_Idx].length : 0)+0-1)-0]).concat(fmt_res_12130123[0]); } else { strs_12121022[strs_12121022_Idx][chckIndx(index_12121023, 0, (strs_12121022[strs_12121022_Idx] != null ? strs_12121022[strs_12121022_Idx].length : 0)+0-1)-0] = fmt_res_12130123[0].slice(); };
    L1: do {
      F.line = 69;
      var k_12135012 = null;
      F.line = 69;
      var v_12135013 = null;
      F.line = 1646;
      var colontmp__12161124 = {data: null, counter: 0, first: 0, last: 0};
      F.line = 69;
      var Tmp2 = self_12121004;
      if (ConstSet10[Tmp2.kind]===undefined) { raiseFieldError(makeNimstrLit("\'fields\' is not accessible using discriminant \'kind\' of type \'JsonNodeObj\'")); }
      nimCopy(colontmp__12161124, Tmp2.fields, NTI11426067);
      F.line = 1672;
      var l_12161126 = len_11605128(colontmp__12161124);
      if ((0 < colontmp__12161124.counter)) {
      F.line = 1251;
      var h_12161127 = colontmp__12161124.first;
      L3: do {
        F.line = 1252;
          L4: while (true) {
          if (!(0 <= h_12161127)) break L4;
            F.line = 1253;
            var nxt_12161129 = colontmp__12161124.data[chckIndx(h_12161127, 0, (colontmp__12161124.data != null ? colontmp__12161124.data.length : 0)+0-1)-0].Field1;
            if (is_filled_2164018(colontmp__12161124.data[chckIndx(h_12161127, 0, (colontmp__12161124.data != null ? colontmp__12161124.data.length : 0)+0-1)-0].Field0)) {
            F.line = 69;
            k_12135012 = colontmp__12161124.data[chckIndx(h_12161127, 0, (colontmp__12161124.data != null ? colontmp__12161124.data.length : 0)+0-1)-0].Field2;
            F.line = 1674;
            v_12135013 = colontmp__12161124.data[chckIndx(h_12161127, 0, (colontmp__12161124.data != null ? colontmp__12161124.data.length : 0)+0-1)-0].Field3;
            F.line = 70;
            var t_12135014 = get_type_12130050(k_12135012, v_12135013, strs_12121022, strs_12121022_Idx, index_12121023, public_str_12121025);
            F.line = 71;
            F.line = 71;
            var fmt_res_12135015 = [mnewString(0)];
            F.line = 71;
            if (fmt_res_12135015[0] != null) { fmt_res_12135015[0] = (fmt_res_12135015[0]).concat(makeNimstrLit("    ")); } else { fmt_res_12135015[0] = makeNimstrLit("    "); };
            F.line = 71;
            format_value_12060080(fmt_res_12135015, 0, k_12135012, []);
            F.line = 71;
            format_value_12060080(fmt_res_12135015, 0, public_str_12121025, []);
            F.line = 71;
            if (fmt_res_12135015[0] != null) { fmt_res_12135015[0] = (fmt_res_12135015[0]).concat(makeNimstrLit(": ")); } else { fmt_res_12135015[0] = makeNimstrLit(": "); };
            F.line = 71;
            format_value_12060080(fmt_res_12135015, 0, t_12135014, []);
            F.line = 71;
            if (fmt_res_12135015[0] != null) { fmt_res_12135015[0] = (fmt_res_12135015[0]).concat(makeNimstrLit("\x0A")); } else { fmt_res_12135015[0] = makeNimstrLit("\x0A"); };
            if (strs_12121022[strs_12121022_Idx][chckIndx(index_12121023, 0, (strs_12121022[strs_12121022_Idx] != null ? strs_12121022[strs_12121022_Idx].length : 0)+0-1)-0] != null) { strs_12121022[strs_12121022_Idx][chckIndx(index_12121023, 0, (strs_12121022[strs_12121022_Idx] != null ? strs_12121022[strs_12121022_Idx].length : 0)+0-1)-0] = (strs_12121022[strs_12121022_Idx][chckIndx(index_12121023, 0, (strs_12121022[strs_12121022_Idx] != null ? strs_12121022[strs_12121022_Idx].length : 0)+0-1)-0]).concat(fmt_res_12135015[0]); } else { strs_12121022[strs_12121022_Idx][chckIndx(index_12121023, 0, (strs_12121022[strs_12121022_Idx] != null ? strs_12121022[strs_12121022_Idx].length : 0)+0-1)-0] = fmt_res_12135015[0].slice(); };
            if ((v_12135013.kind == 5)) {
            F.line = 75;
            obj_format_12121002(v_12135013, k_12135012, strs_12121022, strs_12121022_Idx, addInt(index_12121023, 1), public_str_12121025);
            }
            
            if (!((len_11605128(colontmp__12161124) == l_12161126))) {
            F.line = 1675;
            failed_assert_impl_1267680(makeNimstrLit("/home/runner/.choosenim/toolchains/nim-1.2.0/lib/pure/collections/tables.nim(1675, 11) `len(t) == L` the length of the table changed while iterating over it"));
            }
            
            }
            
            F.line = 1256;
            h_12161127 = nxt_12161129;
          }
      } while(false);
      }
      
    } while(false);
  framePtr = F.prev;

  
}
function nsuJoinSep(a_10690018, sep_10690019) {
  var result_10690020 = null;

  var F={procname:"strutils.join",prev:framePtr,filename:"strutils.nim",line:0};
  framePtr = F;
    if ((0 < (a_10690018 != null ? a_10690018.length : 0))) {
    F.line = 1762;
    var l_10695009 = mulInt((sep_10690019 != null ? sep_10690019.length : 0), subInt((a_10690018 != null ? a_10690018.length : 0), 1));
    L1: do {
      F.line = 1763;
      var i_10695023 = 0;
      F.line = 66;
      var colontmp__12161135 = 0;
      F.line = 1763;
      colontmp__12161135 = (a_10690018 != null ? (a_10690018.length-1) : -1);
      F.line = 77;
      var res_12161136 = 0;
      L2: do {
        F.line = 78;
          L3: while (true) {
          if (!(res_12161136 <= colontmp__12161135)) break L3;
            F.line = 1763;
            i_10695023 = res_12161136;
            F.line = 1763;
            l_10695009 = addInt(l_10695009, (a_10690018[chckIndx(i_10695023, 0, (a_10690018 != null ? a_10690018.length : 0)+0-1)-0] != null ? a_10690018[chckIndx(i_10695023, 0, (a_10690018 != null ? a_10690018.length : 0)+0-1)-0].length : 0));
            F.line = 80;
            res_12161136 = addInt(res_12161136, 1);
          }
      } while(false);
    } while(false);
    F.line = 1764;
    result_10690020 = nimCopy(null, mnewString(0), NTI1163014);
    F.line = 1765;
    if (result_10690020 != null) { result_10690020 = (result_10690020).concat(a_10690018[chckIndx(0, 0, (a_10690018 != null ? a_10690018.length : 0)+0-1)-0]); } else { result_10690020 = a_10690018[chckIndx(0, 0, (a_10690018 != null ? a_10690018.length : 0)+0-1)-0].slice(); };
    L4: do {
      F.line = 1766;
      var i_10695043 = 0;
      F.line = 66;
      var colontmp__12161142 = 0;
      F.line = 1766;
      colontmp__12161142 = (a_10690018 != null ? (a_10690018.length-1) : -1);
      F.line = 77;
      var res_12161143 = 1;
      L5: do {
        F.line = 78;
          L6: while (true) {
          if (!(res_12161143 <= colontmp__12161142)) break L6;
            F.line = 1766;
            i_10695043 = res_12161143;
            F.line = 1767;
            if (result_10690020 != null) { result_10690020 = (result_10690020).concat(sep_10690019); } else { result_10690020 = sep_10690019.slice(); };
            F.line = 1768;
            if (result_10690020 != null) { result_10690020 = (result_10690020).concat(a_10690018[chckIndx(i_10695043, 0, (a_10690018 != null ? a_10690018.length : 0)+0-1)-0]); } else { result_10690020 = a_10690018[chckIndx(i_10695043, 0, (a_10690018 != null ? a_10690018.length : 0)+0-1)-0].slice(); };
            F.line = 80;
            res_12161143 = addInt(res_12161143, 1);
          }
      } while(false);
    } while(false);
    }
    else {
      F.line = 1770;
      result_10690020 = nimCopy(null, [], NTI1163014);
    }
    
  framePtr = F.prev;

  return result_10690020;

}
function to_type_string_12140023(self_12140025, obj_name_12140026, public_field_12140027) {
    var Tmp1;
        var Tmp2;
        var Tmp3;
      var Tmp4;
      var Tmp5;

  var result_12140028 = null;

  var F={procname:"nimjson.toTypeString",prev:framePtr,filename:"util.nim",line:0};
  framePtr = F;
    F.line = 109;
    if (public_field_12140027) {
    Tmp1 = makeNimstrLit("*");
    }
    else {
    Tmp1 = [];
    }
    
    var public_str_12140029 = nimCopy(null, Tmp1, NTI1163014);
    F.line = 113;
    if (result_12140028 != null) { result_12140028 = (result_12140028).concat(makeNimstrLit("type\x0A")); } else { result_12140028 = makeNimstrLit("type\x0A"); };
    F.line = 114;
    F.line = 114;
    var fmt_res_12140030 = [mnewString(0)];
    F.line = 114;
    if (fmt_res_12140030[0] != null) { fmt_res_12140030[0] = (fmt_res_12140030[0]).concat(makeNimstrLit("  ")); } else { fmt_res_12140030[0] = makeNimstrLit("  "); };
    F.line = 114;
    format_value_12060080(fmt_res_12140030, 0, makeNimstrLit("NilType"), []);
    F.line = 114;
    format_value_12060080(fmt_res_12140030, 0, public_str_12140029, []);
    F.line = 114;
    if (fmt_res_12140030[0] != null) { fmt_res_12140030[0] = (fmt_res_12140030[0]).concat(makeNimstrLit(" = ref object\x0A")); } else { fmt_res_12140030[0] = makeNimstrLit(" = ref object\x0A"); };
    if (result_12140028 != null) { result_12140028 = (result_12140028).concat(fmt_res_12140030[0]); } else { result_12140028 = fmt_res_12140030[0].slice(); };
    F.line = 115;
    switch (self_12140025.kind) {
    case 5:
      F.line = 117;
      var ret_12145004 = [null];
      F.line = 118;
      obj_format_12121002(self_12140025, obj_name_12140026, ret_12145004, 0, 0, public_str_12140029);
      F.line = 119;
      if (result_12140028 != null) { result_12140028 = (result_12140028).concat(nsuJoinSep(ret_12145004[0], [])); } else { result_12140028 = nsuJoinSep(ret_12145004[0], []).slice(); };
      break;
    case 6:
      F.line = 121;
      F.line = 121;
      var fmt_res_12145007 = [mnewString(0)];
      F.line = 121;
      if (fmt_res_12145007[0] != null) { fmt_res_12145007[0] = (fmt_res_12145007[0]).concat(makeNimstrLit("Seq")); } else { fmt_res_12145007[0] = makeNimstrLit("Seq"); };
      F.line = 121;
      format_value_12060080(fmt_res_12145007, 0, head_upper_12121026(obj_name_12140026), []);
      var seq_obj_name_12150002 = nimCopy(null, fmt_res_12145007[0], NTI1163014);
        var Tmp2 = self_12140025;
        if (ConstSet13[Tmp2.kind]===undefined) { raiseFieldError(makeNimstrLit("\'elems\' is not accessible using discriminant \'kind\' of type \'JsonNodeObj\'")); }
      if ((0 < ((Tmp3 = Tmp2.elems, Tmp3) != null ? Tmp3.length : 0))) {
      F.line = 123;
      var Tmp4 = self_12140025;
      if (ConstSet14[Tmp4.kind]===undefined) { raiseFieldError(makeNimstrLit("\'elems\' is not accessible using discriminant \'kind\' of type \'JsonNodeObj\'")); }
      var child_12150010 = (Tmp5 = Tmp4.elems, Tmp5)[chckIndx(0, 0, (Tmp5 != null ? Tmp5.length : 0)+0-1)-0];
      F.line = 124;
      switch (child_12150010.kind) {
      case 5:
        F.line = 126;
        F.line = 126;
        var fmt_res_12150011 = [mnewString(0)];
        F.line = 126;
        if (fmt_res_12150011[0] != null) { fmt_res_12150011[0] = (fmt_res_12150011[0]).concat(makeNimstrLit("  ")); } else { fmt_res_12150011[0] = makeNimstrLit("  "); };
        F.line = 126;
        format_value_12060080(fmt_res_12150011, 0, seq_obj_name_12150002, []);
        F.line = 126;
        if (fmt_res_12150011[0] != null) { fmt_res_12150011[0] = (fmt_res_12150011[0]).concat(makeNimstrLit(" = seq[")); } else { fmt_res_12150011[0] = makeNimstrLit(" = seq["); };
        F.line = 126;
        format_value_12060080(fmt_res_12150011, 0, obj_name_12140026, []);
        F.line = 126;
        if (fmt_res_12150011[0] != null) { fmt_res_12150011[0] = (fmt_res_12150011[0]).concat(makeNimstrLit("]\x0A")); } else { fmt_res_12150011[0] = makeNimstrLit("]\x0A"); };
        if (result_12140028 != null) { result_12140028 = (result_12140028).concat(fmt_res_12150011[0]); } else { result_12140028 = fmt_res_12150011[0].slice(); };
        F.line = 127;
        var ret_12155004 = [null];
        F.line = 128;
        obj_format_12121002(child_12150010, obj_name_12140026, ret_12155004, 0, 0, public_str_12140029);
        F.line = 129;
        if (result_12140028 != null) { result_12140028 = (result_12140028).concat(nsuJoinSep(ret_12155004[0], [])); } else { result_12140028 = nsuJoinSep(ret_12155004[0], []).slice(); };
        break;
      default: 
        F.line = 131;
        var strs_12155008 = [null];
        F.line = 132;
        var t_12155010 = get_type_12130050(obj_name_12140026, child_12150010, strs_12155008, 0, 0, public_str_12140029);
        F.line = 133;
        F.line = 133;
        var fmt_res_12155011 = [mnewString(0)];
        F.line = 133;
        if (fmt_res_12155011[0] != null) { fmt_res_12155011[0] = (fmt_res_12155011[0]).concat(makeNimstrLit("  ")); } else { fmt_res_12155011[0] = makeNimstrLit("  "); };
        F.line = 133;
        format_value_12060080(fmt_res_12155011, 0, obj_name_12140026, []);
        F.line = 133;
        if (fmt_res_12155011[0] != null) { fmt_res_12155011[0] = (fmt_res_12155011[0]).concat(makeNimstrLit(" = seq[")); } else { fmt_res_12155011[0] = makeNimstrLit(" = seq["); };
        F.line = 133;
        format_value_12060080(fmt_res_12155011, 0, t_12155010, []);
        F.line = 133;
        if (fmt_res_12155011[0] != null) { fmt_res_12155011[0] = (fmt_res_12155011[0]).concat(makeNimstrLit("]\x0A")); } else { fmt_res_12155011[0] = makeNimstrLit("]\x0A"); };
        if (result_12140028 != null) { result_12140028 = (result_12140028).concat(fmt_res_12155011[0]); } else { result_12140028 = fmt_res_12155011[0].slice(); };
        break;
      }
      }
      
      break;
    default: 
      break;
    }
  framePtr = F.prev;

  return result_12140028;

}
function get_var_type_11900050(x_11900052) {
  var result_11900053 = 0;

  var F={procname:"json.getVarType",prev:framePtr,filename:"json.nim",line:0};
  framePtr = F;
  BeforeRet: do {
    F.line = 860;
    result_11900053 = 0;
    F.line = 863;
    switch (toJSStr(cstrToNimstr(Object.prototype.toString.call(x_11900052)))) {
    case "[object Array]":
      F.line = 864;
      result_11900053 = 6;
      break BeforeRet;
      break;
    case "[object Object]":
      F.line = 865;
      result_11900053 = 5;
      break BeforeRet;
      break;
    case "[object Number]":
      if ((x_11900052 % 1.0000000000000000e+00 == 0.0)) {
      F.line = 868;
      result_11900053 = 2;
      break BeforeRet;
      }
      else {
        F.line = 870;
        result_11900053 = 3;
        break BeforeRet;
      }
      
      break;
    case "[object Boolean]":
      F.line = 871;
      result_11900053 = 1;
      break BeforeRet;
      break;
    case "[object Null]":
      F.line = 872;
      result_11900053 = 0;
      break BeforeRet;
      break;
    case "[object String]":
      F.line = 873;
      result_11900053 = 4;
      break BeforeRet;
      break;
    default: 
      if (true) {
      F.line = 874;
      failed_assert_impl_1267680(makeNimstrLit("/home/runner/.choosenim/toolchains/nim-1.2.0/lib/pure/json.nim(874, 18) `false` "));
      }
      
      break;
    }
  } while (false);
  framePtr = F.prev;

  return result_11900053;

}
function new_jarray_11445657() {
  var result_11445659 = null;

  var F={procname:"json.newJArray",prev:framePtr,filename:"json.nim",line:0};
  framePtr = F;
    F.line = 214;
    result_11445659 = {kind: 6, elems: [], str: null, num: 0, fnum: 0.0, bval: false, fields: {data: null, counter: 0, first: 0, last: 0}};
  framePtr = F.prev;

  return result_11445659;

}
function len_11910214(x_11910216) {
  var result_11910217 = 0;

  var F={procname:"json.len",prev:framePtr,filename:"json.nim",line:0};
  framePtr = F;
    if (!((get_var_type_11900050(x_11910216) == 6))) {
    F.line = 877;
    failed_assert_impl_1267680(makeNimstrLit("/home/runner/.choosenim/toolchains/nim-1.2.0/lib/pure/json.nim(877, 12) `x.getVarType == JArray` "));
    }
    
    F.line = 878;
          result_11910217 = x_11910216.length;
    
  framePtr = F.prev;

  return result_11910217;

}
function add_11475020(father_11475022, child_11475023) {
    var Tmp1;
    var Tmp2;

  var F={procname:"json.add",prev:framePtr,filename:"json.nim",line:0};
  framePtr = F;
    if (!((father_11475022.kind == 6))) {
    F.line = 272;
    failed_assert_impl_1267680(makeNimstrLit("/home/runner/.choosenim/toolchains/nim-1.2.0/lib/pure/json.nim(272, 10) `father.kind == JArray` "));
    }
    
    F.line = 273;
    var Tmp1 = father_11475022;
    if (ConstSet15[Tmp1.kind]===undefined) { raiseFieldError(makeNimstrLit("\'elems\' is not accessible using discriminant \'kind\' of type \'JsonNodeObj\'")); }
    if ((Tmp2 = Tmp1.elems, Tmp2) != null) { Tmp2.push(child_11475023); } else { Tmp2 = [child_11475023]; };
  framePtr = F.prev;

  
}
function HEX5BHEX5D_11930214(x_11930216, y_11930217) {
  var result_11930218 = {};

  var F={procname:"json.[]",prev:framePtr,filename:"json.nim",line:0};
  framePtr = F;
    if (!((get_var_type_11900050(x_11930216) == 6))) {
    F.line = 889;
    failed_assert_impl_1267680(makeNimstrLit("/home/runner/.choosenim/toolchains/nim-1.2.0/lib/pure/json.nim(889, 12) `x.getVarType == JArray` "));
    }
    
    F.line = 890;
          result_11930218 = x_11930216[y_11930217];
    
  framePtr = F.prev;

  return result_11930218;

}
function is_power_of_two_2115029(x_2115031) {
    var Tmp1;

  var result_2115032 = false;

  BeforeRet: do {
    if (!(0 < x_2115031)) Tmp1 = false; else {      Tmp1 = ((x_2115031 & (x_2115031 - 1)) == 0);    }    result_2115032 = Tmp1;
    break BeforeRet;
  } while (false);

  return result_2115032;

}
function init_ordered_table_11426240(initial_size_11426244) {
  var result_11426246 = {data: null, counter: 0, first: 0, last: 0};

  var F={procname:"initOrderedTable.initOrderedTable",prev:framePtr,filename:"tables.nim",line:0};
  framePtr = F;
    if (!(is_power_of_two_2115029(initial_size_11426244))) {
    F.line = 127;
    failed_assert_impl_1267680(makeNimstrLit("/home/runner/.choosenim/toolchains/nim-1.2.0/lib/pure/collections/tableimpl.nim(127, 12) `isPowerOfTwo(initialSize)` "));
    }
    
    F.line = 128;
    result_11426246.counter = 0;
    F.line = 129;
    result_11426246.data = new Array(chckRange(initial_size_11426244, 0, 2147483647)); for (var i=0;i<chckRange(initial_size_11426244, 0, 2147483647);++i) {result_11426246.data[i]={Field0: 0, Field1: 0, Field2: null, Field3: null};}    F.line = 131;
    result_11426246.first = -1;
    F.line = 132;
    result_11426246.last = -1;
  framePtr = F.prev;

  return result_11426246;

}
function new_jobject_11426235() {
  var result_11426237 = null;

  var F={procname:"json.newJObject",prev:framePtr,filename:"json.nim",line:0};
  framePtr = F;
    F.line = 210;
    result_11426237 = {kind: 5, fields: init_ordered_table_11426240(4), str: null, num: 0, fnum: 0.0, bval: false, elems: null};
  framePtr = F.prev;

  return result_11426237;

}
function imul_1790517(a_1790519, b_1790520) {
  var result_1790521 = 0;

  var F={procname:"hashes.imul",prev:framePtr,filename:"hashes.nim",line:0};
  framePtr = F;
    F.line = 133;
    var mask_1790522 = 65535;
    F.line = 135;
    var a_hi_1790531 = (((a_1790519 >>> 0) >>> 16) & mask_1790522);
    F.line = 136;
    var a_lo_1790532 = (a_1790519 & mask_1790522);
    F.line = 137;
    var b_hi_1790541 = (((b_1790520 >>> 0) >>> 16) & mask_1790522);
    F.line = 138;
    var b_lo_1790542 = (b_1790520 & mask_1790522);
    F.line = 139;
    result_1790521 = ((((a_lo_1790532 * b_lo_1790542) >>> 0) + (((((a_hi_1790531 * b_lo_1790542) >>> 0) + ((a_lo_1790532 * b_hi_1790541) >>> 0)) >>> 0) << 16)) >>> 0);
  framePtr = F.prev;

  return result_1790521;

}
function rotl32_1790601(x_1790603, r_1790604) {
  var result_1790605 = 0;

  var F={procname:"hashes.rotl32",prev:framePtr,filename:"hashes.nim",line:0};
  framePtr = F;
    F.line = 144;
    result_1790605 = ((x_1790603 << r_1790604) | ((x_1790603 >>> 0) >>> subInt(32, r_1790604)));
  framePtr = F.prev;

  return result_1790605;

}
function murmur_hash_1790629(x_1790632) {
  var result_1790633 = 0;

  var F={procname:"hashes.murmurHash",prev:framePtr,filename:"hashes.nim",line:0};
  framePtr = F;
  BeforeRet: do {
    F.line = 155;
    var size_1790643 = (x_1790632 != null ? x_1790632.length : 0);
    F.line = 156;
    var step_size_1790645 = 4;
    F.line = 157;
    var n_1790646 = divInt(size_1790643, step_size_1790645);
    F.line = 159;
    var h1_1790647 = 0;
    F.line = 160;
    var i_1790649 = 0;
    L1: do {
      F.line = 163;
        L2: while (true) {
        if (!(i_1790649 < mulInt(n_1790646, step_size_1790645))) break L2;
          F.line = 164;
          var k1_1790650 = 0;
          F.line = 166;
          var j_1790651 = step_size_1790645;
          L3: do {
            F.line = 167;
              L4: while (true) {
              if (!(0 < j_1790651)) break L4;
                F.line = 168;
                j_1790651 = subInt(j_1790651, 1);
                F.line = 169;
                k1_1790650 = ((k1_1790650 << 8) | x_1790632[chckIndx(addInt(i_1790649, j_1790651), 0, (x_1790632 != null ? x_1790632.length : 0)+0-1)-0]);
              }
          } while(false);
          F.line = 172;
          i_1790649 = addInt(i_1790649, step_size_1790645);
          F.line = 174;
          k1_1790650 = imul_1790517(k1_1790650, 3432918353);
          F.line = 175;
          k1_1790650 = rotl32_1790601(k1_1790650, 15);
          F.line = 176;
          k1_1790650 = imul_1790517(k1_1790650, 461845907);
          F.line = 178;
          h1_1790647 = (h1_1790647 ^ k1_1790650);
          F.line = 179;
          h1_1790647 = rotl32_1790601(h1_1790647, 13);
          F.line = 180;
          h1_1790647 = ((((h1_1790647 * 5) >>> 0) + 3864292196) >>> 0);
        }
    } while(false);
    F.line = 183;
    var k1_1795208 = 0;
    F.line = 184;
    var rem_1795209 = modInt(size_1790643, step_size_1790645);
    L5: do {
      F.line = 185;
        L6: while (true) {
        if (!(0 < rem_1795209)) break L6;
          F.line = 186;
          rem_1795209 = subInt(rem_1795209, 1);
          F.line = 187;
          k1_1795208 = ((k1_1795208 << 8) | x_1790632[chckIndx(addInt(i_1790649, rem_1795209), 0, (x_1790632 != null ? x_1790632.length : 0)+0-1)-0]);
        }
    } while(false);
    F.line = 188;
    k1_1795208 = imul_1790517(k1_1795208, 3432918353);
    F.line = 189;
    k1_1795208 = rotl32_1790601(k1_1795208, 15);
    F.line = 190;
    k1_1795208 = imul_1790517(k1_1795208, 461845907);
    F.line = 191;
    h1_1790647 = (h1_1790647 ^ k1_1795208);
    F.line = 194;
    h1_1790647 = (h1_1790647 ^ size_1790643);
    F.line = 195;
    h1_1790647 = (h1_1790647 ^ ((h1_1790647 >>> 0) >>> 16));
    F.line = 196;
    h1_1790647 = imul_1790517(h1_1790647, 2246822507);
    F.line = 197;
    h1_1790647 = (h1_1790647 ^ ((h1_1790647 >>> 0) >>> 13));
    F.line = 198;
    h1_1790647 = imul_1790517(h1_1790647, 3266489909);
    F.line = 199;
    h1_1790647 = (h1_1790647 ^ ((h1_1790647 >>> 0) >>> 16));
    F.line = 200;
    result_1790633 = (h1_1790647|0);
    break BeforeRet;
  } while (false);
  framePtr = F.prev;

  return result_1790633;

}
function hash_1830214(x_1830216) {
  var result_1830217 = 0;

  var F={procname:"hashes.hash",prev:framePtr,filename:"hashes.nim",line:0};
  framePtr = F;
    F.line = 229;
    result_1830217 = murmur_hash_1790629((x_1830216.slice(0, (x_1830216 != null ? (x_1830216.length-1) : -1)+1)));
  framePtr = F.prev;

  return result_1830217;

}
function next_try_2165014(h_2165016, max_hash_2165017) {
  var result_2165018 = 0;

  var F={procname:"tables.nextTry",prev:framePtr,filename:"hashcommon.nim",line:0};
  framePtr = F;
    F.line = 30;
    result_2165018 = (addInt(h_2165016, 1) & max_hash_2165017);
  framePtr = F.prev;

  return result_2165018;

}
function raw_get_11520621(t_11520626, key_11520627, hc_11520628, hc_11520628_Idx) {
            var Tmp3;

  var result_11520629 = 0;

  var F={procname:"rawGet.rawGet",prev:framePtr,filename:"tables.nim",line:0};
  framePtr = F;
  BeforeRet: do {
    F.line = 63;
    hc_11520628[hc_11520628_Idx] = hash_1830214(key_11520627);
    if ((hc_11520628[hc_11520628_Idx] == 0)) {
    F.line = 65;
    hc_11520628[hc_11520628_Idx] = 314159265;
    }
    
    if (((t_11520626.data != null ? t_11520626.data.length : 0) == 0)) {
    F.line = 47;
    result_11520629 = -1;
    break BeforeRet;
    }
    
    F.line = 48;
    var h_11530138 = (hc_11520628[hc_11520628_Idx] & (t_11520626.data != null ? (t_11520626.data.length-1) : -1));
    L1: do {
      F.line = 49;
        L2: while (true) {
        if (!is_filled_2164018(t_11520626.data[chckIndx(h_11530138, 0, (t_11520626.data != null ? t_11520626.data.length : 0)+0-1)-0].Field0)) break L2;
            if (!(t_11520626.data[chckIndx(h_11530138, 0, (t_11520626.data != null ? t_11520626.data.length : 0)+0-1)-0].Field0 == hc_11520628[hc_11520628_Idx])) Tmp3 = false; else {              Tmp3 = eqStrings(t_11520626.data[chckIndx(h_11530138, 0, (t_11520626.data != null ? t_11520626.data.length : 0)+0-1)-0].Field2, key_11520627);            }          if (Tmp3) {
          F.line = 55;
          result_11520629 = h_11530138;
          break BeforeRet;
          }
          
          F.line = 56;
          h_11530138 = next_try_2165014(h_11530138, (t_11520626.data != null ? (t_11520626.data.length-1) : -1));
        }
    } while(false);
    F.line = 57;
    result_11520629 = subInt(-1, h_11530138);
  } while (false);
  framePtr = F.prev;

  return result_11520629;

}
function must_rehash_11555601(t_11555604) {
  var result_11555605 = false;

  var F={procname:"mustRehash.mustRehash",prev:framePtr,filename:"hashcommon.nim",line:0};
  framePtr = F;
    if (!((t_11555604.counter < (t_11555604.data != null ? t_11555604.data.length : 0)))) {
    F.line = 33;
    failed_assert_impl_1267680(makeNimstrLit("/home/runner/.choosenim/toolchains/nim-1.2.0/lib/pure/collections/hashcommon.nim(33, 9) `\x0At.counter < t.dataLen` "));
    }
    
    F.line = 34;
    result_11555605 = ((mulInt((t_11555604.data != null ? t_11555604.data.length : 0), 2) < mulInt(t_11555604.counter, 3)) || (subInt((t_11555604.data != null ? t_11555604.data.length : 0), t_11555604.counter) < 4));
  framePtr = F.prev;

  return result_11555605;

}
function raw_insert_11581349(t_11581355, data_11581358, data_11581358_Idx, key_11581359, val_11581360, hc_11581361, h_11581362) {
  var F={procname:"rawInsert.rawInsert",prev:framePtr,filename:"tables.nim",line:0};
  framePtr = F;
    F.line = 22;
    data_11581358[data_11581358_Idx][chckIndx(h_11581362, 0, (data_11581358[data_11581358_Idx] != null ? data_11581358[data_11581358_Idx].length : 0)+0-1)-0].Field2 = nimCopy(null, key_11581359, NTI1163014);
    F.line = 23;
    data_11581358[data_11581358_Idx][chckIndx(h_11581362, 0, (data_11581358[data_11581358_Idx] != null ? data_11581358[data_11581358_Idx].length : 0)+0-1)-0].Field3 = val_11581360;
    F.line = 24;
    data_11581358[data_11581358_Idx][chckIndx(h_11581362, 0, (data_11581358[data_11581358_Idx] != null ? data_11581358[data_11581358_Idx].length : 0)+0-1)-0].Field0 = hc_11581361;
    F.line = 1227;
    data_11581358[data_11581358_Idx][chckIndx(h_11581362, 0, (data_11581358[data_11581358_Idx] != null ? data_11581358[data_11581358_Idx].length : 0)+0-1)-0].Field1 = -1;
    if ((t_11581355.first < 0)) {
    F.line = 1228;
    t_11581355.first = h_11581362;
    }
    
    if ((0 <= t_11581355.last)) {
    F.line = 1229;
    data_11581358[data_11581358_Idx][chckIndx(t_11581355.last, 0, (data_11581358[data_11581358_Idx] != null ? data_11581358[data_11581358_Idx].length : 0)+0-1)-0].Field1 = h_11581362;
    }
    
    F.line = 1230;
    t_11581355.last = h_11581362;
  framePtr = F.prev;

  
}
function enlarge_11580180(t_11580186) {
          var Tmp6;
          var Tmp7;

  var F={procname:"enlarge.enlarge",prev:framePtr,filename:"tables.nim",line:0};
  framePtr = F;
    F.line = 1233;
    var n_11580194 = null;
    F.line = 1234;
    n_11580194 = new Array(chckRange(mulInt((t_11580186.data != null ? t_11580186.data.length : 0), 2), 0, 2147483647)); for (var i=0;i<chckRange(mulInt((t_11580186.data != null ? t_11580186.data.length : 0), 2), 0, 2147483647);++i) {n_11580194[i]={Field0: 0, Field1: 0, Field2: null, Field3: null};}    F.line = 1235;
    var h_11580333 = t_11580186.first;
    F.line = 1236;
    t_11580186.first = -1;
    F.line = 1237;
    t_11580186.last = -1;
    F.line = 1238;
    var Tmp1 = t_11580186.data; t_11580186.data = n_11580194; n_11580194 = Tmp1;    L2: do {
      F.line = 1239;
        L3: while (true) {
        if (!(0 <= h_11580333)) break L3;
          F.line = 1240;
          var nxt_11580489 = n_11580194[chckIndx(h_11580333, 0, (n_11580194 != null ? n_11580194.length : 0)+0-1)-0].Field1;
          F.line = 1241;
          var eh_11580638 = n_11580194[chckIndx(h_11580333, 0, (n_11580194 != null ? n_11580194.length : 0)+0-1)-0].Field0;
          if (is_filled_2164018(eh_11580638)) {
          F.line = 1243;
          var j_11580645 = (eh_11580638 & (t_11580186.data != null ? (t_11580186.data.length-1) : -1));
          L4: do {
            F.line = 1244;
              L5: while (true) {
              if (!is_filled_2164018(t_11580186.data[chckIndx(j_11580645, 0, (t_11580186.data != null ? t_11580186.data.length : 0)+0-1)-0].Field0)) break L5;
                F.line = 1245;
                j_11580645 = next_try_2165014(j_11580645, (t_11580186.data != null ? (t_11580186.data.length-1) : -1));
              }
          } while(false);
          F.line = 1246;
          Tmp6 = n_11580194[chckIndx(h_11580333, 0, (n_11580194 != null ? n_11580194.length : 0)+0-1)-0].Field2;
          n_11580194[chckIndx(h_11580333, 0, (n_11580194 != null ? n_11580194.length : 0)+0-1)-0].Field2 = genericReset(n_11580194[chckIndx(h_11580333, 0, (n_11580194 != null ? n_11580194.length : 0)+0-1)-0].Field2, NTI1163014);
          Tmp7 = n_11580194[chckIndx(h_11580333, 0, (n_11580194 != null ? n_11580194.length : 0)+0-1)-0].Field3;
          n_11580194[chckIndx(h_11580333, 0, (n_11580194 != null ? n_11580194.length : 0)+0-1)-0].Field3 = genericReset(n_11580194[chckIndx(h_11580333, 0, (n_11580194 != null ? n_11580194.length : 0)+0-1)-0].Field3, NTI11426043);
          raw_insert_11581349(t_11580186, t_11580186, "data", Tmp6, Tmp7, n_11580194[chckIndx(h_11580333, 0, (n_11580194 != null ? n_11580194.length : 0)+0-1)-0].Field0, j_11580645);
          }
          
          F.line = 1247;
          h_11580333 = nxt_11580489;
        }
    } while(false);
  framePtr = F.prev;

  
}
function raw_get_known_hc_11582149(t_11582154, key_11582155, hc_11582156) {
  var result_11582157 = 0;

  var F={procname:"rawGetKnownHC.rawGetKnownHC",prev:framePtr,filename:"tables.nim",line:0};
  framePtr = F;
  BeforeRet: do {
    if (((t_11582154.data != null ? t_11582154.data.length : 0) == 0)) {
    F.line = 47;
    result_11582157 = -1;
    break BeforeRet;
    }
    
    F.line = 48;
    var h_11585138 = (hc_11582156 & (t_11582154.data != null ? (t_11582154.data.length-1) : -1));
    L1: do {
      F.line = 49;
        L2: while (true) {
        if (!is_filled_2164018(t_11582154.data[chckIndx(h_11585138, 0, (t_11582154.data != null ? t_11582154.data.length : 0)+0-1)-0].Field0)) break L2;
          if (((t_11582154.data[chckIndx(h_11585138, 0, (t_11582154.data != null ? t_11582154.data.length : 0)+0-1)-0].Field0 == hc_11582156) && eqStrings(t_11582154.data[chckIndx(h_11585138, 0, (t_11582154.data != null ? t_11582154.data.length : 0)+0-1)-0].Field2, key_11582155))) {
          F.line = 55;
          result_11582157 = h_11585138;
          break BeforeRet;
          }
          
          F.line = 56;
          h_11585138 = next_try_2165014(h_11585138, (t_11582154.data != null ? (t_11582154.data.length-1) : -1));
        }
    } while(false);
    F.line = 57;
    result_11582157 = subInt(-1, h_11585138);
  } while (false);
  framePtr = F.prev;

  return result_11582157;

}
function HEX5BHEX5DHEX3D_11495311(t_11495317, key_11495318, val_11495319) {
  var F={procname:"[]=.[]=",prev:framePtr,filename:"tables.nim",line:0};
  framePtr = F;
    if (((t_11495317.data != null ? t_11495317.data.length : 0) == 0)) {
    if (!(is_power_of_two_2115029(64))) {
    F.line = 127;
    failed_assert_impl_1267680(makeNimstrLit("/home/runner/.choosenim/toolchains/nim-1.2.0/lib/pure/collections/tableimpl.nim(127, 12) `isPowerOfTwo(defaultInitialSize)` "));
    }
    
    F.line = 128;
    t_11495317.counter = 0;
    F.line = 129;
    t_11495317.data = new Array(64); for (var i=0;i<64;++i) {t_11495317.data[i]={Field0: 0, Field1: 0, Field2: null, Field3: null};}    F.line = 131;
    t_11495317.first = -1;
    F.line = 132;
    t_11495317.last = -1;
    }
    
    F.line = 57;
    var hc_11520601 = [0];
    F.line = 58;
    var index_11530620 = raw_get_11520621(t_11495317, key_11495318, hc_11520601, 0);
    if ((0 <= index_11530620)) {
    F.line = 59;
    t_11495317.data[chckIndx(index_11530620, 0, (t_11495317.data != null ? t_11495317.data.length : 0)+0-1)-0].Field3 = val_11495319;
    }
    else {
      if (((t_11495317.data != null ? t_11495317.data.length : 0) == 0)) {
      if (!(is_power_of_two_2115029(64))) {
      F.line = 127;
      failed_assert_impl_1267680(makeNimstrLit("/home/runner/.choosenim/toolchains/nim-1.2.0/lib/pure/collections/tableimpl.nim(127, 12) `isPowerOfTwo(defaultInitialSize)` "));
      }
      
      F.line = 128;
      t_11495317.counter = 0;
      F.line = 129;
      t_11495317.data = new Array(64); for (var i=0;i<64;++i) {t_11495317.data[i]={Field0: 0, Field1: 0, Field2: null, Field3: null};}      F.line = 131;
      t_11495317.first = -1;
      F.line = 132;
      t_11495317.last = -1;
      }
      
      if (must_rehash_11555601(t_11495317)) {
      F.line = 49;
      enlarge_11580180(t_11495317);
      F.line = 50;
      index_11530620 = raw_get_known_hc_11582149(t_11495317, key_11495318, hc_11520601[0]);
      }
      
      F.line = 51;
      index_11530620 = subInt(-1, index_11530620);
      F.line = 52;
      raw_insert_11581349(t_11495317, t_11495317, "data", key_11495318, val_11495319, hc_11520601[0], index_11530620);
      F.line = 60;
      t_11495317.counter = addInt(t_11495317.counter, 1);
    }
    
  framePtr = F.prev;

  
}
function HEX5BHEX5DHEX3D_11586214(obj_11586216, key_11586217, val_11586218) {
    var Tmp1;

  var F={procname:"json.[]=",prev:framePtr,filename:"json.nim",line:0};
  framePtr = F;
    if (!((obj_11586216.kind == 5))) {
    F.line = 346;
    failed_assert_impl_1267680(makeNimstrLit("/home/runner/.choosenim/toolchains/nim-1.2.0/lib/pure/json.nim(346, 9) `obj.kind == JObject` "));
    }
    
    F.line = 347;
    var Tmp1 = obj_11586216;
    if (ConstSet16[Tmp1.kind]===undefined) { raiseFieldError(makeNimstrLit("\'fields\' is not accessible using discriminant \'kind\' of type \'JsonNodeObj\'")); }
    HEX5BHEX5DHEX3D_11495311(Tmp1.fields, key_11586217, val_11586218);
  framePtr = F.prev;

  
}
function new_jint_11426168(n_11426170) {
  var result_11426171 = null;

  var F={procname:"json.newJInt",prev:framePtr,filename:"json.nim",line:0};
  framePtr = F;
    F.line = 194;
    result_11426171 = {kind: 2, num: n_11426170, str: null, fnum: 0.0, bval: false, fields: {data: null, counter: 0, first: 0, last: 0}, elems: null};
  framePtr = F.prev;

  return result_11426171;

}
function new_jfloat_11426185(n_11426187) {
  var result_11426188 = null;

  var F={procname:"json.newJFloat",prev:framePtr,filename:"json.nim",line:0};
  framePtr = F;
    F.line = 198;
    result_11426188 = {kind: 3, fnum: n_11426187, str: null, num: 0, bval: false, fields: {data: null, counter: 0, first: 0, last: 0}, elems: null};
  framePtr = F.prev;

  return result_11426188;

}
function new_jstring_11426086(s_11426088) {
  var result_11426089 = null;

  var F={procname:"json.newJString",prev:framePtr,filename:"json.nim",line:0};
  framePtr = F;
    F.line = 186;
    result_11426089 = {kind: 4, str: nimCopy(null, s_11426088, NTI1163014), num: 0, fnum: 0.0, bval: false, fields: {data: null, counter: 0, first: 0, last: 0}, elems: null};
  framePtr = F.prev;

  return result_11426089;

}
function new_jbool_11426202(b_11426204) {
  var result_11426205 = null;

  var F={procname:"json.newJBool",prev:framePtr,filename:"json.nim",line:0};
  framePtr = F;
    F.line = 202;
    result_11426205 = {kind: 1, bval: b_11426204, str: null, num: 0, fnum: 0.0, fields: {data: null, counter: 0, first: 0, last: 0}, elems: null};
  framePtr = F.prev;

  return result_11426205;

}
function new_jnull_11426219() {
  var result_11426221 = null;

  var F={procname:"json.newJNull",prev:framePtr,filename:"json.nim",line:0};
  framePtr = F;
    F.line = 206;
    result_11426221 = {kind: 0, str: null, num: 0, fnum: 0.0, bval: false, fields: {data: null, counter: 0, first: 0, last: 0}, elems: null};
  framePtr = F.prev;

  return result_11426221;

}
function convert_object_11940214(x_11940216) {
  var result_11940217 = null;

  var F={procname:"json.convertObject",prev:framePtr,filename:"json.nim",line:0};
  framePtr = F;
    F.line = 895;
    switch (get_var_type_11900050(x_11940216)) {
    case 6:
      F.line = 897;
      result_11940217 = new_jarray_11445657();
      L1: do {
        F.line = 898;
        var i_11940225 = 0;
        F.line = 104;
        var colontmp__12161149 = 0;
        F.line = 898;
        colontmp__12161149 = len_11910214(x_11940216);
        F.line = 106;
        var i_12161150 = 0;
        L2: do {
          F.line = 107;
            L3: while (true) {
            if (!(i_12161150 < colontmp__12161149)) break L3;
              F.line = 898;
              i_11940225 = i_12161150;
              F.line = 899;
              add_11475020(result_11940217, convert_object_11940214(HEX5BHEX5D_11930214(x_11940216, i_11940225)));
              F.line = 109;
              i_12161150 = addInt(i_12161150, 1);
            }
        } while(false);
      } while(false);
      break;
    case 5:
      F.line = 901;
      result_11940217 = new_jobject_11426235();
      F.line = 902;
      for (var property in x_11940216) {
        if (x_11940216.hasOwnProperty(property)) {
      
      F.line = 905;
      var nim_property_11940227 = null;
      F.line = 906;
      var nim_value_11940228 = {};
      F.line = 907;
      nim_property_11940227 = property; nim_value_11940228 = x_11940216[property];
      F.line = 908;
      HEX5BHEX5DHEX3D_11586214(result_11940217, cstrToNimstr(nim_property_11940227), convert_object_11940214(nim_value_11940228));
      F.line = 909;
      }}
      break;
    case 2:
      F.line = 911;
      result_11940217 = new_jint_11426168(x_11940216);
      break;
    case 3:
      F.line = 913;
      result_11940217 = new_jfloat_11426185(x_11940216);
      break;
    case 4:
      F.line = 915;
      result_11940217 = new_jstring_11426086(cstrToNimstr(x_11940216));
      break;
    case 1:
      F.line = 917;
      result_11940217 = new_jbool_11426202(x_11940216);
      break;
    case 0:
      F.line = 919;
      result_11940217 = new_jnull_11426219();
      break;
    }
  framePtr = F.prev;

  return result_11940217;

}
function parse_json_11940257(buffer_11940259) {
  var result_11940260 = null;

  var F={procname:"json.parseJson",prev:framePtr,filename:"json.nim",line:0};
  framePtr = F;
  BeforeRet: do {
    F.line = 925;
    result_11940260 = convert_object_11940214(JSON.parse(toJSStr(buffer_11940259)));
    break BeforeRet;
  } while (false);
  framePtr = F.prev;

  return result_11940260;

}
function generateNimDefinitions(str_12161029, public_field_12161030) {
  var result_12161031 = null;

  var F={procname:"nimjson_js.generateNimDefinitions",prev:framePtr,filename:"nimjson_js.nim",line:0};
  framePtr = F;
  BeforeRet: do {
    F.line = 5;
    result_12161031 = toJSStr(to_type_string_12140023(parse_json_11940257(cstrToNimstr(str_12161029)), makeNimstrLit("Object"), public_field_12161030));
    break BeforeRet;
  } while (false);
  framePtr = F.prev;

  return result_12161031;

}
